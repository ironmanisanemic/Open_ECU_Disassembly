╔══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
║                                                                                                                      ║
║                                                   8061 Disassembly                                                   ║
║                                                                                                                      ║
║                   Binary File :                                   S6x file :                                         ║
║                                                                                          A9L.s6x                     ║
║                               32768 (8000) bytes                                                                     ║
║                                                                                                                      ║
║                   Options :                                                                                          ║
║                                  Default options                                                                     ║
║                                                                                                                      ║
║                   CheckSum :                                      SMP Base Address :        a000                     ║
║                                             ecde                  CC Exe Time :             005d                     ║
║                                            Valid                  Levels Number :              8                     ║
║                                                                   Calibrations Number :        1                     ║
║                   Banks :                                                                                            ║
║                                8   00000   07fff                                                                     ║
║                                                                                                                      ║
║                   RBases :                                                                                           ║
║                               f0    8c00    8e59                              f2    8e5a    8fd5                     ║
║                               f4    8fd6    93a7                              f6    93a8    942f                     ║
║                               f8    9430    97a7                              fa    97a8    9a7d                     ║
║                               fc    9a7e    9e59                              fe    9e5a    9ea1                     ║
║                                                                                                                      ║
╚══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
╔══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
║                                                                                                                                                                                                          ║
║                                                                                                                                                                                                          ║
║   Disassembly of Ford A9L EECIV                                                                                                                                                                          ║
║   Comments shamelessly stolen from various web listings and merged here                                                                                                                                  ║
║   15Mhz Clock (2.4 uS HSI/HSO), ROM 2000-9fff, RAM 100-4ff, KAM 700-7ff ?                                                                                                                                ║
║                                                                                                                                                                                                          ║
║                                                                                                                                                                                                          ║
║   AD Channels:                                                                                                                                                                                           ║
║   0 TAR  1 VCAL  2 VPWR  3 OCC  4 SCCS  5 EGO2  6 MAF  7 TP  8 ECT  9 ACT A NDS  B EGO1  C EVP                                                                                                           ║
║   #                                                                                                                                                                                                      ║
║   I/0 mappings:                                                                                                                                                                                          ║
║   bitno or chan   0      1      2      3      4      5      6      7      8      9      10                                                                                                               ║
║   HSO: (chan)     INJ3   INJ4   INJ6   INJ7   INJ5   SPOUT  INJ1   INJ2   INJ8   KTS    S/W (1 mS)                                                                                                       ║
║   HSI: (bit)      PIP    KI     BP     STI           CID    VSS    IDM                                                                                                                                   ║
║   LSO: (bit)      SCVAC  DOL    EVR    ISC    SCVNT  MIL    ACC/WD FP                                                                                                                                    ║
║   BIDI:(bit)      ?      CANP   SHIFT  AM1    AM2    FAN    FANHI  ?                                                                                                                                     ║
║   TAR   Throttle angle rate                                                                                                                                                                              ║
║   VCAL  Calibration constant (normally 2.5 volts)                                                                                                                                                        ║
║   VPWR  Ignition key-on power                                                                                                                                                                            ║
║   OCC   Open Circuit test voltage                                                                                                                                                                        ║
║   SCCS  Speed Control Command Switch                                                                                                                                                                     ║
║   EGO2  LH heated exhaust gas sensor (oxygen)                                                                                                                                                            ║
║   MAF   Mass air flow sensor                                                                                                                                                                             ║
║   TP    Throttle position                                                                                                                                                                                ║
║   ECT   Engine coolant temp sensor                                                                                                                                                                       ║
║   ACT   Air charge temp sensor                                                                                                                                                                           ║
║   NDS   PRNDL(AUTO) Clutch/Neutral(Manual)                                                                                                                                                               ║
║   EGO1  RH heated exhaust sensor                                                                                                                                                                         ║
║   EVP   EGR valve position sensor                                                                                                                                                                        ║
║   #                                                                                                                                                                                                      ║
║   INJn  Fuel Injectors 1 through 8                                                                                                                                                                       ║
║   KTS   pulsewidth (secs) of the charging pulse for knock sensing.                                                                                                                                       ║
║   SPOUT Spark output signal                                                                                                                                                                              ║
║   S/W   software interrupt - set every 1 millisec                                                                                                                                                        ║
║   #                                                                                                                                                                                                      ║
║   PIP   Profile ignition pickup                                                                                                                                                                          ║
║   KI    Knock indicated                                                                                                                                                                                  ║
║   BP    Baromatic pressure sensor                                                                                                                                                                        ║
║   STI   Self test input                                                                                                                                                                                  ║
║   CID   Camshaft Cyl No 1 identifier sensor                                                                                                                                                              ║
║   VSS   Vehicle speed sensor                                                                                                                                                                             ║
║   IDM   Ignition diagnostic monitor                                                                                                                                                                      ║
║   #                                                                                                                                                                                                      ║
║   SCVAC Speed Control Vacuum (speed control servo)                                                                                                                                                       ║
║   DOL   Data Output Link                                                                                                                                                                                 ║
║   EVR   EGR Vacuum Regulator                                                                                                                                                                             ║
║   ISC   Idle Speed Control (Bypass air solenoid)                                                                                                                                                         ║
║   SCVNT Speed Control Vent   (speed control servo)                                                                                                                                                       ║
║   MIL   Self test ouput / Malfunction indicator Light                                                                                                                                                    ║
║   WD    LOS watchdog - must be flipped every 4 ms - also used for ACC cutoff                                                                                                                             ║
║   FP    Fuel Pump                                                                                                                                                                                        ║
║   #                                                                                                                                                                                                      ║
║   CANP  Canister Purge                                                                                                                                                                                   ║
║   SHIFT Shift light/indicator                                                                                                                                                                            ║
║   AM2   Air management solenoid 2 (Thermactor Air Diverter)                                                                                                                                              ║
║   AM1   Air Management solenoid 1 (Thermactor Air Bypass)                                                                                                                                                ║
║   FAN   engine coooling fan                                                                                                                                                                              ║
║   #                                                                                                                                                                                                      ║
║   #1                                                                                                                                                                                                     ║
║   ############################                                                                                                                                                                           ║
║   #1                                                                                                                                                                                                     ║
║   FPM   Fuel pump relay monitor                                                                                                                                                                          ║
║   #1                                                                                                                                                                                                     ║
║   WAC   Wide open throttle Ac cutout                                                                                                                                                                     ║
║   #1                                                                                                                                                                                                     ║
║   ACCS  Air Con cycling switch                                                                                                                                                                           ║
║                                                                                                                                                                                                          ║
║   Register mappings:  Address, [Bit], Name,  notes |                                                                                                                                                     ║
║   standard I/O int regs etc (0-0x11)                                                                                                                                                                     ║
║   0 (Zero)  always zero                                                                                                                                                                                  ║
║   2  @2 bits 6 $2:6 watchdog    7 $2:7                                                                                                                                                                   ║
║   3  @3                                                                                                                                                                                                  ║
║   4  @4                                                                                                                                                                                                  ║
║   5  @5                                                                                                                                                                                                  ║
║   6  @6                                                                                                                                                                                                  ║
║   8  @8                                                                                                                                                                                                  ║
║   9  @9                                                                                                                                                                                                  ║
║   a  @a bits  0 $a:0   1 $a:1  2 $a:2  3 $a:3  4 $a:4                                                                                                                                                    ║
║   b  @b                                                                                                                                                                                                  ║
║   c  @c                                                                                                                                                                                                  ║
║   d  @d                                                                                                                                                                                                  ║
║   e  @e                                                                                                                                                                                                  ║
║   10 @10                                                                                                                                                                                                 ║
║   12 @12 (word)                                                                                                                                                                                          ║
║   #                                                                                                                                                                                                      ║
║   14 - 22 general use|#                                                                                                                                                                                  ║
║   24 @24                                                                                                                                                                                                 ║
║    0 $24:0 = Wide Open Throttle                                                                                                                                                                          ║
║    1 $24:1 = RPM is < 850                                                                                                                                                                                ║
║    2 $24:2 = Run Timer if set                                                                                                                                                                            ║
║    3 $24:3 (?)                                                                                                                                                                                           ║
║    4 $24:4=Console in use                                                                                                                                                                                ║
║    5 $24:5 = Run Timer if set                                                                                                                                                                            ║
║    6 $24:6    "                                                                                                                                                                                          ║
║    7 $24:7    "                                                                                                                                                                                          ║
║   25 @25                                                                                                                                                                                                 ║
║    0 @25:0 Not Used ?                                                                                                                                                                                    ║
║    1 @25:1 STI ignored if set ? below temp threshhold                                                                                                                                                    ║
║    2 @25:2                                                                                                                                                                                               ║
║    3 @25:3                                                                                                                                                                                               ║
║    4 @25:4                                                                                                                                                                                               ║
║    5 @25:5                                                                                                                                                                                               ║
║    6 @25:6                                                                                                                                                                                               ║
║    7 @25:7                                                                                                                                                                                               ║
║   26 @26                                                                                                                                                                                                 ║
║    0 @26:0  MAF count out of range error                                                                                                                                                                 ║
║    1 @26:1                                                                                                                                                                                               ║
║    2 @26:2                                                                                                                                                                                               ║
║    3 @26:3                                                                                                                                                                                               ║
║    4 @26:4                                                                                                                                                                                               ║
║    5 @26:5                                                                                                                                                                                               ║
║    6 @26:6                                                                                                                                                                                               ║
║    7 @26:7                                                                                                                                                                                               ║
║   27 @27                                                                                                                                                                                                 ║
║    0 @27:0                                                                                                                                                                                               ║
║    1 @27:1                                                                                                                                                                                               ║
║    2 @27:2                                                                                                                                                                                               ║
║    3 @27:3                                                                                                                                                                                               ║
║    4 @27:4 Power Steering Flag                                                                                                                                                                           ║
║    5 @27:5                                                                                                                                                                                               ║
║    6 @27:6                                                                                                                                                                                               ║
║    7 @27:7                                                                                                                                                                                               ║
║   28 @28                                                                                                                                                                                                 ║
║    0 @28:0  Egr enabled (zero at cranking)                                                                                                                                                               ║
║    1 @28:1                                                                                                                                                                                               ║
║    2 @28:2                                                                                                                                                                                               ║
║    3 @28:3                                                                                                                                                                                               ║
║    4 @28:4                                                                                                                                                                                               ║
║    5 @28:5                                                                                                                                                                                               ║
║    6 @28:6                                                                                                                                                                                               ║
║    7 @28:7                                                                                                                                                                                               ║
║   29 @29                                                                                                                                                                                                 ║
║    0 @29:0                                                                                                                                                                                               ║
║    1 @29:1                                                                                                                                                                                               ║
║    2 @29:2                                                                                                                                                                                               ║
║    3 @29:3                                                                                                                                                                                               ║
║    4 @29:4                                                                                                                                                                                               ║
║    5 @29:5                                                                                                                                                                                               ║
║    6 @29:6                                                                                                                                                                                               ║
║    7 @29:7                                                                                                                                                                                               ║
║   2a @2A VIP mode flags (diagnostic testing flags)                                                                                                                                                       ║
║    0 @2a:0 VSCDT Vehicle Speed Control thing                                                                                                                                                             ║
║    1 @2a:1 Vehicle Speed Control Self Test ?                                                                                                                                                             ║
║    2 @2a:2 VIP enable (self tests? ) set after engine running for 10 seconds?                                                                                                                            ║
║    3 @2a:3 disable - 'running' after reset - never cleared                                                                                                                                               ║
║    4 @2a:4 Set if hardware fault detected ? - never cleared                                                                                                                                              ║
║    5 @2a:5 engine is running                                                                                                                                                                             ║
║    6 @2a:6 indicates KOEO test in progress (engine off)                                                                                                                                                  ║
║    7 @2a:7 disable VSCDT after reset - never cleared                                                                                                                                                     ║
║   2b @2b - flags                                                                                                                                                                                         ║
║    0 @2b:0 Self Test Output trigger                                                                                                                                                                      ║
║    1 @2b:1 Passed Cyl Balance Test ?                                                                                                                                                                     ║
║    2 @2b:2 Self Test Output trigger - to turn off STO                                                                                                                                                    ║
║    3 @2b:3 Self test error marker                                                                                                                                                                        ║
║    4 @2b:4 Disable Idle Speed Control if set                                                                                                                                                             ║
║    5 @2b:5 STI input state                                                                                                                                                                               ║
║    6 @2b:6 HEGO2 cross over voltage detected                                                                                                                                                             ║
║    7 @2b:7 HEGO1 cross over voltage detected                                                                                                                                                             ║
║   2c @2c                                                                                                                                                                                                 ║
║    0 @2c:0                                                                                                                                                                                               ║
║    1 @2c:1                                                                                                                                                                                               ║
║    2 @2c:2                                                                                                                                                                                               ║
║    3 @2c:3                                                                                                                                                                                               ║
║    4 @2c:4 Sets STO time to 2mS instead of 0.5 secs ?                                                                                                                                                    ║
║    5 @2c:5                                                                                                                                                                                               ║
║    6 @2c:6                                                                                                                                                                                               ║
║    7 @2c:7                                                                                                                                                                                               ║
║   2d @2d                                                                                                                                                                                                 ║
║    0 @2d:0                                                                                                                                                                                               ║
║    1 @2d:1                                                                                                                                                                                               ║
║    2 @2d:2                                                                                                                                                                                               ║
║    3 @2d:3                                                                                                                                                                                               ║
║    4 @2d:4 Set at startup to await very first PIP interrupt (for intialisation etc)                                                                                                                      ║
║    5 @2d:5                                                                                                                                                                                               ║
║    6 @2d:6                                                                                                                                                                                               ║
║    7 @2d:7                                                                                                                                                                                               ║
║   2e @2e                                                                                                                                                                                                 ║
║    2 @2e:2                                                                                                                                                                                               ║
║    3 @2e:3                                                                                                                                                                                               ║
║    4 @2e:4 Fuel synchronization  request Set to request sequential injection?                                                                                                                            ║
║    5 @2e:5                                                                                                                                                                                               ║
║    6 @2e:6 Whether AE fuel is synchronous (1) or asynchronous (0). Initialized to 0.                                                                                                                     ║
║    7 @2e:7 Fuel synchronized with PIP - Sequential Injection in force ?                                                                                                                                  ║
║   2f @2f                                                                                                                                                                                                 ║
║    0 @2f:0                                                                                                                                                                                               ║
║    1 @2f:1                                                                                                                                                                                               ║
║    2 @2f:2                                                                                                                                                                                               ║
║    3 @2f:3                                                                                                                                                                                               ║
║    4 @2f:4                                                                                                                                                                                               ║
║    5 @2f:5                                                                                                                                                                                               ║
║    6 @2f:6                                                                                                                                                                                               ║
║    7 @2f:7                                                                                                                                                                                               ║
║   #                                                                                                                                                                                                      ║
║   30 - 42  General Use|#                                                                                                                                                                                 ║
║   44 @44 State of HSO (Output) lines (WORD)                                                                                                                                                              ║
║    0 @44:0                                                                                                                                                                                               ║
║    1 @44:1                                                                                                                                                                                               ║
║    2 @44:2                                                                                                                                                                                               ║
║    3 @44:3                                                                                                                                                                                               ║
║    4 @44:4                                                                                                                                                                                               ║
║    5 @44:5                                                                                                                                                                                               ║
║    6 @44:6                                                                                                                                                                                               ║
║    7 @44:7                                                                                                                                                                                               ║
║    8 @44:8                                                                                                                                                                                               ║
║   46 @46 LSO image - sets LSO (R2) bits from this register                                                                                                                                               ║
║    0 @46:0                                                                                                                                                                                               ║
║    1 @46:1                                                                                                                                                                                               ║
║    2 @46:2                                                                                                                                                                                               ║
║    3 @46:3                                                                                                                                                                                               ║
║    4 @46:4                                                                                                                                                                                               ║
║    5 @46:5                                                                                                                                                                                               ║
║    6 @46:6                                                                                                                                                                                               ║
║    7 @46:7                                                                                                                                                                                               ║
║   47 @47  bidirectional IO (output) image - sets Low speed IO (R3) from this register                                                                                                                    ║
║    1 @47:1                                                                                                                                                                                               ║
║    2 @47:2                                                                                                                                                                                               ║
║    3 @47:3  Air management (thermactor)                                                                                                                                                                  ║
║    4 @47:4  Air management (IAC)                                                                                                                                                                         ║
║    5 @47:5                                                                                                                                                                                               ║
║    6 @47:6                                                                                                                                                                                               ║
║   #                                                                                                                                                                                                      ║
║   48 - 4b General use|#                                                                                                                                                                                  ║
║   4c @4c                                                                                                                                                                                                 ║
║    1 @4c:1 Skips time check (set with $4c:3?)                                                                                                                                                            ║
║    2 @4c:2 Set to disable max event count (12) in each time slice                                                                                                                                        ║
║    3 @4c:3 Set to cause immediate HSO output (do not queue)                                                                                                                                              ║
║    4 @4c:4 Set for empty queue ?                                                                                                                                                                         ║
║    5 @4c:5 HSO output time has been missed                                                                                                                                                               ║
║    6 @4c:6 Events are queued (software queue)                                                                                                                                                            ║
║    7 @4c:7 Set for no queued events ?                                                                                                                                                                    ║
║   4d @4d Not Used ?                                                                                                                                                                                      ║
║   4E @4e HSI bit flags                                                                                                                                                                                   ║
║    0 @4e:0 Indicates an unexpected HS Interrupt Occurred                                                                                                                                                 ║
║    1 @4e:1                                                                                                                                                                                               ║
║    2 @4e:2 New BAP average calc required                                                                                                                                                                 ║
║    3 @4e:3 new RPM calc reqd                                                                                                                                                                             ║
║    4 @4e:4 new IDM                                                                                                                                                                                       ║
║    5 @4e:5  - etc -                                                                                                                                                                                      ║
║    6 @4e:6                                                                                                                                                                                               ║
║    7 @4e:7                                                                                                                                                                                               ║
║   4F @4f                                                                                                                                                                                                 ║
║    0 @4f:0 A PIP 'double edge' (impossibly short time) has occurred - faulty sensor ?                                                                                                                    ║
║    1 @4f:1                                                                                                                                                                                               ║
║    2 @4f:2 Timer overflow has occured (32 bit = 171.8 mins)                                                                                                                                              ║
║    3 @4f:3                                                                                                                                                                                               ║
║    4 @4f:4                                                                                                                                                                                               ║
║    5 @4f:5                                                                                                                                                                                               ║
║    6 @4f:6                                                                                                                                                                                               ║
║    7 @4f:7                                                                                                                                                                                               ║
║   50 - 70  General use                                                                                                                                                                                   ║
║   #1                                                                                                                                                                                                     ║
║   5c   @5c Filtered RPM.  Used for PIP Calculation switch                                                                                                                                                ║
║   #1 |#                                                                                                                                                                                                  ║
║   5e - 70 General use|#                                                                                                                                                                                  ║
║   72 @72 = 0x180 RAM Pointers, used as "Base+Offset" for indexed instructions                                                                                                                            ║
║   74 @74 = 0x27e                                                                                                                                                                                         ║
║   76 @76 = 0x37a                                                                                                                                                                                         ║
║   78 @78 ROM Pointer 8eda  - overlaps F2 pointer, not obvious why                                                                                                                                        ║
║   7a @7a (word)                                                                                                                                                                                          ║
║   7c @7c (byte)                                                                                                                                                                                          ║
║   7d @7d Used for STO output ?                                                                                                                                                                           ║
║   7e @7e Pointer to RAM table                                                                                                                                                                            ║
║   80 @80 Calculated HSO Time  (for any output via HSO)                                                                                                                                                   ║
║   82 @82 Calc HSO Time top 8 bits                                                                                                                                                                        ║
║   83 @83 Image of Last HSI byte (state of interupt bits)                                                                                                                                                 ║
║   84-86  General                                                                                                                                                                                         ║
║   87 @87 Image of HSI bits CHANGED since last HS Interrupt                                                                                                                                               ║
║    0 @87:0                                                                                                                                                                                               ║
║    1 @87:1 these set for handler reqd.                                                                                                                                                                   ║
║    2 @87:2                                                                                                                                                                                               ║
║   #1                                                                                                                                                                                                     ║
║    3 @87:3                                                                                                                                                                                               ║
║   #1                                                                                                                                                                                                     ║
║    4 @87:4                                                                                                                                                                                               ║
║    5 @87:5                                                                                                                                                                                               ║
║    6 @87:6                                                                                                                                                                                               ║
║    7 @87:7                                                                                                                                                                                               ║
║   88 @88 Used as ROM pointer in HSO output routine (cell no)                                                                                                                                             ║
║   8a @8a Used as RAM pointer in HSO output routine (cell no)                                                                                                                                             ║
║   8C @8c master reference time, 24 bits                                                                                                                                                                  ║
║   8e @8e master reference time, 24 bits                                                                                                                                                                  ║
║   8f @8f Time delta for watchdog reset                                                                                                                                                                   ║
║   90 @90 Last HSI status (for bit changes)                                                                                                                                                               ║
║   91 @91 pointer to 8 entries, each is count of HSO outputs queued. Per 5ms slice ?                                                                                                                      ║
║   92 @92 pointer to HSO or Injection entries in tables in RAM (HSOTable, InjTTab)                                                                                                                        ║
║   94 - 96 General, but used in STO output                                                                                                                                                                ║
║   98 NOT USED ?                                                                                                                                                                                          ║
║   9a @9a Mass flow after calculations (BAP, ACT etc)                                                                                                                                                     ║
║   9b @9b                                                                                                                                                                                                 ║
║   9c @9c                                                                                                                                                                                                 ║
║   9d @9d                                                                                                                                                                                                 ║
║   9e @9e                                                                                                                                                                                                 ║
║   9f @9f Initial Start value ECT - choke/enrich ?                                                                                                                                                        ║
║   a0 @a0                                                                                                                                                                                                 ║
║    0 @a0:0                                                                                                                                                                                               ║
║    1 @a0:1                                                                                                                                                                                               ║
║    2 @a0:2                                                                                                                                                                                               ║
║    3 @a0:3                                                                                                                                                                                               ║
║    4 @a0:4                                                                                                                                                                                               ║
║    5 @a0:5                                                                                                                                                                                               ║
║    6 @a0:6                                                                                                                                                                                               ║
║    7 @a0:7                                                                                                                                                                                               ║
║   a1 @a1                                                                                                                                                                                                 ║
║    0 @a1:0 engine at operating temp ( 170 < temp < 226 )                                                                                                                                                 ║
║    1 @a1:1 eng RPM something?                                                                                                                                                                            ║
║    2 @a1:2 underspeed, RPM < ?                                                                                                                                                                           ║
║    3 @a1:3 eng RPM something?                                                                                                                                                                            ║
║    4 @a1:4 eng RPM something?                                                                                                                                                                            ║
║    5 @a1:5 Canister Purge ?                                                                                                                                                                              ║
║    6 @a1:6 eng RPM something?                                                                                                                                                                            ║
║    7 @a1:7 set if RPM > 50                                                                                                                                                                               ║
║   a2 @a2                                                                                                                                                                                                 ║
║   a4 @a4                                                                                                                                                                                                 ║
║   a6 @a6                                                                                                                                                                                                 ║
║   a8 @a8                                                                                                                                                                                                 ║
║   AA @aa Throttle position ( )                                                                                                                                                                           ║
║   ac @ac                                                                                                                                                                                                 ║
║   AE @ae engine RPMx4 ( ) - Raw from calc                                                                                                                                                                ║
║   B0 @b0 Engine Coolant Temperature in degrees Farenheit( )[multiply by 2]                                                                                                                               ║
║   B1 @b1 Air Charge Temperature in degrees Farenheit( )[multiply by 2]                                                                                                                                   ║
║   b2 @b2                                                                                                                                                                                                 ║
║   b3 @b3                                                                                                                                                                                                 ║
║   b4 @b4                                                                                                                                                                                                 ║
║   b5 @b5 speed control flags = Cruise control                                                                                                                                                            ║
║   1                                                                                                                                                                                                      ║
║    0 @b5:0 engine at operating temp ( 170 < temp < 226 )                                                                                                                                                 ║
║    1 @b5:1 Error ?                                                                                                                                                                                       ║
║   #1                                                                                                                                                                                                     ║
║    2 @b5:2                                                                                                                                                                                               ║
║    3 @b5:3 Resume Button                                                                                                                                                                                 ║
║    4 @b5:4 Accel  Button                                                                                                                                                                                 ║
║    5 @b5:5 Coast  Button                                                                                                                                                                                 ║
║    6 @b5:6 On     Button                                                                                                                                                                                 ║
║    7 @b5:7 Off    Button                                                                                                                                                                                 ║
║   B6 @b6 MAP(BP) counts per unit of time                                                                                                                                                                 ║
║   b7 @b7 required ISC output frequency                                                                                                                                                                   ║
║   b8 @b8 required ISC duty cycle                                                                                                                                                                         ║
║   ba @ba PIP high event time, 24 bits                                                                                                                                                                    ║
║   bc @bc PIP high event time, 24 bits                                                                                                                                                                    ║
║   bd @bd A counter to indicate how often to update MKAY (linked to PIPs per rev)                                                                                                                         ║
║   be @be PIP hi-lo time delta (Pulsewidth)                                                                                                                                                               ║
║   c0 @c0 Half period multiplier.  Corrects for average error caused by hall effect sensor in distributor and armature.                                                                                   ║
║   c2 @c2                                                                                                                                                                                                 ║
║   c4 @c4                                                                                                                                                                                                 ║
║    0 @c4:0                                                                                                                                                                                               ║
║    1 @c4:1                                                                                                                                                                                               ║
║    2 @c4:2 Flag for very first VSS tick received.                                                                                                                                                        ║
║    3 @c4:3                                                                                                                                                                                               ║
║    4 @c4:4                                                                                                                                                                                               ║
║    5 @c4:5                                                                                                                                                                                               ║
║    6 @c4:6                                                                                                                                                                                               ║
║    7 @c4:7                                                                                                                                                                                               ║
║   c5 @c5                                                                                                                                                                                                 ║
║    0 @c5:0                                                                                                                                                                                               ║
║    1 @c5:1                                                                                                                                                                                               ║
║    2 @c5:2                                                                                                                                                                                               ║
║    3 @c5:3                                                                                                                                                                                               ║
║    4 @c5:4                                                                                                                                                                                               ║
║    5 @c5:5                                                                                                                                                                                               ║
║    6 @c5:6                                                                                                                                                                                               ║
║    7 @c5:7                                                                                                                                                                                               ║
║   c6 @c6                                                                                                                                                                                                 ║
║   C8 @c8 Seconds since start (i.e. time since exiting crank mode, $a1:7 = 0)                                                                                                                             ║
║   C9 @c9 Seconds since ECT became greater than TEMPFB  ($24:6 = 1)                                                                                                                                       ║
║   ca @ca                                                                                                                                                                                                 ║
║    0 @ca:0 Do not use background timer for Filter subroutine call                                                                                                                                        ║
║    1 @ca:1                                                                                                                                                                                               ║
║    2 @ca:2                                                                                                                                                                                               ║
║    3 @ca:3                                                                                                                                                                                               ║
║    4 @ca:4                                                                                                                                                                                               ║
║    5 @ca:5                                                                                                                                                                                               ║
║    6 @ca:6                                                                                                                                                                                               ║
║    7 @ca:7                                                                                                                                                                                               ║
║   CB @cb Time at WOT, sec. ($a1:2 = 1)                                                                                                                                                                   ║
║   CC @cc Time since Neutral/Drive Switch State change, sec.                                                                                                                                              ║
║   CD @cd Not at Closed throttle Timer, sec. ($24:2 = 1)                                                                                                                                                  ║
║   CE @ce Managed Fuel Air Timer, sec.                                                                                                                                                                    ║
║   cf @cf Count of events in the HSO hardware queue.                                                                                                                                                      ║
║   d0 @d0                                                                                                                                                                                                 ║
║   d1 @d1 Pointer to injection delay table ? incremented by 32 and checked when syncing ?                                                                                                                 ║
║   d2 @d2                                                                                                                                                                                                 ║
║   d3 @d3                                                                                                                                                                                                 ║
║   d4 @d4                                                                                                                                                                                                 ║
║   d5 @d5                                                                                                                                                                                                 ║
║   d6 @d6                                                                                                                                                                                                 ║
║    0 @d6:0                                                                                                                                                                                               ║
║    1 @d6:1                                                                                                                                                                                               ║
║    2 @d6:2                                                                                                                                                                                               ║
║    3 @d6:3                                                                                                                                                                                               ║
║    4 @d6:4 sets STO time to 5 mS instead of 0.5 secs ?                                                                                                                                                   ║
║    5 @d6:5                                                                                                                                                                                               ║
║    6 @d6:6                                                                                                                                                                                               ║
║    7 @d6:7                                                                                                                                                                                               ║
║   d7 @d7 Trouble Code Flags                                                                                                                                                                              ║
║    0 @d7:0                                                                                                                                                                                               ║
║    1 @d7:1                                                                                                                                                                                               ║
║    2 @d7:2                                                                                                                                                                                               ║
║    3 @d7:3                                                                                                                                                                                               ║
║    4 @d7:4                                                                                                                                                                                               ║
║    5 @d7:5                                                                                                                                                                                               ║
║    6 @d7:6                                                                                                                                                                                               ║
║    7 @d7:7                                                                                                                                                                                               ║
║   d8 @d8                                                                                                                                                                                                 ║
║    0 @d8:0                                                                                                                                                                                               ║
║    1 @d8:1                                                                                                                                                                                               ║
║    2 @d8:2                                                                                                                                                                                               ║
║    3 @d8:3                                                                                                                                                                                               ║
║    4 @d8:4                                                                                                                                                                                               ║
║    5 @d8:5                                                                                                                                                                                               ║
║    6 @d8:6 Indicates KAM invalid for VIP.                                                                                                                                                                ║
║    7 @d8:7                                                                                                                                                                                               ║
║   d9 @d9                                                                                                                                                                                                 ║
║    0 @d9:0 Prevents fuel pump being checked for timeout (normally 1 sec)                                                                                                                                 ║
║    1 @d9:1                                                                                                                                                                                               ║
║    2 @d9:2                                                                                                                                                                                               ║
║    3 @d9:3                                                                                                                                                                                               ║
║    4 @d9:4                                                                                                                                                                                               ║
║    5 @d9:5                                                                                                                                                                                               ║
║    6 @d9:6                                                                                                                                                                                               ║
║    7 @d9:7                                                                                                                                                                                               ║
║   #da @da                                                                                                                                                                                                ║
║   #dc @dc                                                                                                                                                                                                ║
║   #de @de HSI changed bits, AND low speed changed input bits since last time                                                                                                                             ║
║   #e0 @e0                                                                                                                                                                                                ║
║   #e1 @e1                                                                                                                                                                                                ║
║   #e2 @e2                                                                                                                                                                                                ║
║   #e3 - e5 not used ?                                                                                                                                                                                    ║
║   #e6 @e6                                                                                                                                                                                                ║
║    0 @e6:0                                                                                                                                                                                               ║
║    1 @e6:1                                                                                                                                                                                               ║
║    2 @e6:2                                                                                                                                                                                               ║
║    3 @e6:3                                                                                                                                                                                               ║
║    4 @e6:4                                                                                                                                                                                               ║
║    5 @e6:5                                                                                                                                                                                               ║
║    6 @e6:6                                                                                                                                                                                               ║
║    7 @e6:7                                                                                                                                                                                               ║
║   #e7 @e7                                                                                                                                                                                                ║
║    0 @e7:0 Low speed limit - fire alternate injectors                                                                                                                                                    ║
║    1 @e7:1 Flip state for alternate firing                                                                                                                                                               ║
║    2 @e7:2 High speed limit - alternate fuel/spark                                                                                                                                                       ║
║    3 @e7:3                                                                                                                                                                                               ║
║    4 @e7:4                                                                                                                                                                                               ║
║    5 @e7:5 Full Fuel ?                                                                                                                                                                                   ║
║    6 @e7:6 - not used - ?                                                                                                                                                                                ║
║    7 @e7:7  In 'Drive' if set                                                                                                                                                                            ║
║   #e8 @e8                                                                                                                                                                                                ║
║    0 @e8:0 Control flags for ctntmr                                                                                                                                                                      ║
║    1 @e8:1                                                                                                                                                                                               ║
║    2 @e8:2                                                                                                                                                                                               ║
║    3 @e8:3                                                                                                                                                                                               ║
║    4 @e8:4                                                                                                                                                                                               ║
║    5 @e8:5                                                                                                                                                                                               ║
║    6 @e8:6                                                                                                                                                                                               ║
║    7 @e8:7                                                                                                                                                                                               ║
║   #e9 @e9                                                                                                                                                                                                ║
║    0 @e9:0                                                                                                                                                                                               ║
║    1 @e9:1                                                                                                                                                                                               ║
║    2 @e9:2                                                                                                                                                                                               ║
║    3 @e9:3                                                                                                                                                                                               ║
║    4 @e9:4                                                                                                                                                                                               ║
║    5 @e9:5                                                                                                                                                                                               ║
║    6 @e9:6                                                                                                                                                                                               ║
║    7 @e9:7                                                                                                                                                                                               ║
║   #ea @ea                                                                                                                                                                                                ║
║    0 @ea:0                                                                                                                                                                                               ║
║    1 @ea:1                                                                                                                                                                                               ║
║    2 @ea:2                                                                                                                                                                                               ║
║    3 @ea:3                                                                                                                                                                                               ║
║    4 @ea:4                                                                                                                                                                                               ║
║    5 @ea:5                                                                                                                                                                                               ║
║    6 @ea:6                                                                                                                                                                                               ║
║    7 @ea:7                                                                                                                                                                                               ║
║   #eb @eb                                                                                                                                                                                                ║
║    0 @eb:0                                                                                                                                                                                               ║
║    1 @eb:1 set when PIP is at narrow slot/signature PIP                                                                                                                                                  ║
║    2 @eb:2                                                                                                                                                                                               ║
║    3 @eb:3                                                                                                                                                                                               ║
║    4 @eb:4                                                                                                                                                                                               ║
║    5 @eb:5                                                                                                                                                                                               ║
║    6 @eb:6                                                                                                                                                                                               ║
║    7 @eb:7                                                                                                                                                                                               ║
║   #ec @ec                                                                                                                                                                                                ║
║    0 @ec:0 Managed Fuel Air State flag, set to 1 if MFA is being used.                                                                                                                                   ║
║    1 @ec:1                                                                                                                                                                                               ║
║    2 @ec:2                                                                                                                                                                                               ║
║    3 @ec:3                                                                                                                                                                                               ║
║    4 @ec:4                                                                                                                                                                                               ║
║    5 @ec:5                                                                                                                                                                                               ║
║    6 @ec:6                                                                                                                                                                                               ║
║    7 @ec:7                                                                                                                                                                                               ║
║   #ed @ed                                                                                                                                                                                                ║
║    0 @ed:0                                                                                                                                                                                               ║
║    1 @ed:1                                                                                                                                                                                               ║
║    2 @ed:2                                                                                                                                                                                               ║
║    3 @ed:3                                                                                                                                                                                               ║
║    4 @ed:4                                                                                                                                                                                               ║
║    5 @ed:5                                                                                                                                                                                               ║
║    6 @ed:6                                                                                                                                                                                               ║
║    7 @ed:7                                                                                                                                                                                               ║
║   #ee @ee                                                                                                                                                                                                ║
║    0 @ee:0                                                                                                                                                                                               ║
║    1 @ee:1                                                                                                                                                                                               ║
║    2 @ee:2                                                                                                                                                                                               ║
║    3 @ee:3                                                                                                                                                                                               ║
║    4 @ee:4                                                                                                                                                                                               ║
║    5 @ee:5                                                                                                                                                                                               ║
║    6 @ee:6                                                                                                                                                                                               ║
║    7 @ee:7                                                                                                                                                                                               ║
║   #ef @ef                                                                                                                                                                                                ║
║    0 @ef:0                                                                                                                                                                                               ║
║    1 @ef:1                                                                                                                                                                                               ║
║    2 @ef:2                                                                                                                                                                                               ║
║    3 @ef:3                                                                                                                                                                                               ║
║    4 @ef:4                                                                                                                                                                                               ║
║    5 @ef:5                                                                                                                                                                                               ║
║    6 @ef:6                                                                                                                                                                                               ║
║    7 @ef:7                                                                                                                                                                                               ║
║   #                                                                                                                                                                                                      ║
║   #F0 = 8c00  ROM 'Base' Pointers to data areas                                                                                                                                                          ║
║   #F2 = 8e5a  used as index pointers, i.e  "Base Reg+Offset"                                                                                                                                             ║
║   #F4 = 8fd6  Also R78 = 8eda ROM Pointer                                                                                                                                                                ║
║   #F6 = 93a8                                                                                                                                                                                             ║
║   #F8 = 9430                                                                                                                                                                                             ║
║   #FA = 97a8                                                                                                                                                                                             ║
║   #FC = 9a7e                                                                                                                                                                                             ║
║   #FE = 9e5a                                                                                                                                                                                             ║
║   RAM locations                                                                                                                                                                                          ║
║   100 @100 filtered TP (throttle Position)                                                                                                                                                               ║
║   102 @102 filtered EVP (for EGR position ?)                                                                                                                                                             ║
║   104 @104 filtered EPT (?)                                                                                                                                                                              ║
║   106 @106 Filtered EGO (?)                                                                                                                                                                              ║
║   108 @108 filtered RPM A                                                                                                                                                                                ║
║   10A @10a MAP/BP                                                                                                                                                                                        ║
║   10C @10c KEYPWR reference voltage (Iivpwr)                                                                                                                                                             ║
║   10e @10e Open circuit ref voltage ? Iocc                                                                                                                                                               ║
║   110 @110 VCAL regulated voltage (2.5volts? )(Ivcal)                                                                                                                                                    ║
║   112 @112 ECT raw AD (Iect)                                                                                                                                                                             ║
║   114 @114 ACT raw AD (Iact)                                                                                                                                                                             ║
║   116 @116 EVP raw AD (Ievp)                                                                                                                                                                             ║
║   118 @118 not used here (Iacc nds)                                                                                                                                                                      ║
║   11A @11a NDS/A3C raw AD (multiplexed) (Iacc nds)                                                                                                                                                       ║
║   11C @11c HEGO1 raw AD right side oxygen sensor (Iego1)                                                                                                                                                 ║
║   11E @11e HEGO2 raw AD (Iego2)                                                                                                                                                                          ║
║   120 @120 ? TAR Throttle position sensor rate NOT USED ? (Itar)                                                                                                                                         ║
║   122 @122 TP raw AD  (Itp)                                                                                                                                                                              ║
║   124 @124 MAF (raw) (read at 2D33) (Imaf)                                                                                                                                                               ║
║   126 @126 Minimum Value when throttle closed (RATCH - from filtered TPS)                                                                                                                                ║
║   128 @128 default EVP - if sensor is bad  (Eoff)                                                                                                                                                        ║
║   12A @12a Time at closed throttle timer (secs)(set with CTTMR FLG)                                                                                                                                      ║
║   12C @12c                                                                                                                                                                                               ║
║   !                                                                                                                                                                                                      ║
║   12E @12e                                                                                                                                                                                               ║
║   130 @130 Filtered Barometric Pressure                                                                                                                                                                  ║
║   132 @132 FAM filter timer (sec)                                                                                                                                                                        ║
║   134 @134 Time since CPU power -up  (mSecs)                                                                                                                                                             ║
║   136 @136 time since last BP pulse? (mS, counts up)                                                                                                                                                     ║
║   137 @137 High Power Demand Timer, secs                                                                                                                                                                 ║
║   138 @138 Closed Throttle Upstream Air Timer (sec)                                                                                                                                                      ║
║   139 @139 Shift Light Timer.                                                                                                                                                                            ║
║   13A @13A Adaptive fuel timer (sec)  ( 170 < ECT temp < 226 ?)                                                                                                                                          ║
║   13c @13c                                                                                                                                                                                               ║
║   13E @13E time since last PIP recieved                                                                                                                                                                  ║
║   140 @140                                                                                                                                                                                               ║
║   142 @142                                                                                                                                                                                               ║
║   144 @144 Closed throttle neutral timer UP AND DOWN modes                                                                                                                                               ║
║   145 @145 LOM load transition timer (sec)                                                                                                                                                               ║
║   146 @146 RPM sampling timer ?                                                                                                                                                                          ║
║   147 @147 Time since incrementing LAMMUL (msec)                                                                                                                                                         ║
║   148 @148                                                                                                                                                                                               ║
║   149 @149 Canister purge accumulation timer (sec) (PRGFLG)                                                                                                                                              ║
║   14A @14A Current Purge on time(PRGFLG)                                                                                                                                                                 ║
║   14C @14C High Load Timer Time in 1/8 seconds. Incr only under high load, resets when not running under high load. High load is defined as a load (VE) greater than 70% when warm or 80% when cold.     ║
║   14d @14d Secs since Entering RUN Mode ($a1:6 = 0) i.e. engine running                                                                                                                                  ║
║   14E @14e ElectroDrive Fan Timer (Sec)                                                                                                                                                                  ║
║   14F @14F Time in CRANK Mode (1/8 sec)                                                                                                                                                                  ║
║   150 @150 Decel fuel low load timer, sec.                                                                                                                                                               ║
║   152 @152                                                                                                                                                                                               ║
║   154 @154                                                                                                                                                                                               ║
║   156 @156                                                                                                                                                                                               ║
║   157 @157                                                                                                                                                                                               ║
║   158 @158                                                                                                                                                                                               ║
║   15a @15a                                                                                                                                                                                               ║
║   15c @15c                                                                                                                                                                                               ║
║   15e @15e                                                                                                                                                                                               ║
║   160 @160                                                                                                                                                                                               ║
║   162 @162                                                                                                                                                                                               ║
║   164 @164                                                                                                                                                                                               ║
║   166 @166                                                                                                                                                                                               ║
║   168 @168                                                                                                                                                                                               ║
║   16a @16a                                                                                                                                                                                               ║
║   16c @16c                                                                                                                                                                                               ║
║   16e @16e                                                                                                                                                                                               ║
║   170 @170 range checked EVP                                                                                                                                                                             ║
║   172 @172                                                                                                                                                                                               ║
║   174 @174                                                                                                                                                                                               ║
║   176 @176 Pressure drop across the control orifice                                                                                                                                                      ║
║   178 @178                                                                                                                                                                                               ║
║   17a @17a                                                                                                                                                                                               ║
║   17c @17c                                                                                                                                                                                               ║
║   17e @17e                                                                                                                                                                                               ║
║   180 @180 Injector delay in degrees                                                                                                                                                                     ║
║   182 @182                                                                                                                                                                                               ║
║   184 @184                                                                                                                                                                                               ║
║   186 @186                                                                                                                                                                                               ║
║   188 @188                                                                                                                                                                                               ║
║   18a @18a                                                                                                                                                                                               ║
║   18c @18c                                                                                                                                                                                               ║
║   18e @18e                                                                                                                                                                                               ║
║   190 @190                                                                                                                                                                                               ║
║   192 @192                                                                                                                                                                                               ║
║   194 @194                                                                                                                                                                                               ║
║   196 @196                                                                                                                                                                                               ║
║   198 @198                                                                                                                                                                                               ║
║   19a @19a                                                                                                                                                                                               ║
║   19c @19c                                                                                                                                                                                               ║
║   19e @19e                                                                                                                                                                                               ║
║   1a0 @1a0                                                                                                                                                                                               ║
║   1a2 @1a2                                                                                                                                                                                               ║
║   1a4 @1a4                                                                                                                                                                                               ║
║   1a6 @1a6                                                                                                                                                                                               ║
║   1a8 @1a8                                                                                                                                                                                               ║
║   1aa @1aa probably trouble codes stored from here to 1bd                                                                                                                                                ║
║   1ac @1aa                                                                                                                                                                                               ║
║   1ae @1ae                                                                                                                                                                                               ║
║   1b0 @1b0                                                                                                                                                                                               ║
║   1b2 @1b2                                                                                                                                                                                               ║
║   1b4 @1b4                                                                                                                                                                                               ║
║   1b6 @1b6                                                                                                                                                                                               ║
║   1b8 @1b8                                                                                                                                                                                               ║
║   1ba @1ba                                                                                                                                                                                               ║
║   1BD @1BD                                                                                                                                                                                               ║
║   1C0 @1C0 1/8 second timer for the MIL logic.                                                                                                                                                           ║
║   1C2 @1C2 Time since NO START flag set?                                                                                                                                                                 ║
║   1C4 @1C4 Time since last idm                                                                                                                                                                           ║
║   1C6 @1C6 VIP timer?                                                                                                                                                                                    ║
║   1C8 @1C8 Time since $2b:5   (R2B bit 5)                                                                                                                                                                ║
║   1C9 @1C9 Vehicle Speed Sensor Time (.125 Sec) (Test only? )                                                                                                                                            ║
║   1CA @1CA VIP timer?                                                                                                                                                                                    ║
║   1FE @1FE filtered BP                                                                                                                                                                                   ║
║   200 @200                                                                                                                                                                                               ║
║   202 @202                                                                                                                                                                                               ║
║   204 @204                                                                                                                                                                                               ║
║   206 @206 Injector Pulse Width in ms for Bank 1 (port 0)                                                                                                                                                ║
║   208 @208 Injector Pulse Width in ms for Bank 2 (port 2)                                                                                                                                                ║
║   20A @20A Desired fuel ratio for the left side bank of injectors.                                                                                                                                       ║
║   20C @20C Desired fuel ratio for the right side bank of injectors. Larger values mean LESS fuel                                                                                                         ║
║   20e @20e Filtered desired EGR valve position.                                                                                                                                                          ║
║   210 @210 Closed Loop Flag. 1 = closed loop. 0 = fuel mixture taken from Tables and functions without feedback and trim from the HEGOs                                                                  ║
║   211 @211 Battery Voltage Level [divided by 16]                                                                                                                                                         ║
║   212 @212                                                                                                                                                                                               ║
║   213 @213 Time since brake went on.(BIFLG)                                                                                                                                                              ║
║   214 @214 A/C Clutch Wide Open Throttle Time (Secs)                                                                                                                                                     ║
║   215 @215 A/C Clutch WOT Cutout Timer (1/8 Sec)                                                                                                                                                         ║
║   216 @216 A/C Clutch Transition Timer (1/8 Sec)                                                                                                                                                         ║
║   218 @218 Time since Idle Speed Control system was warned of impending increase in load (ACIFLG)                                                                                                        ║
║   21C @21C Averaged (filtered) Load                                                                                                                                                                      ║
║   21E @21E Time since the spark was last advanced by the KNOCK Strategy(KNOCK ENABLED) mSec.                                                                                                             ║
║   220 @220 Not at WOT (Wide Open Throttle) Timer. (sec)                                                                                                                                                  ║
║   222 @222                                                                                                                                                                                               ║
║   224 @224                                                                                                                                                                                               ║
║   226 @226                                                                                                                                                                                               ║
║   228 @228                                                                                                                                                                                               ║
║   22a @22a                                                                                                                                                                                               ║
║   22b @22b                                                                                                                                                                                               ║
║   22c @22c                                                                                                                                                                                               ║
║   22d @22d                                                                                                                                                                                               ║
║   22e @22e                                                                                                                                                                                               ║
║   22f @22f                                                                                                                                                                                               ║
║   230 @230                                                                                                                                                                                               ║
║   231 @231                                                                                                                                                                                               ║
║   232 @232                                                                                                                                                                                               ║
║   233 @233                                                                                                                                                                                               ║
║   234 @234                                                                                                                                                                                               ║
║   236 @236                                                                                                                                                                                               ║
║   238 @238                                                                                                                                                                                               ║
║   23a @23a                                                                                                                                                                                               ║
║   23c @23c                                                                                                                                                                                               ║
║   23e @23e Base amount of DWELL as a function of VBAT and TEMDWL, sec. Initial value = 0.005.                                                                                                            ║
║   240 @240                                                                                                                                                                                               ║
║   242 @242                                                                                                                                                                                               ║
║   244 @244                                                                                                                                                                                               ║
║   246 @246                                                                                                                                                                                               ║
║   248 @248                                                                                                                                                                                               ║
║   24a @24a                                                                                                                                                                                               ║
║   24c @24c                                                                                                                                                                                               ║
║   24d @24d                                                                                                                                                                                               ║
║   24e @24e                                                                                                                                                                                               ║
║   250 @250 The current measured mass air flow in Kg/Hr                                                                                                                                                   ║
║   252 @252                                                                                                                                                                                               ║
║   254 @254                                                                                                                                                                                               ║
║   256 @256                                                                                                                                                                                               ║
║   258 @258                                                                                                                                                                                               ║
║   25A @25A                                                                                                                                                                                               ║
║   25C @25C engine LOAD (= VE?)                                                                                                                                                                           ║
║   25E @25e                                                                                                                                                                                               ║
║   260 @260 PERCENT LOAD Volumetric Efficiency in percent                                                                                                                                                 ║
║   262 @262                                                                                                                                                                                               ║
║   264 @264 Accumulated time EGR is enabled (sec)                                                                                                                                                         ║
║   266 @266 Seconds since EGO1 noswitch ($27:7 = 1) i.e.lack of switching ?                                                                                                                               ║
║   267 @267 Seconds since EGO2 noswitch ($27:6 = 1) i.e.lack of switching ?                                                                                                                               ║
║   27C @27C Filtered RPM B                                                                                                                                                                                ║
║   288 @288 EM - EGR Mass Flow                                                                                                                                                                            ║
║   29A @29A Total advance in crank degress before TDC( )[divide by 4]                                                                                                                                     ║
║   29E @29E scaled and translated TAR ?                                                                                                                                                                   ║
║   2A8 @2A8 VSCCS Debounce timer, sec.                                                                                                                                                                    ║
║   2AC @2AC filtered vehicle speed B  (MPH)                                                                                                                                                               ║
║   2B2 @2B2 vehicle speed (MPH) unfiltered                                                                                                                                                                ║
║   2BB @2BB timer time since last VSS click                                                                                                                                                               ║
║   2BC @2BC filtered vehicle speed A  (MPH)                                                                                                                                                               ║
║   2BE @2be                                                                                                                                                                                               ║
║   2C0 @2c0                                                                                                                                                                                               ║
║                                                                                                                                                                                                          ║
║   2C5 @2c5 RAM based table for SPOUT, 8 injects and KTS?  (2c5-327)                                                                                                                                      ║
║   Format is 10 byte entries (5 bytes on, 5 bytes off)                                                                                                                                                    ║
║   0       link field.  FF if not in use (index to another 2C5 entry)                                                                                                                                     ║
║   1       0 here to stop? (2C61) or index of corresponding 2284 table entry                                                                                                                              ║
║   2,3,4   24 bit IO time for HSO event                                                                                                                                                                   ║
║   5       link field index to another 2C5 entry                                                                                                                                                          ║
║   6       index to corresponding 2284 Table entry                                                                                                                                                        ║
║   7,8,9   HSO Event time                                                                                                                                                                                 ║
║                                                                                                                                                                                                          ║
║   #229e                                                                                                                                                                                                  ║
║   ##################################################################                                                                                                                                     ║
║   #22a0                                                                                                                                                                                                  ║
║   RAM Table at 2C5 - format -> 0A byte entries ( two 5 byte entries - one for on and one for off)                                                                                                        ║
║   #22a0                                                                                                                                                                                                  ║
║   High to Low transition side                                                                                                                                                                            ║
║   #22a0                                                                                                                                                                                                  ║
║   offset 0 - link field or FF if not in use (index of another 2C5 entry)                                                                                                                                 ║
║   #22a0                                                                                                                                                                                                  ║
║   offset 1 - saves zero here to stop? (2C61) index of corresponding 2284 entry                                                                                                                           ║
║   #22a0                                                                                                                                                                                                  ║
║   offset 2,3,4 - 24 bit IO time for HSO event                                                                                                                                                            ║
║   #22a0                                                                                                                                                                                                  ║
║   Low to High transition side                                                                                                                                                                            ║
║   #22a0                                                                                                                                                                                                  ║
║   offset 5 - link field index to another 2C5 entry                                                                                                                                                       ║
║   #22a0                                                                                                                                                                                                  ║
║   offset 6 - index to corresponding 2284 Table                                                                                                                                                           ║
║   #22a0                                                                                                                                                                                                  ║
║   offset 7,8,9 - time                                                                                                                                                                                    ║
║   2C5 = 3 (->2c8) to start chain ?                                                                                                                                                                       ║
║   2C6 @2C6 Saved stack pointer - alternate stack used for interrupts and some tests                                                                                                                      ║
║   2C8 @2C8 First HSO queue entry - SPOUT  FF if inactive                                                                                                                                                 ║
║   2C9 @2c9                                                                                                                                                                                               ║
║   2CA @2ca                                                                                                                                                                                               ║
║   2CB @2CB                                                                                                                                                                                               ║
║   2CE @2CE Last PIP time (24 Bit)                                                                                                                                                                        ║
║   2D0 @2D0                                                                                                                                                                                               ║
║   #                                                                                                                                                                                                      ║
║   2D1 @2D1 24 bit time  ( FROM L27EB, cylinder offset 0)                                                                                                                                                 ║
║   2D2 @2D2                                                                                                                                                                                               ║
║   2D4 @2D4 (offset 0F) cylinder 1 HSO ch 6                                                                                                                                                               ║
║   2D5 @2D5 byte offset into 2C5 ?                                                                                                                                                                        ║
║   2D6 @2D6 byte offset into 2284 Table?                                                                                                                                                                  ║
║   2D7-2D9  HSO execution time for this channel                                                                                                                                                           ║
║   2D9 @2D9 (offset 14) +5                                                                                                                                                                                ║
║   2D9 @2D9 offset link                                                                                                                                                                                   ║
║   2DA @2DA offset into 2284 Table 5C[R74]                                                                                                                                                                ║
║   2DB                                                                                                                                                                                                    ║
║   2DC                                                                                                                                                                                                    ║
║   #                                                                                                                                                                                                      ║
║   2DD @2DD time hi 8 FROM L27EB (cylinder offset 1)                                                                                                                                                      ║
║   2DE @2DE time lo 16 FROM L27EB  THIS "LINK"24a7 TREATS THIS AS AN OFFSET 1 LINK ?                                                                                                                      ║
║   #1                                                                                                                                                                                                     ║
║   32F3 @32F3 treats this as lsb of 24bit time                                                                                                                                                            ║
║   #1                                                                                                                                                                                                     ║
║   27FE @27FE store ~PIP time in here                                                                                                                                                                     ║
║   #1                                                                                                                                                                                                     ║
║   249B @249B 6 Runs to hang                                                                                                                                                                              ║
║   2DF                                                                                                                                                                                                    ║
║   2E0 @2E0 cylinder 2 HSO 7                                                                                                                                                                              ║
║   2e6 @2e6                                                                                                                                                                                               ║
║   2e7 @2e7                                                                                                                                                                                               ║
║   2EA @2EA cylinder 3 HSO 0                                                                                                                                                                              ║
║   2f0 @2f0                                                                                                                                                                                               ║
║   2f1 @2f1                                                                                                                                                                                               ║
║   2F4 @2F4 cylinder 4 HSO 1                                                                                                                                                                              ║
║   2fb @2fb                                                                                                                                                                                               ║
║   2FE @2FE cylinder 5 HSO 4                                                                                                                                                                              ║
║   305 @305                                                                                                                                                                                               ║
║   208 @308 cylinder 6 HSO 2                                                                                                                                                                              ║
║   309 @309 offset into 2284 Table                                                                                                                                                                        ║
║   30f @30f                                                                                                                                                                                               ║
║   312 @312 cylinder 7 HSO 3                                                                                                                                                                              ║
║   319 @319                                                                                                                                                                                               ║
║   31C @31C cylinder 8 HSO 8                                                                                                                                                                              ║
║   322 @322 9TH - KTS ?                                                                                                                                                                                   ║
║   323 @323                                                                                                                                                                                               ║
║   324 @324                                                                                                                                                                                               ║
║   325 @325                                                                                                                                                                                               ║
║   326 @326                                                                                                                                                                                               ║
║   #                                                                                                                                                                                                      ║
║   #                                                                                                                                                                                                      ║
║   328 @328                                                                                                                                                                                               ║
║   32a @32a                                                                                                                                                                                               ║
║   32c @32c                                                                                                                                                                                               ║
║   32e @32e                                                                                                                                                                                               ║
║   33a @33a Signature PIP half period multiplier - initial values = 1.66666 for 30%, 1.42857 for 35% duty cycle                                                                                           ║
║   33a @33a Signature PIP ratio / multiplier - for narrow slot (cyl 1)                                                                                                                                    ║
║   342 @342 base of Hard Trouble Code Error Table                                                                                                                                                         ║
║   3A8 @3A8 timer?                                                                                                                                                                                        ║
║   3AA @3AA timer?                                                                                                                                                                                        ║
║   3b4 @3b4 8 values for time slice SPOUT (0.6ms ?)                                                                                                                                                       ║
║   3bc @3bc                                                                                                                                                                                               ║
║   3bd @3bd                                                                                                                                                                                               ║
║   3be @3be                                                                                                                                                                                               ║
║   3c0 @3c0                                                                                                                                                                                               ║
║   3c2 @3c2                                                                                                                                                                                               ║
║       End of RAM variables ?                                                                                                                                                                             ║
║   1                                                                                                                                                                                                      ║
║   3E4 @3E4 MAF in Kg/Hr units                                                                                                                                                                            ║
║   PWM Tables                                                                                                                                                                                             ║
║   1                                                                                                                                                                                                      ║
║   hang debug: 2D4,2EA,312,2E0,308, *hangs*                                                                                                                                                               ║
║   7B4 @7B4 KAMRF1( )[divide by 256]                                                                                                                                                                      ║
║   7B6 @7B6 Adaptive fuel strategy correction for bank1 - larger values ADD fuel                                                                                                                          ║
║   7EE @7EE filtered EVP saved in KAM                                                                                                                                                                     ║
║                           Analog Inputs:                                                                                                                                                                 ║
║   28A7 @ and 2D29  MAF - reads AD h/w at saves to 124 = A4[R72]                                                                                                                                          ║
║   2DC7 @ calibrate for voltage? at in var D0[R74] = 2E4                                                                                                                                                  ║
║   ACT - Air Charge Temperature - raw counts? MSB in 115, degrees Farenheit in RB1                                                                                                                        ║
║   Important functions:                                                                                                                                                                                   ║
║   384E @384E reads raw AD values and updates values                                                                                                                                                      ║
║   68FE @68FE timers - incr/decr Table of timer pointers                                                                                                                                                  ║
║   7BAE @7BAE trouble code (BrkPt at 7BB8 and look at R1A)                                                                                                                                                ║
║   827D @827D 8061 CPU and RAM test routines                                                                                                                                                              ║
║   8434 @8434 change mode resets IO and starts run mode? (self test to run? )                                                                                                                             ║
║   Important addresses:                                                                                                                                                                                   ║
║   786B @786B set to zero to skip ROM checksum                                                                                                                                                            ║
║   780D @780D Key On Engine Off (KOEO) Self -Tests                                                                                                                                                        ║
║   57FC @57FC code section to retard timing if overspeed (via VSS)                                                                                                                                        ║
║   980D @980d table (mph).                                                                                                                                                                                ║
║                                                                                                                                                                                                          ║
║                                                                                                                                                                                                          ║
║                                                                                                                                                                                                          ║
╚══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
╔══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
║                                                                                                                      ║
║                                                        Bank 8                                                        ║
║                                                                                                                      ║
║                      00000   07fff                                                  2000    9fff                     ║
║                                                                                                                      ║
╚══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝


Bnk8Start - Bank 8 Start:
8 2000: ff                   ff                                            
8 2001: fa                   di                       disable ints;        
8 2002: 21,45                sjmp  2149               goto Initialise;     


//  FIXSUM to get to zero sum                                                         //
8 2004: 00,00                                         Unknown Operation/Structure


8 2006: ff,df                dfff  ROMSIZE            Bank Rom Size (ffff is not defined)

8 2008: 00,ff                                         fill

//  Checksum Fix                                                                      //
8 200a: de,ec                ecde  CHECKSUM           Checksum

//  End of ROM ?                                                                      //
8 200c: 00,a0                a000  SMPBASEADR         Smp Base Address

//  I/O times between console executions (->84c2)                                     //
8 200e: 5d,00                  5d  CCEXETIME          Cc Exe Time

//  HSO Port Output 2                                                                 //
8 2010: 51,27                2751  IPT_HSO_2          Interrupt High Speed Output 2
//  I/O Timer Overflow                                                                //
8 2012: 3d,27                273d  IPT_Timer_OVF      Interrupt Timer OVF
//  A/D End of Conversion                                                             //
8 2014: 50,27                2750  IPT_HSI_0          Interrupt High Speed Input 0
//  HSI Port Input Data Available                                                     //
8 2016: 50,27                2750  IPT_HSI_0          Interrupt High Speed Input 0
//  External Interrupt Vector                                                         //
8 2018: 50,27                2750  IPT_HSI_0          Interrupt High Speed Input 0
//  HSO Port Output  1                                                                //
8 201a: b9,25                25b9  IPT_HSO_1          Interrupt High Speed Output 1
//  HSI 1 Interrupt Vector                                                            //
8 201c: 50,27                2750  IPT_HSI_0          Interrupt High Speed Input 0
//  HSI 0 Interrupt Vector                                                            //
8 201e: 2b,27                272b  IPT_HSI_0          Interrupt High Speed Input 0

//  no of regs                                                                        //
8 2020: 08                      8  LEVNUM             Levels Number

8 2021: 01                      1  CALNUM             Calibs Number

//  Rf0                                                                               //
8 2022: 00,8c                8c00  RBASEADR_01        Rbase Rf0
8 2024: 5a,8e                8e5a  RBASEADR_02        Rbase Rf2
8 2026: d6,8f                8fd6  RBASEADR_03        Rbase Rf4
8 2028: a8,93                93a8  RBASEADR_04        Rbase Rf6
8 202a: 30,94                9430  RBASEADR_05        Rbase Rf8
8 202c: a8,97                97a8  RBASEADR_06        Rbase Rfa
8 202e: 7e,9a                9a7e  RBASEADR_07        Rbase Rfc
//  Rfe                                                                               //
8 2030: 5a,9e                9e5a  RBASEADR_08        Rbase Rfe


Reset_All:
8 2032: fa                   di                       disable ints;        
8 2033: ff                   ff                                            
//  stop interrupts                                                                   //
8 2034: 11,0c                clrb  R0c                HSI_MASK = 0;        
//  save VIP mode                                                                     //
8 2036: b0,2a,12             ldb   R12,R2a            [Tmr_OVF_cnt] = [VIP_flags];
8 2039: a1,16,00,14          ldw   R14,16             R14 = 16;            
8 203d: c6,15,00             stb   [R14++],0          [R14++] = 0;         
8 2040: 17,05                incb  R05                WD_TIMER++;          
8 2042: 89,8a,04,14          cmpw  R14,48a                                 
8 2046: d3,f5                jnc   203d               if ((uns) R14 < 48a) goto 203d;
8 2048: 51,60,12,14          an3b  R14,R12,60         R14 = [Tmr_OVF_cnt] & 60;
8 204c: d7,05                jne   2053               if (R14 != 0) goto 2053;
8 204e: 91,01,ef             orrb  Ref,1              [Flags_ef] |= 1;     
8 2051: 20,03                sjmp  2056               goto 2056;           

2053 - Sub 8 2053:
8 2053: c4,2a,12             stb   R2a,R12            [VIP_flags] = [Tmr_OVF_cnt];
8 2056: 01,12                clrw  R12                [Tmr_OVF_cnt] = 0;   
8 2058: a1,80,01,72          ldw   R72,180            RRp = 180;           
//  R72,R74,R76 RAM base ptrs                                                         //
8 205c: a1,7e,02,74          ldw   R74,27e            [Rp2] = 27e;         
8 2060: a1,7a,03,76          ldw   R76,37a            [Rp3] = 37a;         
8 2064: a1,2a,86,14          ldw   R14,862a           R14 = ScScSadDir023; 

2068 - Sub 8 2068:
8 2068: 89,ff,ff,14          cmpw  R14,ffff                                
//  -1 = list processing done                                                         //
8 206c: df,20                je    208e               if (R14 == ffff) goto 208e;
//  'Base' address, in top byte (R1b)                                                 //
8 206e: a2,15,1a             ldw   R1a,[R14++]        R1a = [R14++];       
//  end of list (address of next list)                                                //
8 2071: a2,15,16             ldw   R16,[R14++]        R16 = [R14++];       
8 2074: 88,16,14             cmpw  R14,R16                                 
8 2077: db,0e                jc    2087               if ((uns) R14 >= R16) goto 2087;
//  get low byte of addr to init                                                      //
8 2079: b2,15,1a             ldb   R1a,[R14++]        R1a = [R14++];       
//  get current contents                                                              //
8 207c: b2,1a,1c             ldb   R1c,[R1a]          R1c = [R1a];         
//  OR byte from list                                                                 //
8 207f: 92,15,1c             orrb  R1c,[R14++]        R1c |= [R14++];      
//  save new value                                                                    //
8 2082: c6,1a,1c             stb   [R1a],R1c          [R1a] = R1c;         
8 2085: 27,ed                sjmp  2074               goto 2074;           

2087 - Sub 8 2087:
8 2087: d9,a9                jgtu  2032               if ((uns) R14 > R16) goto Reset_All;
//  Address of next list                                                              //
8 2089: a2,16,14             ldw   R14,[R16]          R14 = [R16];         
8 208c: 27,da                sjmp  2068               goto 2068;           

208e - Sub 8 208e:
8 208e: 91,10,24             orrb  R24,10             [Flags_24] |= 10;    
//  Init console if found                                                             //
8 2091: ef,1e,64             call  84b2               Check_console();     
//  verify KAM Table 1 (702-7AF)                                                      //
8 2094: ef,0c,65             call  85a3               Check_Kam_1();       
//  verify KAM Table 2 (7E4-7EC)                                                      //
8 2097: ef,5b,65             call  85f5               Check_Kam_2();       
//  engine load (VE)                                                                  //
8 209a: a3,74,de,42          ldw   R42,[R74+de]       R42 = [Load];        
//  Averaged Load                                                                     //
8 209e: c3,74,9e,42          stw   [R74+9e],R42       [Aeload] = R42;      
8 20a2: 45,e2,01,f0,42       ad3w  R42,Rf0,1e2        R42 = Maf_tfr;       
//  Save ptr to MAF tfr func                                                          //
8 20a7: c3,76,b4,42          stw   [R76+b4],R42       [Maf_ptr] = R42;     
8 20ab: a3,f0,02,42          ldw   R42,[Rf0+2]        R42 = [Sc0002];      
//  filtered TP to start value                                                        //
8 20af: c3,72,80,42          stw   [R72+80],R42       [TP_Filt] = R42;     
8 20b3: b3,fc,53,b3          ldb   Rb3,[Rfc+53]       [Ppctr] = [Pipnum];  
//  EGR Type (0=sonic, 1=PFE, 2=none)                                                 //
8 20b7: b3,fa,31,42          ldb   R42,[Rfa+31]       R42 = [Egr_type];    
8 20bb: 30,42,03             jnb   B0,R42,20c1        if (!B0_R42) goto 20c1;
//  PFE EGR is present                                                                //
8 20be: 91,40,e6             orrb  Re6,40             [Flags_e6] |= 40;    

20c1 - Sub 8 20c1:
8 20c1: a1,db,b6,42          ldw   R42,b6db           R42 = b6db;          
//  = 8 (PIPs per cycle)                                                              //
8 20c5: b3,fe,07,30          ldb   R30,[Rfe+7]        R30 = [PIPsC];       
8 20c9: 3b,30,04             jb    B3,R30,20d0        if (B3_R30) goto 20d0;
//  = 1.666 for 6 and 4 cyl                                                           //
8 20cc: a1,55,d5,42          ldw   R42,d555           R42 = d555;          

20d0 - Sub 8 20d0:
8 20d0: c3,76,c0,42          stw   [R76+c0],R42       [Sigkal] = R42;      
//  get EVP from KAM                                                                  //
8 20d4: a3,01,ee,07,30       ldw   R30,[7ee]          R30 = [KEptzer];     
8 20d9: 8b,f3,38,01,30       cmpw  R30,[Rf2+138]                           
8 20de: d1,07                jleu  20e7               if ((uns) R30 <= [Veptll]) goto 20e7;
8 20e0: 8b,f3,3a,01,30       cmpw  R30,[Rf2+13a]                           
8 20e5: d3,09                jnc   20f0               if ((uns) R30 < [Vepthl]) goto 20f0;

20e7 - Sub 8 20e7:
8 20e7: a1,80,a2,30          ldw   R30,a280           R30 = a280;          
//  filtered EVP saved in KAM                                                         //
8 20eb: c3,01,ee,07,30       stw   [7ee],R30          [KEptzer] = R30;     
8 20f0: 11,09                clrb  R09                INT_PEND = 0;        
8 20f2: 32,0a,06             jnb   B2,R0a,20fb        if (!B2_HSO_OVF) goto 20fb;
//  Clear any pending HSI input data                                                  //
8 20f5: b0,0d,00             ldb   0,R0d              0 = HSI_DATA;        
8 20f8: ff                   ff                                            
8 20f9: 27,f7                sjmp  20f2               goto 20f2;           

8 20fb: b0,0b,90             ldb   R90,R0b            [Last_HSI] = HSI_SAMP;
//  HSI0, HSO 1, HSO 2                                                                //
8 20fe: b1,a1,08             ldb   R08,a1             INT_MASK = a1;       
//  HSI line select                                                                   //
8 2101: b1,87,0c             ldb   R0c,87             HSI_MASK = 87;       
8 2104: 9b,f8,4a,00          cmpb  0,[Rf8+4a]                              
8 2108: d7,03                jne   210d               if (0 != [Kihp]) goto 210d;
//  Drop chan 1 - No knock sensor                                                     //
8 210a: b1,85,0c             ldb   R0c,85             HSI_MASK = 85;       
8 210d: 9b,fe,0c,00          cmpb  0,[Rfe+c]                               
8 2111: df,03                je    2116               if (0 == [Hpcid]) goto 2116;
//  Add chan 5 - CID sensor                                                           //
8 2113: 91,20,0c             orrb  R0c,20             HSI_MASK |= 20;      
8 2116: 9b,f2,47,00          cmpb  0,[Rf2+47]                              
8 211a: df,03                je    211f               if (0 == [Vstype]) goto 211f;
//  Add chan 6 - VSS sensor                                                           //
8 211c: 91,40,0c             orrb  R0c,40             HSI_MASK |= 40;      
8 211f: 45,03,00,06,0e       ad3w  R0e,R06,3          HSO_TIME = IO_TIMER + 3;
//  Software Interrupt (ch 10) in 3 state times                                       //
8 2124: b1,2a,0d             ldb   R0d,2a             HSO_CMD = 2a;        
8 2127: 9b,f8,1a,00          cmpb  0,[Rf8+1a]                              
8 212b: df,0a                je    2137               if (0 == [Tfi_dwell]) goto 2137;
//  not TFI controlled dwell, do SPOUT ?                                              //
8 212d: a1,96,22,92          ldw   R92,2296           [TPtr] = OSt8_004;   
//  address in data Table - SPOUT(channel 5)?                                         //
8 2131: 91,08,4c             orrb  R4c,8              [Flags_4C] |= 8;     
8 2134: ef,86,02             call  23bd               Send_HSO_Cmd();      
8 2137: 9b,f8,19,00          cmpb  0,[Rf8+19]                              
8 213b: df,0a                je    2147               if (0 == [Hphidres]) goto 2147;
//  High Data Rate Electronic Spark H/W                                               //
8 213d: a1,9e,22,92          ldw   R92,229e           [TPtr] = OSt8_006;   
//  address in data Table - SPOUT(channel 5)?                                         //
8 2141: 91,08,4c             orrb  R4c,8              [Flags_4C] |= 8;     
8 2144: ef,76,02             call  23bd               Send_HSO_Cmd();      
8 2147: fb                   ei                       enable ints;         
8 2148: f0                   ret                      return;              

Initialise:
8 2149: 11,2a                clrb  R2a                [VIP_flags] = 0;     
//  set stack pointer                                                                 //
8 214b: a1,8c,04,10          ldw   R10,48c            STACK = 48c;         
8 214f: 2e,e1                scall 2032               Reset_All();         

Backg_loop:
8 2151: 99,a4,9a             cmpb  R9a,a4                                  
//  goto loopstop (DEAD) if too big                                                   //
8 2154: db,1c                jc    2172               if ((uns) [Bg_point] >= a4) goto 2172;
//  routine num                                                                       //
8 2156: ac,9a,30             ldzbw R30,R9a            R30 = (uns)[Bg_point];
//  address of subroutine from list                                                   //
8 2159: 65,8a,21,30          ad2w  R30,218a           R30 += VecLst8_001;  
//  push return address                                                               //
8 215d: c9,51,21             push  2151               push(Backg_loop);    
//  push subroutine address to stack                                                  //
8 2160: ca,30                push  [R30]              push([R30]);         
8 2162: a1,80,01,72          ldw   R72,180            RRp = 180;           
8 2166: a1,7e,02,74          ldw   R74,27e            [Rp2] = 27e;         
//  Reset RAM pointers every time through                                             //
8 216a: a1,7a,03,76          ldw   R76,37a            [Rp3] = 37a;         
//  next subroutine                                                                   //
8 216e: 75,02,9a             ad2b  R9a,2              [Bg_point] += 2;     
//  execute routine                                                                   //
8 2171: f0                   ret                      return;              

2172 - Sub 8 2172:
8 2172: 27,fe                sjmp  2172               goto 2172;           

Set_Tasklist:
8 2174: 3e,2a,03             jb    B6,R2a,217a        if (B6_[VIP_flags]) goto 217a;
//  Vehicle Speed Control Self Test ?                                                 //
8 2177: 31,2a,04             jnb   B1,R2a,217e        if (!B1_[VIP_flags]) goto 217e;

217a - Sub 8 217a:
8 217a: b1,52,9a             ldb   R9a,52             [Bg_point] = 52;     
8 217d: f0                   ret                      return;              

8 217e: 35,2a,04             jnb   B5,R2a,2185        if (!B5_[VIP_flags]) goto 2185;
//  set List C                                                                        //
8 2181: b1,74,9a             ldb   R9a,74             [Bg_point] = 74;     
8 2184: f0                   ret                      return;              

2185 - Sub 8 2185:
8 2185: b1,00,9a             ldb   R9a,0              [Bg_point] = 0;      
8 2188: f0                   ret                      return;              


8 2189: ff                                            Unknown Operation/Structure



VecLst8_001 - Vectors List 8 001:
8 218a: b1,84                84b1  Bank 8 Vector      Check_ConsoleD
//  Validate/initialise KAM                                                           //
8 218c: 5d,23                235d  Bank 8 Vector      check_KAM
//  Update Dwell                                                                      //
8 218e: 52,58                5852  Bank 8 Vector      Update_dwell
//  Set RPM Flags                                                                     //
8 2190: 86,37                3786  Bank 8 Vector      set_rpm_flgs
//  Read AD channels                                                                  //
8 2192: 2e,22                222e  Bank 8 Vector      Read_AD
//  Read/update raw AD vals                                                           //
8 2194: 4e,38                384e  Bank 8 Vector      Update_AD
//  Update WOT flag                                                                   //
8 2196: f3,37                37f3  Bank 8 Vector      Update_WOT
8 2198: f4,4e                4ef4  Bank 8 Vector      Do_accelpump
//  Update heated windshield flag                                                     //
8 219a: 5a,3d                3d5a  Bank 8 Vector      Update_HWND
//  Update (MPH) vehicle speed values                                                 //
8 219c: e4,3c                3ce4  Bank 8 Vector      Update_MPH
//  Update RPM?                                                                       //
8 219e: ac,3d                3dac  Bank 8 Vector      Update_rpm
//  Update A/C cutout and idle flags                                                  //
8 21a0: dd,63                63dd  Bank 8 Vector      Update_AC
8 21a2: d4,65                65d4  Bank 8 Vector      Set_Timers
//  Update Timers                                                                     //
8 21a4: fe,68                68fe  Bank 8 Vector      Update_timers
8 21a6: 8f,84                848f  Bank 8 Vector      Set_ign_timers
//  Update fuel comsumption for DOL                                                   //
8 21a8: ca,4c                4cca  Bank 8 Vector      Update_flDOL
8 21aa: 7c,3e                3e7c  Bank 8 Vector      Load_Calc
//  EVP something                                                                     //
8 21ac: 30,85                8530  Bank 8 Vector      Evp_?
//  Update EGR stuff?                                                                 //
8 21ae: ba,40                40ba  Bank 8 Vector      Update_Egr
//  Check for RPM and Speed limiters                                                  //
8 21b0: 41,41                4141  Bank 8 Vector      Check_spd_lim
//  Update closed loop flags                                                          //
8 21b2: a1,41                41a1  Bank 8 Vector      Update_clolp
//  Adaptive something                                                                //
8 21b4: 00,47                4700  Bank 8 Vector      Adapt?
8 21b6: d7,4a                4ad7  Bank 8 Vector      Calc_Fuel
//  Update fuel pump enable                                                           //
8 21b8: ee,50                50ee  Bank 8 Vector      Update_fpump
//  EVP something - large function                                                    //
8 21ba: 36,51                5136  Bank 8 Vector      Calc_EVP
//  EGR stuff                                                                         //
8 21bc: d9,54                54d9  Bank 8 Vector      Calc_EGR
//  Update spark advance                                                              //
8 21be: c3,55                55c3  Bank 8 Vector      Update_advance
8 21c0: 17,6d                6d17  Bank 8 Vector      UPd_KnkRet
//  Update ect cooling fans                                                           //
8 21c2: 8c,64                648c  Bank 8 Vector      Update_fans
8 21c4: 91,61                6191  Bank 8 Vector      Upd_air_mgt
8 21c6: b5,62                62b5  Bank 8 Vector      Upd_HiFan
//  Update Canister Purge timing                                                      //
8 21c8: 35,63                6335  Bank 8 Vector      Upd_canpTm
8 21ca: 66,65                6566  Bank 8 Vector      Upd_Thermactor1
//  Update idle speed                                                                 //
8 21cc: b0,58                58b0  Bank 8 Vector      Update_Idle
//  SCCS stuff checks VBAT                                                            //
8 21ce: c4,5e                5ec4  Bank 8 Vector      Upd_VSC
//  Update shift light                                                                //
8 21d0: 7b,6a                6a7b  Bank 8 Vector      Upd_ShiftL
8 21d2: dd,6a                6add  Bank 8 Vector      Upd_Thermactor
//  Update Air Management                                                             //
8 21d4: a1,65                65a1  Bank 8 Vector      Upd_Air_mgmnt
8 21d6: 2e,73                732e  Bank 8 Vector      Chk_Sensors
//  diagnostic Self Tests                                                             //
8 21d8: 49,6e                6e49  Bank 8 Vector      Do_SelfTest
//  recheck list A                                                                    //
8 21da: 74,21                2174  Bank 8 Vector      Set_Tasklist
//  check console, init RF0 regs                                                      //
8 21dc: b1,84                84b1  Bank 8 Vector      Check_ConsoleD
//  Set RPM Flags                                                                     //
8 21de: 86,37                3786  Bank 8 Vector      set_rpm_flgs
//  Read AD channels to Table                                                         //
8 21e0: 2e,22                222e  Bank 8 Vector      Read_AD
//  Read/update raw AD vals                                                           //
8 21e2: 4e,38                384e  Bank 8 Vector      Update_AD
//  Update vehicle speed vals                                                         //
8 21e4: e4,3c                3ce4  Bank 8 Vector      Update_MPH
//  Update RPM                                                                        //
8 21e6: ac,3d                3dac  Bank 8 Vector      Update_rpm
8 21e8: d4,65                65d4  Bank 8 Vector      Set_Timers
//  Update Timers                                                                     //
8 21ea: fe,68                68fe  Bank 8 Vector      Update_timers
8 21ec: 8f,84                848f  Bank 8 Vector      Set_ign_timers
//  Update EGR stuff?                                                                 //
8 21ee: ba,40                40ba  Bank 8 Vector      Update_Egr
8 21f0: d7,4a                4ad7  Bank 8 Vector      Calc_Fuel
//  Update fuel pump enable                                                           //
8 21f2: ee,50                50ee  Bank 8 Vector      Update_fpump
//  Update Vehicle Speed Control                                                      //
8 21f4: e7,5e                5ee7  Bank 8 Vector      Upd_SCCS
//  Diagnostic Self Tests                                                             //
8 21f6: 49,6e                6e49  Bank 8 Vector      Do_SelfTest
//  Update EGR stuff                                                                  //
8 21f8: 87,55                5587  Bank 8 Vector      Update_EGR2
//  Update Canister Purge                                                             //
8 21fa: ca,63                63ca  Bank 8 Vector      Upd_canP
//  Recheck list B                                                                    //
8 21fc: 74,21                2174  Bank 8 Vector      Set_Tasklist
//  Check console, init RF0 regs                                                      //
8 21fe: b1,84                84b1  Bank 8 Vector      Check_ConsoleD
//  Read AD channels                                                                  //
8 2200: 2e,22                222e  Bank 8 Vector      Read_AD
//  Read/update raw AD vals                                                           //
8 2202: 4e,38                384e  Bank 8 Vector      Update_AD
//  Update WOT flag                                                                   //
8 2204: f3,37                37f3  Bank 8 Vector      Update_WOT
//  Update vehicle speed values                                                       //
8 2206: e4,3c                3ce4  Bank 8 Vector      Update_MPH
//  Update Dwell                                                                      //
8 2208: 52,58                5852  Bank 8 Vector      Update_dwell
//  Update RPM                                                                        //
8 220a: ac,3d                3dac  Bank 8 Vector      Update_rpm
8 220c: d4,65                65d4  Bank 8 Vector      Set_Timers
//  Update Timers                                                                     //
8 220e: fe,68                68fe  Bank 8 Vector      Update_timers
8 2210: 8f,84                848f  Bank 8 Vector      Set_ign_timers
//  Update fuel comsumption for DOL                                                   //
8 2212: ca,4c                4cca  Bank 8 Vector      Update_flDOL
8 2214: 7c,3e                3e7c  Bank 8 Vector      Load_Calc
//  Update EGR stuff?                                                                 //
8 2216: ba,40                40ba  Bank 8 Vector      Update_Egr
//  Something Injection ?                                                             //
8 2218: 5b,4b                4b5b  Bank 8 Vector      Sub0275
8 221a: f4,4e                4ef4  Bank 8 Vector      Do_accelpump
//  Update fuel pump enable                                                           //
8 221c: ee,50                50ee  Bank 8 Vector      Update_fpump
//  Ccheck idle speed?                                                                //
8 221e: b0,58                58b0  Bank 8 Vector      Update_Idle
//  SCCS stuff checks VBAT                                                            //
8 2220: c4,5e                5ec4  Bank 8 Vector      Upd_VSC
//  Check HEGO sensors                                                                //
8 2222: 3f,82                823f  Bank 8 Vector      CHk_HEGO
//  Check brake and PS flags                                                          //
8 2224: 28,82                8228  Bank 8 Vector      Sub0598
//  Ddiagnostic Self Tests                                                            //
8 2226: 49,6e                6e49  Bank 8 Vector      Do_SelfTest
//  Update EGR stuff                                                                  //
8 2228: 87,55                5587  Bank 8 Vector      Update_EGR2
//  Update Canister Purge                                                             //
8 222a: ca,63                63ca  Bank 8 Vector      Upd_canP
//  List C (rechecks List)                                                            //
8 222c: 74,21                2174  Bank 8 Vector      Set_Tasklist


Read_AD:
8 222e: a1,5f,22,30          ldw   R30,225f           R30 = OSt8_002;      
8 2232: fb                   ei                       enable ints;         
//  get, and set, AD channel reqd                                                     //
8 2233: 56,30,00,04          ad3b  R04,0,[R30]        AD_CMD = 0 + [R30];  
//  exit if no more channels                                                          //
8 2237: de,22                jlt   225b               if ((sig) AD_LO < 0) goto 225b;

2239 - Sub 8 2239:
8 2239: 33,0a,fd             jnb   B3,R0a,2239        if (!B3_HSO_OVF) goto 2239;
8 223c: fa                   di                       disable ints;        
8 223d: ff                   ff                                            
//  get channel returned                                                              //
8 223e: 51,0f,04,34          an3b  R34,R04,f          R34 = AD_LO & f;     
//  check correct channel                                                             //
8 2242: 9a,30,34             cmpb  R34,[R30]                               
//  No, try read again                                                                //
8 2245: d7,eb                jne   2232               if (R34 != [R30]) goto 2232;
//  AD Low value                                                                      //
8 2247: 51,f0,04,34          an3b  R34,R04,f0         R34 = AD_LO & f0;    
//  AD High value                                                                     //
8 224b: b0,05,35             ldb   R35,R05            R35 = AD_HI;         
//  incr ptr to save address                                                          //
8 224e: 07,30                incw  R30                R30++;               
8 2250: b2,31,32             ldb   R32,[R30++]        R32 = [R30++];       
//  get destination address (hi+lo)                                                   //
8 2253: b2,31,33             ldb   R33,[R30++]        R33 = [R30++];       
//  save AD value to destination.                                                     //
8 2256: c2,32,34             stw   [R32],R34          [R32] = R34;         
//  next AD                                                                           //
8 2259: 27,d7                sjmp  2232               goto 2232;           

8 225b: 91,40,29             orrb  R29,40             [Flags_29] |= 40;    
8 225e: f0                   ret                      return;              


OSt8_002 - Other Structure 8 002:
8 225f: 00,20,01      ostruct    0,  Reg 120
//  Voltage Calibration Level                                                         //
8 2262: 01,10,01      ostruct    1,  Reg 110
//  Voltage level (->793d)                                                            //
8 2265: 02,0c,01      ostruct    2,  Reg 10c
//  Open Circuit Check                                                                //
8 2268: 03,0e,01      ostruct    3,  Reg 10e
//  Speed control system                                                              //
8 226b: 04,18,01      ostruct    4,  Reg 118
//  Exhaust Gas Oxygen sensor 2                                                       //
8 226e: 05,1e,01      ostruct    5,  Reg 11e
//  Throttle position sensor (->794d)                                                 //
8 2271: 07,22,01      ostruct    7,  Reg 122
//  Engine Coolant Temperature                                                        //
8 2274: 08,12,01      ostruct    8,  Reg 112
//  Air charge temperature                                                            //
8 2277: 09,14,01      ostruct    9,  Reg 114
//  Auto shift posn (neutral/drive) NDS                                               //
8 227a: 0a,1a,01      ostruct   10,  Reg 11a
//  Exhaust Gas Oxygen sensor 1                                                       //
8 227d: 0b,1c,01      ostruct   11,  Reg 11c
//  EGR Valve position                                                                //
8 2280: 0c,16,01      ostruct   12,  Reg 116
//  end of Table                                                                      //
8 2283: ff            ostruct   ff,  EXIT



HSOTable:
//                                                                                    //
//  Table used for High Speed Output (HSO).  Called from several places               //
//  8 byte entries are -                                                              //
//  Offset  Description                                                               //
//  0,1  Subroutine call address                                                      //
//  3  HSO command to send, plus bits 6&7                                             //
//     B6 = 1 Don't keep o/p state in $44                                             //
//     B7 = 1 Do extra subroutine at [ptr+6] if set (only in $250d)                   //
//  4  Max count of Queued HSO events (hardware is 12 max) skip if higher             //
//  5  Offset for this entry into RAM table at 2C5                                    //
//  6,7  Subroutine call address                                                      //
//  commands entries are therefore                                                    //
//  2286  ch 9 (KTS)    ON, no int, don't keep state, call $24f9  ? don't call $6d11  //
//  228e  ch 9 (KTS)   OFF, int  , no ON, clear bit 9  call $250d then calls $6cd8    //
//  2296  ch 5 (SPOUT)  ON, no int, don't keep state, call $24f9  ? don't call $2c88  //
//  229e  ch 5 (SPOUT) OFF, int  , no ON, clear bit 5  call $250d then calls $2c61    //
//                                                                                    //
8 2284: 58,23                2358  Bank 8 Vector      Clr_cell


OSt8_003 - Other Structure 8 003:
8 2286: f9      ostruct   f9


8 2287: 24,00,59,0b,5d,11,6d,0d                       Unknown Operation/Structure
8 228f: 25,00,c9,0b,5d,d8,6c                          Unknown Operation/Structure


OSt8_004 - Other Structure 8 004:
8 2296: f9      ostruct   f9


8 2297: 24,00,55,0c,03                                Unknown Operation/Structure


OSt8_005 - Other Structure 8 005:
8 229c: 88,2c      ostruct   2c88

OSt8_006 - Other Structure 8 006:
8 229e: 0d      ostruct   d


8 229f: 25,00,c5,0c,03,61,2c                          Unknown Operation/Structure


InjTTab:
8 22a6: 5a,32      ostruct   325a


8 22a8: 00,16,0a,0f,01,fe,01,00                       Unknown Operation/Structure
8 22b0: 40,00,73,32,00,06,0c,0f                       Unknown Operation/Structure
8 22b8: 01,fe,01,00,5a,32,00,17                       Unknown Operation/Structure
8 22c0: 0a,1b,02,fd,02,00,80,00                       Unknown Operation/Structure
8 22c8: 73,32,00,07,0c,1b,02,fd                       Unknown Operation/Structure
8 22d0: 02,00,5a,32,00,10,0a,25                       Unknown Operation/Structure
8 22d8: 04,fb,03,00,01,00,73,32                       Unknown Operation/Structure
8 22e0: 00,00,0c,25,04,fb,03,00                       Unknown Operation/Structure
8 22e8: 5a,32,00,11,0a,2f,08,f7                       Unknown Operation/Structure
8 22f0: 04,00,02,00,73,32,00,01                       Unknown Operation/Structure
8 22f8: 0c,2f,08,f7,04,00,5a,32                       Unknown Operation/Structure
8 2300: 00,14,0a,39,10,ef,05,00                       Unknown Operation/Structure
8 2308: 10,00,73,32,00,04,0c,39                       Unknown Operation/Structure
8 2310: 10,ef,05,00,5a,32,00,12                       Unknown Operation/Structure
8 2318: 0a,43,20,df,06,00,04,00                       Unknown Operation/Structure
8 2320: 73,32,00,02,0c,43,20,df                       Unknown Operation/Structure
8 2328: 06,00,5a,32,00,13,0a,4d                       Unknown Operation/Structure
8 2330: 40,bf,07,00,08,00,73,32                       Unknown Operation/Structure
8 2338: 00,03,0c,4d,40,bf,07,00                       Unknown Operation/Structure
8 2340: 5a,32,00,18,0a,57,80,7f                       Unknown Operation/Structure
8 2348: 08,00,00,01,73,32,00,08                       Unknown Operation/Structure
8 2350: 0c,57,80,7f,08,00,07,00                       Unknown Operation/Structure


Clr_cell:
8 2358: c7,7e,01,00          stb   [R7e+1],0          [[Rtab]+1] = 0;      
8 235c: f0                   ret                      return;              

check_KAM:
8 235d: a1,5a,07,22          ldw   R22,75a            R22 = 75a;           
8 2361: 71,7f,28             an2b  R28,7f             [Flags_28] &= 7f;    
//  to check KAM signature                                                            //
8 2364: b1,aa,42             ldb   R42,aa             R42 = aa;            
8 2367: b1,c6,30             ldb   R30,c6             R30 = c6;            
8 236a: b1,75,32             ldb   R32,75             R32 = 75;            
8 236d: 9b,22,a6,42          cmpb  R42,[R22+a6]                            
8 2371: d7,0f                jne   2382               if (R42 != [R22+Nrmces]) goto 2382;
8 2373: 9b,22,56,30          cmpb  R30,[R22+56]                            
8 2377: d7,09                jne   2382               if (R30 != [R22+56]) goto 2382;
8 2379: 9b,23,88,00,32       cmpb  R32,[R22+88]                            
8 237e: d7,02                jne   2382               if (R32 != [R22+88]) goto 2382;
//  KAM valid                                                                         //
8 2380: 20,3a                sjmp  23bc               goto 23bc;           

2382 - Sub 8 2382:
8 2382: 91,80,28             orrb  R28,80             [Flags_28] |= 80;    
//  700 = 0xAA                                                                        //
8 2385: c7,22,a6,42          stb   [R22+a6],R42       [R22+Nrmces] = R42;  
//  7b0 = 0xC6                                                                        //
8 2389: c7,22,56,30          stb   [R22+56],R30       [R22+56] = R30;      
//  7e2 = 0x75                                                                        //
8 238d: c7,23,88,00,32       stb   [R22+88],R32       [R22+88] = R32;      
8 2392: 91,40,d8             orrb  Rd8,40             [Vip_flags3] |= 40;  
8 2395: ef,08,54             call  77a0               clear_KAM();         
//  default EVP value                                                                 //
8 2398: a1,80,a2,38          ldw   R38,a280           R38 = a280;          
//  Rolling avg of EPT sensor at Idle (counts)                                        //
8 239c: c3,01,ee,07,38       stw   [7ee],R38          [KEptzer] = R38;     
//  Init tables at 703 and 759                                                        //
8 23a1: ef,2f,62             call  85d3               Sub0635();           
8 23a4: a1,04,00,32          ldw   R32,4              R32 = 4;             
8 23a8: a1,e4,07,30          ldw   R30,7e4            R30 = 7e4;           

23ac - Sub 8 23ac:
8 23ac: c2,31,00             stw   [R30++],0          [R30++] = 0;         
8 23af: e0,32,fa             djnz  R32,23ac           R32--; if (R32 !=  0) goto 23ac;
8 23b2: c3,01,ec,07,00       stw   [7ec],0            [KIsksum] = 0;       
//  Clear KAM Flags (7C0)                                                             //
8 23b7: c7,22,66,00          stb   [R22+66],0         [R22+66] = 0;        
8 23bb: f0                   ret                      return;              

8 23bc: f0                   ret                      return;              

Send_HSO_Cmd:
8 23bd: b3,92,03,7d          ldb   R7d,[R92+3]        [Cmd] = [[TPtr]+3];  
8 23c1: 71,8f,4c             an2b  R4c,8f             [Flags_4C] &= 8f;    
8 23c4: 48,8c,06,84          sb3w  R84,R06,R8c        R84 = IO_TIMER - [Reftime];
8 23c8: 64,84,8c             ad2w  R8c,R84            [Reftime] += R84;    
//  Add Delta to master time (24 bit)                                                 //
8 23cb: b4,00,8e             adcb  R8e,0              [ReftimeH] += 0 + CY;
8 23ce: 3b,4c,34             jb    B3,R4c,2405        if (B3_[Flags_4C]) goto 2405;
8 23d1: 39,4c,26             jb    B1,R4c,23fa        if (B1_[Flags_4C]) goto 23fa;
8 23d4: 48,8c,80,84          sb3w  R84,R80,R8c        R84 = [HSO_time] - [Reftime];
8 23d8: b0,82,86             ldb   R86,R82            R86 = [HSO_timeH];   
//  time until event needs to fire (24 bit)                                           //
8 23db: b8,8e,86             sbbb  R86,R8e            R86 -= [ReftimeH] - CY;
//  Event time has passed - do immediately?                                           //
8 23de: 3f,86,24             jb    B7,R86,2405        if (B7_R86) goto 2405;
//  time delta > 65535 IO times                                                       //
8 23e1: d7,0c                jne   23ef               if (R86 != 0) goto 23ef;
8 23e3: 89,0c,00,84          cmpw  R84,c                                   
//  time < 29 uS - do immediately                                                     //
8 23e7: d3,1c                jnc   2405               if ((uns) R84 < c) goto 2405;
8 23e9: 89,46,04,84          cmpw  R84,446                                 
8 23ed: d3,0b                jnc   23fa               if ((uns) R84 < 446) goto 23fa;

23ef - Sub 8 23ef:
8 23ef: 3f,4c,65             jb    B7,R4c,2457        if (B7_[Flags_4C]) goto 2457;
8 23f2: 71,20,4c             an2b  R4c,20             [Flags_4C] &= 20;    
8 23f5: 91,40,4c             orrb  R4c,40             [Flags_4C] |= 40;    
//  schedule command execution (via 2284/2C5 Table)                                   //
8 23f8: 20,63                sjmp  245d               goto Sched_HSO;      

8 23fa: 3a,4c,16             jb    B2,R4c,2413        if (B2_[Flags_4C]) goto 2413;
//  compare to [Table+4] - count?                                                     //
8 23fd: 9b,92,04,cf          cmpb  Rcf,[R92+4]                             
8 2401: d3,10                jnc   2413               if ((uns) [HQcnt] < [[TPtr]+4]) goto 2413;
//  jmp back to schedule a task                                                       //
8 2403: 27,ea                sjmp  23ef               goto 23ef;           

8 2405: 91,28,4c             orrb  R4c,28             [Flags_4C] |= 28;    
8 2408: b0,8e,82             ldb   R82,R8e            [HSO_timeH] = [ReftimeH];
8 240b: 45,0d,00,8c,80       ad3w  R80,R8c,d          [HSO_time] = [Reftime] + d;
8 2410: b4,00,82             adcb  R82,0              [HSO_timeH] += 0 + CY;

2413 - Sub 8 2413:
8 2413: 30,0a,05             jnb   B0,R0a,241b        if (!B0_HSO_OVF) goto 241b;
8 2416: b1,0c,cf             ldb   Rcf,c              [HQcnt] = c;         
//  jmp back to schedule a task                                                       //
8 2419: 27,d4                sjmp  23ef               goto 23ef;           

241b - Sub 8 241b:
8 241b: 49,01,00,80,0e       sb3w  R0e,R80,1          HSO_TIME = [HSO_time] - 1;
//  command to send - from R92 entry[3]                                               //
8 2420: b0,7d,0d             ldb   R0d,R7d            HSO_CMD = [Cmd];     
8 2423: 3b,4c,17             jb    B3,R4c,243d        if (B3_[Flags_4C]) goto 243d;
8 2426: 3a,4c,14             jb    B2,R4c,243d        if (B2_[Flags_4C]) goto 243d;
8 2429: 01,84                clrw  R84                R84 = 0;             
//  = (timelo/256) & 7                                                                //
8 242b: 51,07,81,84          an3b  R84,R81,7          R84 = R81 & 7;       
//  each slice is event count, in 614uS (0.6mS) slots ?                               //
8 242f: b3,85,b4,03,86       ldb   R86,[R84+3b4]      R86 = [R84+Slice_0]; 
8 2434: 17,86                incb  R86                R86++;               
//  increment relevent slice                                                          //
8 2436: c7,85,b4,03,86       stb   [R84+3b4],R86      [R84+Slice_0] = R86; 
8 243b: 17,cf                incb  Rcf                [HQcnt]++;           
8 243d: 71,71,4c             an2b  R4c,71             [Flags_4C] &= 71;    
8 2440: 3e,7d,13             jb    B6,R7d,2456        if (B6_[Cmd]) goto 2456;
8 2443: 51,0f,7d,86          an3b  R86,R7d,f          R86 = [Cmd] & f;     
8 2447: ad,01,84             ldzbw R84,1              R84 = (uns)1;        
8 244a: 09,86,84             shlw  R84,86             R84 = R84 << R86;    
8 244d: 80,84,44             orrw  R44,R84            [HSOut_Flags] |= R84;
8 2450: 3c,7d,03             jb    B4,R7d,2456        if (B4_[Cmd]) goto 2456;
//  keep state (on or off)                                                            //
8 2453: 84,84,44             xrw   R44,R84            [HSOut_Flags] ^= R84;
8 2456: f0                   ret                      return;              

2457 - Sub 8 2457:
8 2457: b1,10,4c             ldb   R4c,10             [Flags_4C] = 10;     
//  SHORT CUT, return to GRANDcaller                                                  //
8 245a: cc,00                pop   0                  0 = pop();           
8 245c: f0                   ret                      return;              

Sched_HSO:
8 245d: af,92,05,7e          ldzbw R7e,[R92+5]        [Rtab] = (uns)[[TPtr]+5];
//  = 1st byte(link) of 2C5 entry                                                     //
8 2461: 57,7f,c5,02,00,88    ad3b  R88,0,[R7e+2c5]    R88 = 0 + [[Rtab]+HSOQ];
8 2467: de,1a                jlt   2483               if ((sig) R88 < 0) goto 2483;
//  FF = out of service                                                               //
8 2469: b1,ff,8a             ldb   R8a,ff             R8a = ff;            
//  = link deactivated                                                                //
8 246c: c7,7f,c5,02,8a       stb   [R7e+2c5],R8a      [[Rtab]+HSOQ] = R8a; 
//  +5, link to next entry (OFF?)                                                     //
8 2471: 57,7f,ca,02,00,8a    ad3b  R8a,0,[R7e+2ca]    R8a = 0 + [[Rtab]+2ca];
//  = link deactivated                                                                //
8 2477: c7,89,c5,02,8a       stb   [R88+2c5],R8a      [R88+HSOQ] = R8a;    
//  jump if end (no next entry)                                                       //
8 247c: da,05                jle   2483               if ((sig) R8a <= 0) goto 2483;
//  entry is valid so update link?                                                    //
8 247e: c7,8b,c5,02,88       stb   [R8a+2c5],R88      [R8a+HSOQ] = R88;    

2483 - Sub 8 2483:
8 2483: 49,84,22,92,88       sb3w  R88,R92,2284       R88 = [TPtr] - 2284; 
//  save *ROM* OFFSET in this 2C5 Table entry [1]                                     //
8 2488: c7,7f,c6,02,88       stb   [R7e+2c6],R88      [[Rtab]+SvStack] = R88;
//  save TimeLo16                                                                     //
8 248d: c3,7f,c7,02,80       stw   [R7e+2c7],R80      [[Rtab]+2c7] = [HSO_time];
//  save TimeHi8                                                                      //
8 2492: c7,7f,c9,02,82       stb   [R7e+2c9],R82      [[Rtab]+2c9] = [HSO_timeH];
//  load offset (2C5) to list head (?) from 2284 Table pointer                        //
8 2497: af,92,02,88          ldzbw R88,[R92+2]        R88 = (uns)[[TPtr]+2];
//  R8A is link from R88 entry                                                        //
8 249b: 57,89,c5,02,00,8a    ad3b  R8a,0,[R88+2c5]    R8a = 0 + [R88+HSOQ];
//  insert into list by activation time                                               //
8 24a1: 20,0a                sjmp  24ad               goto 24ad;           

24a3 - Sub 8 24a3:
8 24a3: 55,05,8a,88          ad3b  R88,R8a,5          R88 = R8a + 5;       
//  traverse link + 5                                                                 //
8 24a7: 57,8b,ca,02,00,8a    ad3b  R8a,0,[R8a+2ca]    R8a = 0 + [R8a+2ca]; 

24ad - Sub 8 24ad:
8 24ad: d2,12                jgt   24c1               if ((sig) R8a > 0) goto 24c1;
//  save in other 'side' link?                                                        //
8 24af: c7,7f,ca,02,8a       stb   [R7e+2ca],R8a      [[Rtab]+2ca] = R8a;  
8 24b4: c7,89,c5,02,7e       stb   [R88+2c5],R7e      [R88+HSOQ] = [Rtab]; 
//  convert 2C5 offset to address                                                     //
8 24b9: 65,c5,02,7e          ad2w  R7e,2c5            [Rtab] += 2c5;       
8 24bd: c6,7e,88             stb   [R7e],R88          [[Rtab]] = R88;      
8 24c0: f0                   ret                      return;              

24c1 - Sub 8 24c1:
8 24c1: 9b,8b,c6,02,00       cmpb  0,[R8a+2c6]                             
//  jmp if offset link = 0                                                            //
8 24c6: df,db                je    24a3               if (0 == [R8a+SvStack]) goto 24a3;
//  execute time Lo 16 bits                                                           //
8 24c8: 8b,8b,c7,02,80       cmpw  R80,[R8a+2c7]                           
8 24cd: b0,82,86             ldb   R86,R82            R86 = [HSO_timeH];   
//  execute time Hi 8 bits                                                            //
8 24d0: bb,8b,c9,02,86       sbbb  R86,[R8a+2c9]      R86 -= [R8a+2c9] - CY;
//  if new event time is after this entry time then jump                              //
8 24d5: 37,86,cb             jnb   B7,R86,24a3        if (!B7_R86) goto 24a3;
8 24d8: a0,8a,88             ldw   R88,R8a            R88 = R8a;           
8 24db: af,89,c5,02,8a       ldzbw R8a,[R88+2c5]      R8a = (uns)[R88+HSOQ];
8 24e0: c7,8b,c5,02,7e       stb   [R8a+2c5],R7e      [R8a+HSOQ] = [Rtab]; 
//  index to flip side of entry                                                       //
8 24e5: 75,05,7e             ad2b  R7e,5              [Rtab] += 5;         
8 24e8: c7,89,c5,02,7e       stb   [R88+2c5],R7e      [R88+HSOQ] = [Rtab]; 
//  pointer to base side of entry                                                     //
8 24ed: 65,c0,02,7e          ad2w  R7e,2c0            [Rtab] += 2c0;       
8 24f1: c6,7e,8a             stb   [R7e],R8a          [[Rtab]] = R8a;      
8 24f4: c7,7e,05,88          stb   [R7e+5],R88        [[Rtab]+5] = R88;    
8 24f8: f0                   ret                      return;              

Do_CmdN:
8 24f9: 2e,c2                scall 23bd               Send_HSO_Cmd();      
8 24fb: 3e,4c,2a             jb    B6,R4c,2528        if (B6_[Flags_4C]) goto 2528;
//  move to next entry                                                                //
8 24fe: 65,08,00,92          ad2w  R92,8              [TPtr] += 8;         
//  push return address                                                               //
8 2502: c9,09,25             push  2509               push(Sub0033);       
8 2505: cb,92,fe             push  [R92+fe]           push([[TPtr]+fe]);   
//  call subroutine from -2 of next entry                                             //
8 2508: f0                   ret                      return;              

Sub0033:
8 2509: db,25                jc    2530               if ([TPtr] > ffff) goto 2530;
//  drop through if reschedule                                                        //
8 250b: 20,00                sjmp  250d               goto Do_CmdP;        

Do_CmdP:
8 250d: 2e,ae                scall 23bd               Send_HSO_Cmd();      
8 250f: 3e,4c,16             jb    B6,R4c,2528        if (B6_[Flags_4C]) goto 2528;
8 2512: 37,7d,0f             jnb   B7,R7d,2524        if (!B7_[Cmd]) goto 2524;
//  R92 pointer to Previous entry                                                     //
8 2515: 69,08,00,92          sb2w  R92,8              [TPtr] -= 8;         
//  push return address                                                               //
8 2519: c9,20,25             push  2520               push(Sub0035);       
//  get subroutine address from ON entry                                              //
8 251c: cb,92,0e             push  [R92+e]            push([[TPtr]+e]);    
//  call subroutine                                                                   //
8 251f: f0                   ret                      return;              

Sub0035:
8 2520: db,0e                jc    2530               if ([TPtr] >= 0) goto 2530;
//  go to ON event execution                                                          //
8 2522: 27,d5                sjmp  24f9               goto Do_CmdN;        

2524 - Sub 8 2524:
8 2524: c7,7e,01,00          stb   [R7e+1],0          [[Rtab]+1] = 0;      
8 2528: f0                   ret                      return;              


//  Never gets to here !                                                              //
8 2529: c9,30,25,cb,92,04,f0                          Unknown Operation/Structure


2530 - Sub 8 2530:
8 2530: 2f,2b                scall 245d               Sched_HSO();         
8 2532: f0                   ret                      return;              

Read_hsi:
8 2533: 34,d8,01             jnb   B4,Rd8,2537        if (!B4_[Vip_flags3]) goto 2537;
8 2536: f0                   ret                      return;              

2537 - Sub 8 2537:
8 2537: 48,8c,06,84          sb3w  R84,R06,R8c        R84 = IO_TIMER - [Reftime];
//  add diff (24 bits)                                                                //
8 253b: 64,84,8c             ad2w  R8c,R84            [Reftime] += R84;    
8 253e: b4,00,8e             adcb  R8e,0              [ReftimeH] += 0 + CY;
//  set event time Hi                                                                 //
8 2541: b0,8e,7c             ldb   R7c,R8e            [Event_timeH] = [ReftimeH];
//  time diff since event (Lo)                                                        //
8 2544: 48,0e,8c,84          sb3w  R84,R8c,R0e        R84 = [Reftime] - HSI_TIME;
//  add propogation delay ?                                                           //
8 2548: 65,02,00,84          ad2w  R84,2              R84 += 2;            
//  corrected event time                                                              //
8 254c: 48,84,8c,7a          sb3w  R7a,R8c,R84        [Event_time] = [Reftime] - R84;
//  (24 bit)                                                                          //
8 2550: b8,00,7c             sbbb  R7c,0              [Event_timeH] -= 0 - CY;
//  read HSI data                                                                     //
8 2553: b0,0d,83             ldb   R83,R0d            [HSI_State] = HSI_DATA;
//  current state                                                                     //
8 2556: b0,90,87             ldb   R87,R90            [New_irqs] = [Last_HSI];
//  get changed bits                                                                  //
8 2559: 94,83,87             xrb   R87,R83            [New_irqs] ^= [HSI_State];
//  mask for valid inputs                                                             //
8 255c: 70,0c,87             an2b  R87,R0c            [New_irqs] &= HSI_MASK;
//  New state                                                                         //
8 255f: b0,83,90             ldb   R90,R83            [Last_HSI] = [HSI_State];
8 2562: 11,4c                clrb  R4c                [Flags_4C] = 0;      
8 2564: 98,87,00             cmpb  0,R87                                   
8 2567: df,4a                je    25b3               if (0 == [New_irqs]) goto 25b3;
8 2569: 37,87,03             jnb   B7,R87,256f        if (!B7_[New_irqs]) goto 256f;
//  handle Ign Diag Mon                                                               //
8 256c: ef,16,5f             call  8485               Idm_inth();          
8 256f: 36,87,03             jnb   B6,R87,2575        if (!B6_[New_irqs]) goto 2575;
//  handle VSS counts                                                                 //
8 2572: ef,a0,04             call  2a15               Vss_inth();          
8 2575: 35,87,03             jnb   B5,R87,257b        if (!B5_[New_irqs]) goto 257b;
//  handle CID                                                                        //
8 2578: ef,53,04             call  29ce               Cid_inth();          
8 257b: 32,87,03             jnb   B2,R87,2581        if (!B2_[New_irqs]) goto 2581;
//  handle BP/MAP                                                                     //
8 257e: ef,0f,10             call  3590               Bap_inth();          
8 2581: 31,87,03             jnb   B1,R87,2587        if (!B1_[New_irqs]) goto 2587;
//  handle KNK                                                                        //
8 2584: ef,08,47             call  6c8f               Knk_inth();          
8 2587: 30,87,03             jnb   B0,R87,258d        if (!B0_[New_irqs]) goto 258d;
//  handle PIP                                                                        //
8 258a: ef,3d,02             call  27ca               Pip_inth();          
8 258d: 98,00,87             cmpb  R87,0                                   
//  any more events ?                                                                 //
8 2590: df,21                je    25b3               if ([New_irqs] == 0) goto 25b3;
8 2592: b1,87,0c             ldb   R0c,87             HSI_MASK = 87;       
8 2595: 9b,f8,4a,00          cmpb  0,[Rf8+4a]                              
//  knock sensor fitted ?                                                             //
8 2599: d7,03                jne   259e               if (0 != [Kihp]) goto 259e;
//  No, mask int                                                                      //
8 259b: b1,85,0c             ldb   R0c,85             HSI_MASK = 85;       
8 259e: 9b,fe,0c,00          cmpb  0,[Rfe+c]                               
//  CID sensor fitted ?                                                               //
8 25a2: df,03                je    25a7               if (0 == [Hpcid]) goto 25a7;
//  Yes, allow int                                                                    //
8 25a4: 91,20,0c             orrb  R0c,20             HSI_MASK |= 20;      

25a7 - Sub 8 25a7:
8 25a7: 9b,f2,47,00          cmpb  0,[Rf2+47]                              
8 25ab: df,03                je    25b0               if (0 == [Vstype]) goto 25b0;
//  Yes, allow int                                                                    //
8 25ad: 91,40,0c             orrb  R0c,40             HSI_MASK |= 40;      

25b0 - Sub 8 25b0:
8 25b0: 91,01,4e             orrb  R4e,1              [Flags_4E] |= 1;     
8 25b3: 32,0a,02             jnb   B2,R0a,25b8        if (!B2_HSO_OVF) goto 25b8;
//  loop back until HSI stack empty                                                   //
8 25b6: 27,7b                sjmp  2533               goto Read_hsi;       

8 25b8: f0                   ret                      return;              

IPT_HSO_1 - Interrupt High Speed Output 1:
8 25b9: f2                   pushp                    push(PSW);           
8 25ba: 38,d8,08             jb    B0,Rd8,25c5        if (B0_[Vip_flags3]) goto 25c5;
//  = 1msec at 15Mhz                                                                  //
8 25bd: 45,a1,01,06,0e       ad3w  R0e,R06,1a1        HSO_TIME = IO_TIMER + 1a1;
//  int enabled, level low, channel 10                                                //
8 25c2: b1,2a,0d             ldb   R0d,2a             HSO_CMD = 2a;        

25c5 - Sub 8 25c5:
8 25c5: c3,74,06,06          stw   [R74+6],R06        [Last_HSO] = IO_TIMER;
//  save stack pointer                                                                //
8 25c9: c3,74,48,10          stw   [R74+48],R10       [SvStack] = STACK;   
//  temp stack                                                                        //
8 25cd: ad,72,10             ldzbw R10,72             STACK = (uns)72;     
8 25d0: ac,91,50             ldzbw R50,R91            R50 = (uns)[Slice_ptr];
//  HSI time/256 & 7 ?                                                                //
8 25d3: 51,07,8d,91          an3b  R91,R8d,7          [Slice_ptr] = R8d & 7;
8 25d7: 98,50,91             cmpb  R91,R50                                 
//  New time slice ?                                                                  //
8 25da: df,15                je    25f1               if ([Slice_ptr] == R50) goto 25f1;
8 25dc: 7b,51,b4,03,cf       sb2b  Rcf,[R50+3b4]      [HQcnt] -= [R50+Slice_0];
8 25e1: db,02                jc    25e5               if ([HQcnt] >= 0) goto 25e5;
8 25e3: 11,cf                clrb  Rcf                [HQcnt] = 0;         

25e5 - Sub 8 25e5:
8 25e5: c7,51,b4,03,00       stb   [R50+3b4],0        [R50+Slice_0] = 0;   
8 25ea: 17,50                incb  R50                R50++;               
//  cheap reset for loop 0-7                                                          //
8 25ec: 71,07,50             an2b  R50,7              R50 &= 7;            
//  loop back, next slice                                                             //
8 25ef: 27,e6                sjmp  25d7               goto 25d7;           

8 25f1: e7,ed,0d             jump  33e1               goto HSO_continued;  

Sub0045:
8 25f4: 91,01,47             orrb  R47,1              [Flags_47] |= 1;     
//  R50 = (new ?) LSO and BIDI OP values                                              //
8 25f7: a0,46,50             ldw   R50,R46            R50 = [IO_Port_State];
8 25fa: 85,00,00,50          xrw   R50,0              R50 ^= 0;            
8 25fe: b0,50,02             ldb   R02,R50            CPU_OK = R50;        
//  write OUTPUTS                                                                     //
8 2601: b0,51,03             ldb   R03,R51            LIO_PORT = R51;      
//  drop bottom 3 BIDI O/Ps - why ?                                                   //
8 2604: 18,02,51             shrb  R51,2              R51 = R51 / 4;       
//  Odd address ? save bits for ?                                                     //
8 2607: c7,01,2f,09,51       stb   [92f],R51          [92f] = R51;         
8 260c: 01,94                clrw  R94                R94 = 0;             
8 260e: 01,96                clrw  R96                R96 = 0;             
8 2610: b1,80,4c             ldb   R4c,80             [Flags_4C] = 80;     
8 2613: 57,95,c5,02,00,7e    ad3b  R7e,0,[R94+2c5]    [Rtab] = 0 + [R94+HSOQ];
8 2619: d7,02                jne   261d               if ([Rtab] != 0) goto 261d;
//  exit when 2C5[R94] == 0                                                           //
8 261b: 20,84                sjmp  26a1               goto 26a1;           

8 261d: 11,7f                clrb  R7f                R7f = 0;             
//  map to 2284 Table entry                                                           //
8 261f: 57,7f,c6,02,00,92    ad3b  R92,0,[R7e+2c6]    [TPtr] = 0 + [[Rtab]+SvStack];
//  valid entry                                                                       //
8 2625: d7,1c                jne   2643               if ([TPtr] != 0) goto 2643;
8 2627: b1,ff,50             ldb   R50,ff             R50 = ff;            
8 262a: c7,7f,c5,02,50       stb   [R7e+2c5],R50      [[Rtab]+HSOQ] = R50; 
//  calc next entry                                                                   //
8 262f: 57,7f,ca,02,00,96    ad3b  R96,0,[R7e+2ca]    R96 = 0 + [[Rtab]+2ca];
8 2635: c7,95,c5,02,96       stb   [R94+2c5],R96      [R94+HSOQ] = R96;    
//  loop exit when R96 == 0                                                           //
8 263a: df,65                je    26a1               if (R96 == 0) goto 26a1;
8 263c: c7,97,c5,02,94       stb   [R96+2c5],R94      [R96+HSOQ] = R94;    
//  loop back for next time slice                                                     //
8 2641: 27,d0                sjmp  2613               goto 2613;           

2643 - Sub 8 2643:
8 2643: 11,93                clrb  R93                R93 = 0;             
8 2645: 48,8c,06,84          sb3w  R84,R06,R8c        R84 = IO_TIMER - [Reftime];
8 2649: 64,84,8c             ad2w  R8c,R84            [Reftime] += R84;    
//  update master ref time                                                            //
8 264c: b4,00,8e             adcb  R8e,0              [ReftimeH] += 0 + CY;
//  event time for this entry                                                         //
8 264f: a3,7f,c7,02,80       ldw   R80,[R7e+2c7]      [HSO_time] = [[Rtab]+2c7];
8 2654: b3,7f,c9,02,82       ldb   R82,[R7e+2c9]      [HSO_timeH] = [[Rtab]+2c9];
//  time left to event                                                                //
8 2659: 48,8c,80,84          sb3w  R84,R80,R8c        R84 = [HSO_time] - [Reftime];
8 265d: b0,82,86             ldb   R86,R82            R86 = [HSO_timeH];   
8 2660: b8,8e,86             sbbb  R86,R8e            R86 -= [ReftimeH] - CY;
//  -ve, time passed, do immediately                                                  //
8 2663: 3f,86,0a             jb    B7,R86,2670        if (B7_R86) goto 2670;
//  still time left                                                                   //
8 2666: d7,39                jne   26a1               if ([Flags_4C] != 2) goto 26a1;
8 2668: 89,46,04,84          cmpw  R84,446                                 
//  < 2mS to go, process it ?                                                         //
8 266c: d1,05                jleu  2673               if ((uns) R84 <= 446) goto 2673;
//  skip until later ?                                                                //
8 266e: 20,31                sjmp  26a1               goto 26a1;           

2670 - Sub 8 2670:
8 2670: 91,08,4c             orrb  R4c,8              [Flags_4C] |= 8;     
8 2673: 89,42,00,84          cmpw  R84,42                                  
8 2677: d1,03                jleu  267c               if ((uns) R84 <= 42) goto 267c;
//  event time > 158 uS                                                               //
8 2679: 91,02,4c             orrb  R4c,2              [Flags_4C] |= 2;     

267c - Sub 8 267c:
8 267c: 65,c5,02,7e          ad2w  R7e,2c5            [Rtab] += 2c5;       
//  map to 2284 Table entry                                                           //
8 2680: 65,84,22,92          ad2w  R92,2284           [TPtr] += HSOTable;  
//  return address for call                                                           //
8 2684: c9,8a,26             push  268a               push(Sub0049);       
8 2687: ca,92                push  [R92]              push([[TPtr]]);      
//  call subroutine from 2284 Table                                                   //
8 2689: f0                   ret                      return;              

Sub0049:
8 268a: 34,4c,0c             jnb   B4,R4c,2699        if (!B4_[Flags_4C]) goto 2699;
8 268d: 57,95,c5,02,00,94    ad3b  R94,0,[R94+2c5]    R94 = 0 + [R94+HSOQ];
8 2693: df,0c                je    26a1               if (R94 == 0) goto 26a1;
//  next 2C5 Table entry                                                              //
8 2695: 65,05,00,94          ad2w  R94,5              R94 += 5;            
8 2699: 32,0a,03             jnb   B2,R0a,269f        if (!B2_HSO_OVF) goto 269f;
8 269c: ef,94,fe             call  2533               Read_hsi();          

269f - Sub 8 269f:
8 269f: 27,6f                sjmp  2610               goto 2610;           

8 26a1: 32,0a,02             jnb   B2,R0a,26a6        if (!B2_HSO_OVF) goto 26a6;
8 26a4: 2e,8d                scall 2533               Read_hsi();          
8 26a6: 11,4c                clrb  R4c                [Flags_4C] = 0;      
8 26a8: 88,48,00             cmpw  0,R48                                   
8 26ab: df,10                je    26bd               if (0 == R48) goto 26bd;
8 26ad: 37,48,03             jnb   B7,R48,26b3        if (!B7_R48) goto 26b3;
8 26b0: ef,8b,0c             call  333e               Sub0115();           
8 26b3: 35,48,02             jnb   B5,R48,26b8        if (!B5_R48) goto 26b8;
8 26b6: 28,ee                scall 27a6               Set_SW_intp();       
8 26b8: 32,0a,02             jnb   B2,R0a,26bd        if (!B2_HSO_OVF) goto 26bd;
8 26bb: 2e,76                scall 2533               Read_hsi();          

26bd - Sub 8 26bd:
8 26bd: b3,01,30,09,51       ldb   R51,[930]          R51 = [930];         
8 26c2: 19,02,51             shlb  R51,2              R51 = R51 * 4;       
//  read bidirectional port                                                           //
8 26c5: b0,03,52             ldb   R52,R03            R52 = LIO_PORT;      
//  keep bits 0 and 1                                                                 //
8 26c8: 71,03,52             an2b  R52,3              R52 &= 3;            
8 26cb: 90,52,51             orrb  R51,R52            R51 |= R52;          
//  HSI sample                                                                        //
8 26ce: b0,0b,50             ldb   R50,R0b            R50 = HSI_SAMP;      
//  Redundant ?                                                                       //
8 26d1: 85,00,00,50          xrw   R50,0              R50 ^= 0;            
//  save HSI AND Low speed sample                                                     //
8 26d5: c8,50                push  R50                push(R50);           
//  last time HSI+ LS Sample                                                          //
8 26d7: a3,74,c4,94          ldw   R94,[R74+c4]       R94 = [Post_image];  
//  bits changed since last read                                                      //
8 26db: 84,94,50             xrw   R50,R94            R50 ^= R94;          
//  swop bits back ?                                                                  //
8 26de: 02,50                cplw  R50                R50 = ~R50;          
//  Last sample                                                                       //
8 26e0: a0,de,96             ldw   R96,Rde            R96 = [Input_image]; 
//  compare for changes                                                               //
8 26e3: 84,94,96             xrw   R96,R94            R96 ^= R94;          
8 26e6: 60,96,50             an2w  R50,R96            R50 &= R96;          
//  HSI and LS changes                                                                //
8 26e9: 84,50,de             xrw   Rde,R50            [Input_image] ^= R50;
//  save this sample for next time                                                    //
8 26ec: cf,74,c4             pop   [R74+c4]           [Post_image] = pop();
8 26ef: a0,06,58             ldw   R58,R06            R58 = IO_TIMER;      
//  IO time difference for Watchdog                                                   //
8 26f2: 58,8f,59,50          sb3b  R50,R59,R8f        R50 = R59 - [Wd_time];
8 26f6: 99,02,50             cmpb  R50,2                                   
8 26f9: d3,1f                jnc   271a               if ((uns) R50 < 2) goto 271a;
//  keep alive                                                                        //
8 26fb: 95,40,02             xrb   R02,40             CPU_OK ^= 40;        
//  update wdog time                                                                  //
8 26fe: b0,59,8f             ldb   R8f,R59            [Wd_time] = R59;     
//  keep the watchdog at bay                                                          //
8 2701: 17,05                incb  R05                WD_TIMER++;          
//  toggle line 6 (LOS)                                                               //
8 2703: 95,40,02             xrb   R02,40             CPU_OK ^= 40;        
//  no of byte locations to add up                                                    //
8 2706: ad,09,50             ldzbw R50,9              R50 = (uns)9;        
//  init sum                                                                          //
8 2709: 01,54                clrw  R54                R54 = 0;             

270b - Sub 8 270b:
8 270b: e0,50,05             djnz  R50,2713           R50--; if (R50 !=  0) goto 2713;
//  move sum to RCF                                                                   //
8 270e: b0,54,cf             ldb   Rcf,R54            [HQcnt] = R54;       
//  exit loop                                                                         //
8 2711: 20,07                sjmp  271a               goto 271a;           

2713 - Sub 8 2713:
8 2713: 77,51,b3,03,54       ad2b  R54,[R50+3b3]      R54 += [R50+Archcor];
8 2718: 27,f1                sjmp  270b               goto 270b;           

271a - Sub 8 271a:
8 271a: 31,09,03             jnb   B1,R09,2720        if (!B1_INT_PEND) goto 2720;
//  allow only IO timer OVF interrupts                                                //
8 271d: b1,02,08             ldb   R08,2              INT_MASK = 2;        

2720 - Sub 8 2720:
8 2720: a3,74,48,10          ldw   R10,[R74+48]       STACK = [SvStack];   
8 2724: ff                   ff                       2724 => 2727         
8 2728: fa                   di                       disable ints;        
8 2729: f3                   popp                     pop(PSW);            
8 272a: f1                   reti                     return;              

IPT_HSI_0 - Interrupt High Speed Input 0:
8 272b: f2                   pushp                    push(PSW);           
8 272c: 91,00,02             orrb  R02,0              CPU_OK |= 0;         
//  save stack pointer                                                                //
8 272f: c3,74,48,10          stw   [R74+48],R10       [SvStack] = STACK;   
//  temp stack pointer                                                                //
8 2733: ad,72,10             ldzbw R10,72             STACK = (uns)72;     
8 2736: 32,0a,02             jnb   B2,R0a,273b        if (!B2_HSO_OVF) goto 273b;
//  read HSI data if avail                                                            //
8 2739: 2d,f8                scall 2533               Read_hsi();          

273b - Sub 8 273b:
8 273b: 27,e3                sjmp  2720               goto 2720;           

IPT_Timer_OVF - Interrupt Timer OVF:
8 273d: f2                   pushp                    push(PSW);           
//  increment I/O Timer overflow                                                      //
8 273e: 07,12                incw  R12                [Tmr_OVF_cnt]++;     
8 2740: d7,03                jne   2745               if (0 != [Tmr_OVF_cnt]) goto 2745;
//  flag Tmr overflow                                                                 //
8 2742: 91,04,4f             orrb  R4f,4              [Flags_4F] |= 4;     
8 2745: b0,12,8e             ldb   R8e,R12            [ReftimeH] = [Tmr_OVF_cnt];
//  save 32 bit time                                                                  //
8 2748: a0,06,8c             ldw   R8c,R06            [Reftime] = IO_TIMER;
8 274b: fa                   di                       disable ints;        
//  reset int mask                                                                    //
8 274c: b1,a1,08             ldb   R08,a1             INT_MASK = a1;       
8 274f: f3                   popp                     pop(PSW);            

IPT_HSI_0 - Interrupt High Speed Input 0:
8 2750: f1                   reti                     return;              

IPT_HSO_2 - Interrupt High Speed Output 2:
8 2751: f2                   pushp                    push(PSW);           
8 2752: fa                   di                       disable ints;        
8 2753: ff                   ff                                            
//  THIS interrupt time                                                               //
8 2754: 47,74,1a,00,50       ad3w  R50,0,[R74+1a]     R50 = 0 + [LastSWtime];
//  zero means set no more SW ints                                                    //
8 2759: df,21                je    277c               if (R50 == 0) goto 277c;
8 275b: 48,06,50,52          sb3w  R52,R50,R06        R52 = R50 - IO_TIMER;
//  interrupt earlier than time requested                                             //
8 275f: 37,53,1a             jnb   B7,R53,277c        if (!B7_R53) goto 277c;
8 2762: 30,0a,05             jnb   B0,R0a,276a        if (!B0_HSO_OVF) goto 276a;
//  remember int overflow ?                                                           //
8 2765: 91,20,48             orrb  R48,20             R48 |= 20;           
//  skip creating new int                                                             //
8 2768: 20,12                sjmp  277c               goto 277c;           

276a - Sub 8 276a:
8 276a: 65,23,08,50          ad2w  R50,823            R50 += 823;          
8 276e: d7,02                jne   2772               if (R50 != 0) goto 2772;
//  avoid zero which means s/w ints are off                                           //
8 2770: 07,50                incw  R50                R50++;               

2772 - Sub 8 2772:
8 2772: c3,74,1a,50          stw   [R74+1a],R50       [LastSWtime] = R50;  
8 2776: a0,50,0e             ldw   R0e,R50            HSO_TIME = R50;      
//  set new software interrupt                                                        //
8 2779: b1,0f,0d             ldb   R0d,f              HSO_CMD = f;         

277c - Sub 8 277c:
8 277c: a3,01,00,0d,50       ldw   R50,[d00]          R50 = [CC_d00];      
//  Console address ? IO time for next console call                                   //
8 2781: 47,01,1a,c1,00,52    ad3w  R52,0,[c11a]       R52 = 0 + [CC_c11a]; 
8 2787: df,19                je    27a2               if (R52 == 0) goto 27a2;
8 2789: 99,2a,51             cmpb  R51,2a                                  
//  exit if no console                                                                //
8 278c: d7,14                jne   27a2               if (R51 != 2a) goto 27a2;
8 278e: 8b,01,1a,c1,00       cmpw  0,[c11a]                                
8 2793: df,0d                je    27a2               if (0 == [CC_c11a]) goto 27a2;
8 2795: 68,06,52             sb2w  R52,R06            R52 -= IO_TIMER;     
//  if time has passed ?                                                              //
8 2798: 37,53,07             jnb   B7,R53,27a2        if (!B7_R53) goto 27a2;
8 279b: fa                   di                       disable ints;        
8 279c: ff                   ff                                            
8 279d: f3                   popp                     pop(PSW);            
//  console entry ?                                                                   //
8 279e: c9,09,d0             push  d009               push(CC_d009);       
8 27a1: f1                   reti                     return;              

8 27a2: fa                   di                       disable ints;        
8 27a3: ff                   ff                                            
8 27a4: f3                   popp                     pop(PSW);            
8 27a5: f1                   reti                     return;              

Set_SW_intp:
8 27a6: 38,0a,19             jb    B0,R0a,27c2        if (B0_HSO_OVF) goto 27c2;
//  time of last s/w int                                                              //
8 27a9: a3,74,1a,50          ldw   R50,[R74+1a]       R50 = [LastSWtime];  
//  last int + 5msec                                                                  //
8 27ad: 65,23,08,50          ad2w  R50,823            R50 += 823;          
8 27b1: d7,02                jne   27b5               if (R50 != 0) goto 27b5;
//  avoid zero                                                                        //
8 27b3: 07,50                incw  R50                R50++;               

27b5 - Sub 8 27b5:
8 27b5: c3,74,1a,50          stw   [R74+1a],R50       [LastSWtime] = R50;  
8 27b9: a0,50,0e             ldw   R0e,R50            HSO_TIME = R50;      
//  set interrupt                                                                     //
8 27bc: b1,0f,0d             ldb   R0d,f              HSO_CMD = f;         
//  clear ints overflowed flag ?                                                      //
8 27bf: 71,df,48             an2b  R48,df             R48 &= df;           
8 27c2: f0                   ret                      return;              


8 27c3: ff                                            Unknown Operation/Structure



ScScSadDir002:
8 27c4: 19,00             ScScSadDir002     oword      1900                6400

ScScSadDir003:
8 27c6: 10,ab             ScScSadDir003     oword      10ab                4267

ScScSadDir004:
8 27c8: 0c,80             ScScSadDir004     oword       c80                3200


Pip_inth:
8 27ca: b1,06,04             ldb   R04,6              AD_CMD = 6;          
//  clear Pip flag                                                                    //
8 27cd: 71,fe,87             an2b  R87,fe             [New_irqs] &= fe;    
//  min PIP time to update RPM ?                                                      //
8 27d0: a3,76,46,54          ldw   R54,[R76+46]       R54 = [Min_pip_dly]; 
8 27d4: 4b,74,50,7a,50       sb3w  R50,R7a,[R74+50]   R50 = [Event_time] - [Prev_PIP_time];
//  new PIP time in 24 bits                                                           //
8 27d9: b0,7c,52             ldb   R52,R7c            R52 = [Event_timeH]; 
8 27dc: bb,74,52,52          sbbb  R52,[R74+52]       R52 -= [Prev_PIP_timeH] - CY;
8 27e0: 38,90,02             jb    B0,R90,27e5        if (B0_[Last_HSI]) goto 27e5;
8 27e3: 21,35                sjmp  291a               goto 291a;           

8 27e5: 3c,2d,23             jb    B4,R2d,280b        if (B4_[Flags_2D]) goto 280b;
8 27e8: 91,10,2d             orrb  R2d,10             [Flags_2D] |= 10;    
//  Base of Table                                                                     //
8 27eb: a1,a6,22,56          ldw   R56,22a6           R56 = 22a6;          
8 27ef: 89,56,23,56          cmpw  R56,2356                                
//  done - exit loop                                                                  //
8 27f3: db,14                jc    2809               if ((uns) R56 >= 2356) goto 2809;
//  index into 2C5 Table (-3 ?)                                                       //
8 27f5: af,56,05,58          ldzbw R58,[R56+5]        R58 = (uns)[R56+5];  
//  24 bit PIP event time                                                             //
8 27f9: c7,59,c2,02,7c       stb   [R58+2c2],R7c      [R58+Mphtim2H] = [Event_timeH];
8 27fe: c3,59,c3,02,7a       stw   [R58+2c3],R7a      [R58+Mphtim2] = [Event_time];
//  next InjTab entry (22 bytes)                                                      //
8 2803: 65,16,00,56          ad2w  R56,16             R56 += 16;           
//  end of init loop                                                                  //
8 2807: 27,e6                sjmp  27ef               goto 27ef;           

8 2809: 20,2c                sjmp  2837               goto 2837;           

8 280b: 98,52,00             cmpb  0,R52                                   
8 280e: d7,09                jne   2819               if (0 != R52) goto 2819;
8 2810: 88,50,54             cmpw  R54,R50                                 
8 2813: d1,04                jleu  2819               if ((uns) R54 <= R50) goto 2819;
//  time too small - ignore it                                                        //
8 2815: 71,fe,90             an2b  R90,fe             [Last_HSI] &= fe;    
8 2818: f0                   ret                      return;              

8 2819: 91,0c,4e             orrb  R4e,c              [Flags_4E] |= c;     
8 281c: 91,02,28             orrb  R28,2              [Flags_28] |= 2;     
8 281f: 9b,fe,0c,00          cmpb  0,[Rfe+c]                               
//  CID sensor present ?                                                              //
8 2823: d7,09                jne   282e               if (0 != [Hpcid]) goto 282e;
//  AE fuel - sync = 1, async = 0. Init to 0                                          //
8 2825: 3e,2e,06             jb    B6,R2e,282e        if (B6_[Flags_2E]) goto 282e;
8 2828: 3a,25,03             jb    B2,R25,282e        if (B2_[Flags_25]) goto 282e;
8 282b: 71,fb,2d             an2b  R2d,fb             [Flags_2D] &= fb;    
8 282e: 71,fe,4f             an2b  R4f,fe             [Flags_4F] &= fe;    
8 2831: 32,2d,03             jnb   B2,R2d,2837        if (!B2_[Flags_2D]) goto 2837;
8 2834: 91,01,4f             orrb  R4f,1              [Flags_4F] |= 1;     
8 2837: 91,80,4e             orrb  R4e,80             [Flags_4E] |= 80;    
//  Previous PIP period                                                               //
8 283a: c3,76,ba,ba          stw   [R76+ba],Rba       [Prev_PIP_ETime] = [PIPHi_ETime];
//  new PIP period 24 bits                                                            //
8 283e: a0,50,ba             ldw   Rba,R50            [PIPHi_ETime] = R50; 
//  period = time since last PIP Hi                                                   //
8 2841: b0,52,bc             ldb   Rbc,R52            [PIPHi_ETimeH] = R52;
8 2844: 9b,f8,19,00          cmpb  0,[Rf8+19]                              
//  High Data Rate Electronic Spark Present ?                                         //
8 2848: d7,03                jne   284d               if (0 != [Hphidres]) goto 284d;
8 284a: ef,44,04             call  2c91               Calc_dwell();        

284d - Sub 8 284d:
8 284d: 98,00,bc             cmpb  Rbc,0                                   
8 2850: d7,10                jne   2862               if ([PIPHi_ETimeH] != 0) goto 2862;
//  PIP time lo 16 bits                                                               //
8 2852: 8b,76,48,ba          cmpw  Rba,[R76+48]                            
8 2856: d9,0a                jgtu  2862               if ((uns) [PIPHi_ETime] > [Sim_min]) goto 2862;
//  Sequential (1) or simultaneous (2) inject                                         //
8 2858: b3,fc,33,50          ldb   R50,[Rfc+33]       R50 = [Outinj];      
8 285c: 39,50,03             jb    B1,R50,2862        if (B1_R50) goto 2862;
8 285f: 71,f7,2e             an2b  R2e,f7             [Flags_2E] &= f7;    

2862 - Sub 8 2862:
8 2862: c3,74,50,7a          stw   [R74+50],R7a       [Prev_PIP_time] = [Event_time];
//  PIP HSI event time hi 8 bits                                                      //
8 2866: c7,74,52,7c          stb   [R74+52],R7c       [Prev_PIP_timeH] = [Event_timeH];
8 286a: 39,ca,0c             jb    B1,Rca,2879        if (B1_[Flag_ca]) goto 2879;
8 286d: 17,b3                incb  Rb3                [Ppctr]++;           
//  No of steps to Ramp Fuel, unitless                                                //
8 286f: 9b,fc,53,b3          cmpb  Rb3,[Rfc+53]                            
8 2873: d1,04                jleu  2879               if ((uns) [Ppctr] <= [Pipnum]) goto 2879;
//  No of steps to Ramp Fuel, unitless                                                //
8 2875: b3,fc,53,b3          ldb   Rb3,[Rfc+53]       [Ppctr] = [Pipnum];  
8 2879: 17,b4                incb  Rb4                [Pipcnt]++;          
8 287b: d7,02                jne   287f               if ([PIPHi_ETimeH] != [Pipcnt]) goto 287f;
//  No of PIPs which have occurred                                                    //
8 287d: 15,b4                decb  Rb4                [Pipcnt]--;          
8 287f: 17,9c                incb  R9c                [Anpip1]++;          
8 2881: d7,02                jne   2885               if ([PIPHi_ETimeH] != [Anpip1]) goto 2885;
8 2883: 15,9c                decb  R9c                [Anpip1]--;          
8 2885: 17,9d                incb  R9d                [Anpip2]++;          
8 2887: d7,02                jne   288b               if ([PIPHi_ETimeH] != [Anpip2]) goto 288b;
8 2889: 15,9d                decb  R9d                [Anpip2]--;          
8 288b: 35,2a,0a             jnb   B5,R2a,2898        if (!B5_[VIP_flags]) goto 2898;
8 288e: a3,72,76,50          ldw   R50,[R72+76]       R50 = [Vcb_pip_cnt]; 
8 2892: 07,50                incw  R50                R50++;               
8 2894: c3,72,76,50          stw   [R72+76],R50       [Vcb_pip_cnt] = R50; 
8 2898: 75,20,d1             ad2b  Rd1,20             [Synctr] += 20;      
8 289b: 9b,f8,19,00          cmpb  0,[Rf8+19]                              
8 289f: d7,03                jne   28a4               if (0 != [Hphidres]) goto 28a4;
//  High Data Rate Electronic Spark present ?                                         //
8 28a1: ef,65,42             call  6b09               Sub0445();           

28a4 - Sub 8 28a4:
8 28a4: 33,0a,fd             jnb   B3,R0a,28a4        if (!B3_HSO_OVF) goto 28a4;
//  mask out channel no                                                               //
8 28a7: 51,f0,04,50          an3b  R50,R04,f0         R50 = AD_LO & f0;    
8 28ab: b0,05,51             ldb   R51,R05            R51 = AD_HI;         
//  save (raw MAF counts ?) 124                                                       //
8 28ae: c3,72,a4,50          stw   [R72+a4],R50       [MAF_Raw] = R50;     
8 28b2: 30,4f,03             jnb   B0,R4f,28b8        if (!B0_[Flags_4F]) goto 28b8;
8 28b5: ef,5c,43             call  6c14               Sub0448();           
8 28b8: 71,7f,4f             an2b  R4f,7f             [Flags_4F] &= 7f;    
8 28bb: 33,4f,09             jnb   B3,R4f,28c7        if (!B3_[Flags_4F]) goto 28c7;
8 28be: 91,80,4f             orrb  R4f,80             [Flags_4F] |= 80;    
8 28c1: 39,90,03             jb    B1,R90,28c7        if (B1_[Last_HSI]) goto 28c7;
8 28c4: 71,f7,4f             an2b  R4f,f7             [Flags_4F] &= f7;    

28c7 - Sub 8 28c7:
8 28c7: a1,96,22,92          ldw   R92,2296           [TPtr] = OSt8_004;   
8 28cb: 9b,f8,19,00          cmpb  0,[Rf8+19]                              
8 28cf: df,07                je    28d8               if (0 == [Hphidres]) goto 28d8;
//  Underspeed Flag                                                                   //
8 28d1: 3a,a1,2e             jb    B2,Ra1,2902        if (B2_[a1_Flags]) goto 2902;
8 28d4: 29,76                scall 2a4c               Knock_chk();         
8 28d6: 20,2a                sjmp  2902               goto 2902;           

8 28d8: 32,a1,16             jnb   B2,Ra1,28f1        if (!B2_[a1_Flags]) goto 28f1;
8 28db: 39,2d,06             jb    B1,R2d,28e4        if (B1_[Flags_2D]) goto 28e4;
8 28de: 91,08,4c             orrb  R4c,8              [Flags_4C] |= 8;     
//  send HSO command and other stuff R92=2296                                         //
8 28e1: ef,d9,fa             call  23bd               Send_HSO_Cmd();      
8 28e4: 71,fb,2d             an2b  R2d,fb             [Flags_2D] &= fb;    
8 28e7: a1,00,80,50          ldw   R50,8000           R50 = 8000;          
8 28eb: c3,74,04,50          stw   [R74+4],R50        [Old_beta] = R50;    
8 28ef: 20,11                sjmp  2902               goto 2902;           

8 28f1: 38,4f,0e             jb    B0,R4f,2902        if (B0_[Flags_4F]) goto 2902;
8 28f4: 31,2d,09             jnb   B1,R2d,2900        if (!B1_[Flags_2D]) goto 2900;
8 28f7: 91,08,4c             orrb  R4c,8              [Flags_4C] |= 8;     
8 28fa: ef,fc,fb             call  24f9               Do_CmdN();           
8 28fd: 71,fd,2d             an2b  R2d,fd             [Flags_2D] &= fd;    
8 2900: 29,4a                scall 2a4c               Knock_chk();         
8 2902: b1,ff,50             ldb   R50,ff             R50 = ff;            
8 2905: c7,72,11,50          stb   [R72+11],R50       [Inj_pip] = R50;     
8 2909: 91,20,2f             orrb  R2f,20             [Flags_2F] |= 20;    
8 290c: a0,7a,52             ldw   R52,R7a            R52 = [Event_time];  
8 290f: ef,25,04             call  2d37               MAF_calc();          
8 2912: ef,46,05             call  2e5b               Sub0102();           
8 2915: ef,b0,06             call  2fc8               Sub0104();           
8 2918: 20,b3                sjmp  29cd               goto 29cd;           

8 291a: 34,2d,0c             jnb   B4,R2d,2929        if (!B4_[Flags_2D]) goto 2929;
8 291d: 08,02,54             shrw  R54,2              R54 = R54 / 4;       
8 2920: 88,50,54             cmpw  R54,R50                                 
8 2923: d1,04                jleu  2929               if ((uns) R54 <= R50) goto 2929;
8 2925: 91,01,90             orrb  R90,1              [Last_HSI] |= 1;     
8 2928: f0                   ret                      return;              

2929 - Sub 8 2929:
8 2929: a0,ba,58             ldw   R58,Rba            R58 = [PIPHi_ETime]; 
//  half (for equal Hi/Lo)                                                            //
8 292c: 08,01,58             shrw  R58,1              R58 = R58 / 2;       
8 292f: c3,76,bc,be          stw   [R76+bc],Rbe       [Prev_PIPH_PW] = [PIPH_PW];
//  PIP hi-lo time delta (Pulsewidth)                                                 //
8 2933: a0,50,be             ldw   Rbe,R50            [PIPH_PW] = R50;     
8 2936: 9b,fe,0c,00          cmpb  0,[Rfe+c]                               
//  No Cyl ID sensor                                                                  //
8 293a: d7,62                jne   299e               if (0 != [Hpcid]) goto 299e;
8 293c: 71,fd,eb             an2b  Reb,fd             [Flags_eb] &= fd;    
8 293f: 3a,a1,57             jb    B2,Ra1,2999        if (B2_[a1_Flags]) goto 2999;
//  = PIP Hi-Hi time/2 - Pip Hi-lo time                                               //
8 2942: 48,be,58,52          sb3w  R52,R58,Rbe        R52 = R58 - [PIPH_PW];
//  should be zero at steady state                                                    //
8 2946: da,48                jle   2990               if ((sig) R52 <= 0) goto 2990;
8 2948: 01,50                clrw  R50                R50 = 0;             
//  top byte PIPHi-Hi/Pip Hi-Lo                                                       //
8 294a: 8c,58,50             divw  R50,R58            R50 = R50L / R58;    
8 294d: 8b,fe,0e,50          cmpw  R50,[Rfe+e]                             
//  9e68 is 20% of 65536                                                              //
8 2951: d1,3d                jleu  2990               if ((uns) R50 <= [MHPFD]) goto 2990;
//  This is Cyl 1 - narrow blade/slot                                                 //
8 2953: 91,02,eb             orrb  Reb,2              [Flags_eb] |= 2;     
8 2956: 9b,fc,2a,d1          cmpb  Rd1,[Rfc+2a]                            
8 295a: df,02                je    295e               if ([Synctr] == [Sc0115]) goto 295e;
8 295c: 20,3b                sjmp  2999               goto 2999;           

295e - Sub 8 295e:
8 295e: 91,50,2e             orrb  R2e,50             [Flags_2E] |= 50;    
8 2961: a3,76,c2,52          ldw   R52,[R76+c2]       R52 = [Sigdlt];      
8 2965: c3,76,c4,52          stw   [R76+c4],R52       [Psgdlt] = R52;      
8 2969: c3,76,c2,be          stw   [R76+c2],Rbe       [Sigdlt] = [PIPH_PW];
8 296d: a3,76,c0,50          ldw   R50,[R76+c0]       R50 = [Sigkal];      
8 2971: 6c,be,50             ml2w  R50,Rbe            R50 *= [PIPH_PW];    
8 2974: 8c,c0,50             divw  R50,Rc0            R50 = R50L / [Mkay]; 
8 2977: dd,05                jv    297e               if (OV) goto 297e;   
8 2979: c0,be,50             stw   Rbe,R50            [PIPH_PW] = R50;     
8 297c: 20,03                sjmp  2981               goto 2981;           

8 297e: a0,58,be             ldw   Rbe,R58            [PIPH_PW] = R58;     

2981 - Sub 8 2981:
8 2981: a3,fc,2e,50          ldw   R50,[Rfc+2e]       R50 = [Sc0117];      
8 2985: 8b,fc,2a,50          cmpw  R50,[Rfc+2a]                            
//  9aa8 = 256                                                                        //
8 2989: df,03                je    298e               if (R50 == [Sc0115]) goto 298e;
8 298b: 71,ef,2e             an2b  R2e,ef             [Flags_2E] &= ef;    
8 298e: 11,d1                clrb  Rd1                [Synctr] = 0;        
8 2990: ac,d1,58             ldzbw R58,Rd1            R58 = (uns)[Synctr]; 
8 2993: 8b,fc,2a,58          cmpw  R58,[Rfc+2a]                            
8 2997: d3,05                jnc   299e               if ((uns) R58 < [Sc0115]) goto 299e;
8 2999: 11,d1                clrb  Rd1                [Synctr] = 0;        
//  UNSYNC                                                                            //
8 299b: 71,2f,2e             an2b  R2e,2f             [Flags_2E] &= 2f;    
8 299e: c9,9f,6c             push  6c9f               push(Sub0450);       
8 29a1: c9,c8,2f             push  2fc8               push(Sub0104);       
8 29a4: 9b,f8,19,00          cmpb  0,[Rf8+19]                              
8 29a8: df,01                je    29ab               if (0 == [Hphidres]) goto 29ab;
8 29aa: f0                   ret                      return;              

29ab - Sub 8 29ab:
8 29ab: a1,9e,22,92          ldw   R92,229e           [TPtr] = 229e;       
8 29af: 32,a1,0d             jnb   B2,Ra1,29bf        if (!B2_[a1_Flags]) goto 29bf;
8 29b2: 31,2d,04             jnb   B1,R2d,29b9        if (!B1_[Flags_2D]) goto 29b9;
8 29b5: 71,fd,2d             an2b  R2d,fd             [Flags_2D] &= fd;    
8 29b8: f0                   ret                      return;              

8 29b9: 91,08,4c             orrb  R4c,8              [Flags_4C] |= 8;     
//  send HSO command and other stuff                                                  //
8 29bc: e7,fe,f9             jump  23bd               goto Send_HSO_Cmd;   

8 29bf: 30,4f,08             jnb   B0,R4f,29ca        if (!B0_[Flags_4F]) goto 29ca;
//  Spout On command ?                                                                //
8 29c2: a1,96,22,92          ldw   R92,2296           [TPtr] = 2296;       
8 29c6: 28,84                scall 2a4c               Knock_chk();         
8 29c8: 27,eb                sjmp  29b5               goto 29b5;           

8 29ca: 39,2d,ec             jb    B1,R2d,29b9        if (B1_[Flags_2D]) goto 29b9;
8 29cd: f0                   ret                      return;              

Cid_inth:
8 29ce: 71,df,87             an2b  R87,df             [New_irqs] &= df;    
8 29d1: 9b,fe,0d,00          cmpb  0,[Rfe+d]                               
8 29d5: d7,16                jne   29ed               if (0 != [Hp_cidsel]) goto 29ed;
8 29d7: 3d,90,17             jb    B5,R90,29f1        if (B5_[Last_HSI]) goto 29f1;
8 29da: b3,fe,07,50          ldb   R50,[Rfe+7]        R50 = [PIPsC];       
//  = 128                                                                             //
8 29de: 19,04,50             shlb  R50,4              R50 = R50 * 10;      
8 29e1: 98,50,d1             cmpb  Rd1,R50                                 
//  not = 128                                                                         //
8 29e4: df,06                je    29ec               if ([Synctr] == R50) goto 29ec;
//  UNSYNC cyls, set 128 for next rev & return                                        //
8 29e6: b0,50,d1             ldb   Rd1,R50            [Synctr] = R50;      
8 29e9: 71,2f,2e             an2b  R2e,2f             [Flags_2E] &= 2f;    
8 29ec: f0                   ret                      return;              

8 29ed: 35,90,01             jnb   B5,R90,29f1        if (!B5_[Last_HSI]) goto 29f1;
8 29f0: f0                   ret                      return;              

8 29f1: b0,d1,50             ldb   R50,Rd1            R50 = [Synctr];      
8 29f4: 11,d1                clrb  Rd1                [Synctr] = 0;        
//  UNSYNC if underspeed                                                              //
8 29f6: 3a,a1,06             jb    B2,Ra1,29ff        if (B2_[a1_Flags]) goto 29ff;
8 29f9: 9b,fc,2a,50          cmpb  R50,[Rfc+2a]                            
8 29fd: df,04                je    2a03               if (R50 == [Sc0115]) goto 2a03;

29ff - Sub 8 29ff:
8 29ff: 71,2f,2e             an2b  R2e,2f             [Flags_2E] &= 2f;    
8 2a02: f0                   ret                      return;              

2a03 - Sub 8 2a03:
8 2a03: 91,50,2e             orrb  R2e,50             [Flags_2E] |= 50;    
//  9aac = 256                                                                        //
8 2a06: a3,fc,2e,50          ldw   R50,[Rfc+2e]       R50 = [Sc0117];      
8 2a0a: 8b,fc,2a,50          cmpw  R50,[Rfc+2a]                            
//  9aa8 = 256                                                                        //
8 2a0e: d7,01                jne   2a11               if (R50 != [Sc0115]) goto 2a11;
8 2a10: f0                   ret                      return;              

8 2a11: 71,ef,2e             an2b  R2e,ef             [Flags_2E] &= ef;    
8 2a14: f0                   ret                      return;              

Vss_inth:
8 2a15: 71,bf,87             an2b  R87,bf             [New_irqs] &= bf;    
//  rising edge only                                                                  //
8 2a18: 36,90,16             jnb   B6,R90,2a31        if (!B6_[Last_HSI]) goto 2a31;
//  count of VSS ring clicks                                                          //
8 2a1b: 17,b2                incb  Rb2                [Mphcnt]++;          
//  timer - time since last click                                                     //
8 2a1d: c7,74,3d,00          stb   [R74+3d],0         [Tslmph] = 0;        
8 2a21: 3a,c4,05             jb    B2,Rc4,2a29        if (B2_[Vsc_flags]) goto 2a29;
//  set interval start                                                                //
8 2a24: 91,04,c4             orrb  Rc4,4              [Vsc_flags] |= 4;    
//  clear click count                                                                 //
8 2a27: 11,b2                clrb  Rb2                [Mphcnt] = 0;        
8 2a29: c3,74,40,7a          stw   [R74+40],R7a       [Mphtiml1] = [Event_time];
//  save event time 32 bit                                                            //
8 2a2d: c7,74,42,7c          stb   [R74+42],R7c       [Mphtim1H] = [Event_timeH];
        Inc   8 2a2e: ostruct   OSt8_007 - Other Structure 8 007



ScScSadDir006:
8 2a34: 01,e0             ScScSadDir006     oword       1e0                 480

ScScSadDir007:
8 2a36: 01,68             ScScSadDir007     oword       168                 360

ScScSadDir008:
8 2a38: 2a,ab             ScScSadDir008     oword      2aab               10923

ScScSadDir009:
8 2a3a: 40,00             ScScSadDir009     oword      4000               16384

ScScSadDir010:
8 2a3c: 55,55             ScScSadDir010     oword      5555               21845


knck4:
8 2a3e: e0,50,04             djnz  R50,2a45           R50--; if (R50 !=  0) goto 2a45;
8 2a41: af,f8,48,50          ldzbw R50,[Rf8+48]       R50 = (uns)[KNKCYL]; 
8 2a45: 9b,f8,48,50          cmpb  R50,[Rf8+48]                            
8 2a49: d9,f6                jgtu  2a41               if ((uns) R50 > [KNKCYL]) goto 2a41;
8 2a4b: f0                   ret                      return;              

Knock_chk:
8 2a4c: ac,dc,50             ldzbw R50,Rdc            R50 = (uns)[Pip_counter];
8 2a4f: 36,4f,21             jnb   B6,R4f,2a73        if (!B6_[Flags_4F]) goto 2a73;
8 2a52: 37,4f,1e             jnb   B7,R4f,2a73        if (!B7_[Flags_4F]) goto 2a73;
8 2a55: 98,e1,00             cmpb  0,Re1                                   
8 2a58: d7,19                jne   2a73               if (0 != [Tipret]) goto 2a73;
//  SparkAdvance[ cyl 1 -8 ]                                                          //
8 2a5a: b3,51,2b,02,52       ldb   R52,[R50+22b]      R52 = [R50+Spkadv];  
8 2a5f: 78,e2,52             sb2b  R52,Re2            R52 -= [Retinc];     
8 2a62: dd,06                jv    2a6a               if (OV) goto 2a6a;   
//  Max degrees retard                                                                //
8 2a64: 9b,f8,30,52          cmpb  R52,[Rf8+30]                            
8 2a68: d6,04                jge   2a6e               if ((sig) R52 >= [Retlim]) goto 2a6e;
8 2a6a: b3,f8,30,52          ldb   R52,[Rf8+30]       R52 = [Retlim];      

2a6e - Sub 8 2a6e:
8 2a6e: c7,51,2b,02,52       stb   [R50+22b],R52      [R50+Spkadv] = R52;  
8 2a73: 2f,c9                scall 2a3e               knck4();             
8 2a75: c4,dc,50             stb   Rdc,R50            [Pip_counter] = R50; 
8 2a78: 36,4f,0c             jnb   B6,R4f,2a87        if (!B6_[Flags_4F]) goto 2a87;
8 2a7b: 37,4f,09             jnb   B7,R4f,2a87        if (!B7_[Flags_4F]) goto 2a87;
8 2a7e: b3,f8,48,54          ldb   R54,[Rf8+48]       R54 = [KNKCYL];      
8 2a82: 99,01,54             cmpb  R54,1                                   
8 2a85: d7,03                jne   2a8a               if (R54 != 1) goto 2a8a;
8 2a87: 35,2d,12             jnb   B5,R2d,2a9c        if (!B5_[Flags_2D]) goto 2a9c;
8 2a8a: 98,00,e1             cmpb  Re1,0                                   
8 2a8d: d7,0d                jne   2a9c               if ([Tipret] != 0) goto 2a9c;
8 2a8f: 36,2d,0a             jnb   B6,R2d,2a9c        if (!B6_[Flags_2D]) goto 2a9c;
//  tip in retard max = 0                                                             //
8 2a92: b3,f8,32,e1          ldb   Re1,[Rf8+32]       [Tipret] = [Tipinret];
//  Throttle position                                                                 //
8 2a96: c3,74,ac,aa          stw   [R74+ac],Raa       [Tbart] = RTP;       
8 2a9a: 20,11                sjmp  2aad               goto 2aad;           

8 2a9c: b0,e1,52             ldb   R52,Re1            R52 = [Tipret];      
//  (degrees)                                                                         //
8 2a9f: 77,f8,33,52          ad2b  R52,[Rf8+33]       R52 += [TIPINC];     
8 2aa3: da,02                jle   2aa7               if ((sig) R52 <= 0) goto 2aa7;
8 2aa5: 11,52                clrb  R52                R52 = 0;             
8 2aa7: c4,e1,52             stb   Re1,R52            [Tipret] = R52;      
8 2aaa: 36,4f,15             jnb   B6,R4f,2ac2        if (!B6_[Flags_4F]) goto 2ac2;
8 2aad: 2f,8f                scall 2a3e               knck4();             
8 2aaf: 9b,f8,19,00          cmpb  0,[Rf8+19]                              
8 2ab3: df,02                je    2ab7               if (0 == [Hphidres]) goto 2ab7;
8 2ab5: 2f,87                scall 2a3e               knck4();             

2ab7 - Sub 8 2ab7:
8 2ab7: 57,51,2b,02,e1,52    ad3b  R52,Re1,[R50+22b]  R52 = [Tipret] + [R50+Spkadv];
8 2abd: d5,03                jnv   2ac2               if (!OV) goto 2ac2;  
8 2abf: b1,80,52             ldb   R52,80             R52 = 80;            
8 2ac2: 16,52                sexb  R52                R52W = (int)R52;     
8 2ac4: 44,c2,52,54          ad3w  R54,R52,Rc2        R54 = R52 + [Saf];   
8 2ac8: c3,74,1c,54          stw   [R74+1c],R54       [Saftot] = R54;      
//  Lower limit spark clip                                                            //
8 2acc: bf,f8,0c,52          ldsbw R52,[Rf8+c]        R52 = (sig)[Splclp]; 
8 2ad0: 88,52,54             cmpw  R54,R52                                 
8 2ad3: d6,05                jge   2ada               if ((sig) R54 >= R52) goto 2ada;
8 2ad5: a0,52,54             ldw   R54,R52            R54 = R52;           
8 2ad8: 20,0c                sjmp  2ae6               goto 2ae6;           

2ada - Sub 8 2ada:
8 2ada: af,f8,0d,52          ldzbw R52,[Rf8+d]        R52 = (uns)[Spuclp]; 
8 2ade: 88,52,54             cmpw  R54,R52                                 
8 2ae1: da,03                jle   2ae6               if ((sig) R54 <= R52) goto 2ae6;
8 2ae3: a0,52,54             ldw   R54,R52            R54 = R52;           
8 2ae6: 9b,f8,19,00          cmpb  0,[Rf8+19]                              
8 2aea: df,62                je    2b4e               if (0 == [Hphidres]) goto 2b4e;
8 2aec: fe,6d,c0,ff,54       sml2w  R54,ffc0          R54 *= (sig)ffc0;    
8 2af1: 11,52                clrb  R52                R52 = 0;             
8 2af3: 37,57,09             jnb   B7,R57,2aff        if (!B7_R57) goto 2aff;
8 2af6: 17,52                incb  R52                R52++;               
8 2af8: 03,54                negw  R54                R54 = -R54;          
8 2afa: a4,00,56             adcw  R56,0              R56 += 0 + CY;       
8 2afd: 02,56                cplw  R56                R56 = ~R56;          
8 2aff: 8d,0a,00,54          divw  R54,a              R54 = R54L / a;      
8 2b03: 30,52,02             jnb   B0,R52,2b08        if (!B0_R52) goto 2b08;
8 2b06: 03,54                negw  R54                R54 = -R54;          
8 2b08: 65,04,06,54          ad2w  R54,604            R54 += 604;          
8 2b0c: 89,44,00,54          cmpw  R54,44                                  
8 2b10: db,06                jc    2b18               if ((uns) R54 >= 44) goto 2b18;
8 2b12: a1,44,00,54          ldw   R54,44             R54 = 44;            
8 2b16: 20,0a                sjmp  2b22               goto 2b22;           

8 2b18: 89,04,07,54          cmpw  R54,704                                 
8 2b1c: d1,04                jleu  2b22               if ((uns) R54 <= 704) goto 2b22;
8 2b1e: a1,04,07,54          ldw   R54,704            R54 = 704;           

2b22 - Sub 8 2b22:
8 2b22: c3,74,1e,54          stw   [R74+1e],R54       [Sapw] = R54;        
8 2b26: 6d,ab,6a,54          ml2w  R54,6aab           R54 *= 6aab;         
8 2b2a: 75,80,55             ad2b  R55,80             R55 += 80;           
8 2b2d: a4,00,56             adcw  R56,0              R56 += 0 + CY;       
8 2b30: c3,74,ca,56          stw   [R74+ca],R56       [Spout_low_time] = R56;
//  or no of PIPs per engine revolution                                               //
8 2b34: af,fe,07,50          ldzbw R50,[Rfe+7]        R50 = (uns)[PIPsC];  
8 2b38: a3,51,34,2a,50       ldw   R50,[R50+2a34]     R50 = [R50+ScScSadDir006];
//  PIP time lo 16 bits                                                               //
8 2b3d: 6c,ba,50             ml2w  R50,Rba            R50 *= [PIPHi_ETime];
8 2b40: a3,74,50,54          ldw   R54,[R74+50]       R54 = [Prev_PIP_time];
8 2b44: b3,74,52,56          ldb   R56,[R74+52]       R56 = [Prev_PIP_timeH];
8 2b48: 91,04,28             orrb  R28,4              [Flags_28] |= 4;     
8 2b4b: e7,e6,00             jump  2c34               goto Sub0087;        

2b4e - Sub 8 2b4e:
8 2b4e: af,fe,07,56          ldzbw R56,[Rfe+7]        R56 = (uns)[PIPsC];  
8 2b52: a3,57,2e,2a,56       ldw   R56,[R56+2a2e]     R56 = [R56+OSt8_007];
8 2b57: 45,28,00,56,52       ad3w  R52,R56,28         R52 = R56 + 28;      
8 2b5c: 68,54,52             sb2w  R52,R54            R52 -= R54;          
8 2b5f: 01,50                clrw  R50                R50 = 0;             
8 2b61: 09,01,56             shlw  R56,1              R56 = R56 * 2;       
8 2b64: 8c,56,50             divw  R50,R56            R50 = R50L / R56;    
8 2b67: d5,06                jnv   2b6f               if (!OV) goto 2b6f;  
8 2b69: a3,74,04,58          ldw   R58,[R74+4]        R58 = [Old_beta];    
8 2b6d: 20,17                sjmp  2b86               goto 2b86;           

8 2b6f: c0,58,50             stw   R58,R50            R58 = R50;           
8 2b72: a3,74,04,50          ldw   R50,[R74+4]        R50 = [Old_beta];    
//  Max allowed advance in spark timing between spout outputs                         //
8 2b76: 6b,f8,46,50          sb2w  R50,[Rf8+46]       R50 -= [Spklim];     
8 2b7a: 88,58,50             cmpw  R50,R58                                 
8 2b7d: d1,03                jleu  2b82               if ((uns) R50 <= R58) goto 2b82;
8 2b7f: a0,50,58             ldw   R58,R50            R58 = R50;           
8 2b82: c3,74,04,58          stw   [R74+4],R58        [Old_beta] = R58;    
8 2b86: 38,4f,0e             jb    B0,R4f,2b97        if (B0_[Flags_4F]) goto 2b97;
//  PIP time lo 16 bits                                                               //
8 2b89: 4c,58,ba,50          ml3w  R50,Rba,R58        R50 = [PIPHi_ETime] * R58;
8 2b8d: a3,74,50,54          ldw   R54,[R74+50]       R54 = [Prev_PIP_time];
8 2b91: b3,74,52,56          ldb   R56,[R74+52]       R56 = [Prev_PIP_timeH];
8 2b95: 20,6a                sjmp  2c01               goto 2c01;           

8 2b97: 49,00,40,58,50       sb3w  R50,R58,4000       R50 = R58 - 4000;    
8 2b9c: 09,01,50             shlw  R50,1              R50 = R50 * 2;       
8 2b9f: b3,76,be,52          ldb   R52,[R76+be]       R52 = [Tl0FLG];      
8 2ba3: 37,52,36             jnb   B7,R52,2bdc        if (!B7_R52) goto 2bdc;
//  Min RPM to enable transient spark routine                                         //
8 2ba6: a3,fe,10,52          ldw   R52,[Rfe+10]       R52 = [Trsrpm];      
8 2baa: 88,52,ae             cmpw  Rae,R52                                 
8 2bad: d9,11                jgtu  2bc0               if ((uns) [Rpmx4] > R52) goto 2bc0;
//  Hysteresis for TRSRPM                                                             //
8 2baf: 6b,fe,12,52          sb2w  R52,[Rfe+12]       R52 -= [Trsrph];     
8 2bb3: d3,08                jnc   2bbd               if (R52 < 0) goto 2bbd;
8 2bb5: 88,52,ae             cmpw  Rae,R52                                 
8 2bb8: db,03                jc    2bbd               if ((uns) [Rpmx4] >= R52) goto 2bbd;
8 2bba: 71,ef,26             an2b  R26,ef             [Flags_26] &= ef;    
8 2bbd: 34,26,1c             jnb   B4,R26,2bdc        if (!B4_[Flags_26]) goto 2bdc;

2bc0 - Sub 8 2bc0:
8 2bc0: 91,10,26             orrb  R26,10             [Flags_26] |= 10;    
8 2bc3: a3,76,bc,54          ldw   R54,[R76+bc]       R54 = [Prev_PIPH_PW];
8 2bc7: 6c,c0,54             ml2w  R54,Rc0            R54 *= [Mkay];       
8 2bca: 0d,01,54             shldw R54,1              R54L = R54L * 2;     
//  PIP time lo 16 bits                                                               //
8 2bcd: 48,56,ba,56          sb3w  R56,Rba,R56        R56 = [PIPHi_ETime] - R56;
8 2bd1: 01,54                clrw  R54                R54 = 0;             
8 2bd3: 0c,01,54             shrdw R54,1              R54L = R54L / 2;     
8 2bd6: 8f,76,bc,54          divw  R54,[R76+bc]       R54 = R54L / [Prev_PIPH_PW];
8 2bda: d5,03                jnv   2bdf               if (!OV) goto 2bdf;  
8 2bdc: a0,c0,54             ldw   R54,Rc0            R54 = [Mkay];        
8 2bdf: 6c,54,50             ml2w  R50,R54            R50 *= R54;          
8 2be2: a0,c0,50             ldw   R50,Rc0            R50 = [Mkay];        
8 2be5: 08,01,50             shrw  R50,1              R50 = R50 / 2;       
8 2be8: 64,50,52             ad2w  R52,R50            R52 += R50;          
8 2beb: 69,00,40,52          sb2w  R52,4000           R52 -= 4000;         
8 2bef: 09,01,52             shlw  R52,1              R52 = R52 * 2;       
8 2bf2: 4c,be,52,50          ml3w  R50,R52,Rbe        R50 = R52 * [PIPH_PW];
8 2bf6: 11,56                clrb  R56                R56 = 0;             
8 2bf8: 47,74,50,be,54       ad3w  R54,Rbe,[R74+50]   R54 = [PIPH_PW] + [Prev_PIP_time];
8 2bfd: b7,74,52,56          adcb  R56,[R74+52]       R56 += [Prev_PIP_timeH] + CY;
8 2c01: 0d,01,50             shldw R50,1              R50L = R50L * 2;     
8 2c04: 75,80,51             ad2b  R51,80             R51 += 80;           
8 2c07: a4,00,52             adcw  R52,0              R52 += 0 + CY;       
8 2c0a: 91,04,28             orrb  R28,4              [Flags_28] |= 4;     
8 2c0d: 32,2d,11             jnb   B2,R2d,2c21        if (!B2_[Flags_2D]) goto 2c21;
8 2c10: 89,a1,01,52          cmpw  R52,1a1                                 
8 2c14: d3,06                jnc   2c1c               if ((uns) R52 < 1a1) goto 2c1c;
8 2c16: 8b,f8,16,ba          cmpw  Rba,[Rf8+16]                            
8 2c1a: db,03                jc    2c1f               if ((uns) [PIPHi_ETime] >= [PIP_Tlow]) goto 2c1f;
8 2c1c: 71,fb,2d             an2b  R2d,fb             [Flags_2D] &= fb;    
8 2c1f: 20,13                sjmp  2c34               goto Sub0087;        

8 2c21: 48,be,52,50          sb3w  R50,R52,Rbe        R50 = R52 - [PIPH_PW];
8 2c25: 89,f4,01,50          cmpw  R50,1f4                                 
8 2c29: da,09                jle   2c34               if ((sig) R50 <= 1f4) goto Sub0087;
8 2c2b: 8b,f8,14,ba          cmpw  Rba,[Rf8+14]                            
8 2c2f: d1,03                jleu  2c34               if ((uns) [PIPHi_ETime] <= [SPKSWL]) goto Sub0087;
8 2c31: 91,04,2d             orrb  R2d,4              [Flags_2D] |= 4;     

Sub0087:
8 2c34: c3,74,5c,52          stw   [R74+5c],R52       [Next_spout_beta] = R52;
8 2c38: 28,34                scall 2c6e               Upd_Htime_Prev();    
8 2c3a: a1,c8,02,7e          ldw   R7e,2c8            [Rtab] = 2c8;        
8 2c3e: 9b,7e,01,00          cmpb  0,[R7e+1]                               
8 2c42: d6,19                jge   2c5d               if ((sig) 0 >= [[Rtab]+1]) goto 2c5d;
8 2c44: 91,01,2d             orrb  R2d,1              [Flags_2D] |= 1;     
8 2c47: 4b,7e,02,80,50       sb3w  R50,R80,[R7e+2]    R50 = [HSO_time] - [[Rtab]+2];
8 2c4c: 37,51,0d             jnb   B7,R51,2c5c        if (!B7_R51) goto 2c5c;
8 2c4f: 91,08,4c             orrb  R4c,8              [Flags_4C] |= 8;     
//  odd 2284 Table offset                                                             //
8 2c52: af,7e,01,92          ldzbw R92,[R7e+1]        [TPtr] = (uns)[[Rtab]+1];
8 2c56: 65,84,22,92          ad2w  R92,2284           [TPtr] += HSOTable;  
8 2c5a: ca,92                push  [R92]              push([[TPtr]]);      

2c5c - Sub 8 2c5c:
8 2c5c: f0                   ret                      return;              

8 2c5d: ef,99,f8             call  24f9               Do_CmdN();           
8 2c60: f0                   ret                      return;              



upd_Htime_pend:
8 2c61: 38,2d,07,c7,7e,01,00,cc                       Unknown Operation/Structure
8 2c69: 00,f0,71,fe,2d                                Unknown Operation/Structure


Upd_Htime_Prev:
8 2c6e: a3,74,50,80          ldw   R80,[R74+50]       [HSO_time] = [Prev_PIP_time];
8 2c72: b3,74,52,82          ldb   R82,[R74+52]       [HSO_timeH] = [Prev_PIP_timeH];
8 2c76: 67,74,5c,80          ad2w  R80,[R74+5c]       [HSO_time] += [Next_spout_beta];
8 2c7a: b4,00,82             adcb  R82,0              [HSO_timeH] += 0 + CY;
8 2c7d: 30,4f,0f             jnb   B0,R4f,2c8f        if (!B0_[Flags_4F]) goto 2c8f;
8 2c80: 64,be,80             ad2w  R80,Rbe            [HSO_time] += [PIPH_PW];
8 2c83: b4,00,82             adcb  R82,0              [HSO_timeH] += 0 + CY;
8 2c86: 20,07                sjmp  2c8f               goto 2c8f;           



Add_SpoutLo:
//  2284 entry proc                                                                   //
8 2c88: 67,74,ca,80,b4,00,82                          Unknown Operation/Structure

8 2c8f: f8                   clc                      CY = 0;              
8 2c90: f0                   ret                      return;              

Calc_dwell:
8 2c91: 9b,f8,1a,00          cmpb  0,[Rf8+1a]                              
8 2c95: d7,05                jne   2c9c               if (0 != [Tfi_dwell]) goto 2c9c;
8 2c97: a0,be,52             ldw   R52,Rbe            R52 = [PIPH_PW];     
8 2c9a: 20,80                sjmp  2d1c               goto 2d1c;           

8 2c9c: 4d,44,28,ba,54       ml3w  R54,Rba,2844       R54 = [PIPHi_ETime] * 2844;
8 2ca1: a0,56,58             ldw   R58,R56            R58 = R56;           
8 2ca4: 8b,74,c6,56          cmpw  R56,[R74+c6]                            
8 2ca8: d3,22                jnc   2ccc               if ((uns) R56 < [Ppereng]) goto 2ccc;
//  Slope for PIP acceleration                                                        //
8 2caa: a3,f8,20,50          ldw   R50,[Rf8+20]       R50 = [Pacslo];      
8 2cae: 6c,56,50             ml2w  R50,R56            R50 *= R56;          
8 2cb1: 0c,04,50             shrdw R50,4              R50L = R50L / 10;    
8 2cb4: 88,52,00             cmpw  0,R52                                   
8 2cb7: d7,0f                jne   2cc8               if (0 != R52) goto 2cc8;
8 2cb9: 4b,74,c8,50,58       sb3w  R58,R50,[R74+c8]   R58 = R50 - [Poffeng];
8 2cbe: db,02                jc    2cc2               if (R58 >= 0) goto 2cc2;
8 2cc0: 01,58                clrw  R58                R58 = 0;             
8 2cc2: 8b,f8,22,58          cmpw  R58,[Rf8+22]                            
8 2cc6: d1,04                jleu  2ccc               if ((uns) R58 <= [Paclim]) goto 2ccc;

2cc8 - Sub 8 2cc8:
8 2cc8: a3,f8,22,58          ldw   R58,[Rf8+22]       R58 = [Paclim];      
8 2ccc: c3,74,ba,58          stw   [R74+ba],R58       [Pipacl] = R58;      
8 2cd0: a1,00,80,50          ldw   R50,8000           R50 = 8000;          
8 2cd4: 6b,f8,24,50          sb2w  R50,[Rf8+24]       R50 -= [SPTADV];     
8 2cd8: 68,58,50             sb2w  R50,R58            R50 -= R58;          
8 2cdb: 6c,ba,50             ml2w  R50,Rba            R50 *= [PIPHi_ETime];
8 2cde: 0d,01,50             shldw R50,1              R50L = R50L * 2;     
8 2ce1: 6b,74,bc,52          sb2w  R52,[R74+bc]       R52 -= [Dwlbst];     
8 2ce5: db,02                jc    2ce9               if (R52 >= 0) goto 2ce9;
8 2ce7: 01,52                clrw  R52                R52 = 0;             
8 2ce9: a0,52,58             ldw   R58,R52            R58 = R52;           
8 2cec: 01,50                clrw  R50                R50 = 0;             
8 2cee: 8c,ba,50             divw  R50,Rba            R50 = R50L / [PIPHi_ETime];
8 2cf1: d5,03                jnv   2cf6               if (!OV) goto 2cf6;  
8 2cf3: bd,ff,50             ldsbw R50,ff             R50 = (sig)ff;       
8 2cf6: a0,50,54             ldw   R54,R50            R54 = R50;           
//  Dwell Switch point                                                                //
8 2cf9: 8b,f8,2c,56          cmpw  R56,[Rf8+2c]                            
8 2cfd: d1,0d                jleu  2d0c               if ((uns) R56 <= [dwLTSW]) goto 2d0c;
//  max low speed dwell                                                               //
8 2cff: a3,f8,26,50          ldw   R50,[Rf8+26]       R50 = [Lowdwell];    
8 2d03: 6c,ba,50             ml2w  R50,Rba            R50 *= [PIPHi_ETime];
8 2d06: 8b,f8,26,54          cmpw  R54,[Rf8+26]                            
8 2d0a: d1,10                jleu  2d1c               if ((uns) R54 <= [Lowdwell]) goto 2d1c;

2d0c - Sub 8 2d0c:
8 2d0c: a3,f8,28,50          ldw   R50,[Rf8+28]       R50 = [Hidwell];     
8 2d10: 6c,ba,50             ml2w  R50,Rba            R50 *= [PIPHi_ETime];
8 2d13: 8b,f8,28,54          cmpw  R54,[Rf8+28]                            
8 2d17: d1,03                jleu  2d1c               if ((uns) R54 <= [Hidwell]) goto 2d1c;
8 2d19: a0,58,52             ldw   R52,R58            R52 = R58;           
8 2d1c: c3,74,ca,52          stw   [R74+ca],R52       [Spout_low_time] = R52;
8 2d20: 48,52,ba,52          sb3w  R52,Rba,R52        R52 = [PIPHi_ETime] - R52;
8 2d24: c3,74,be,52          stw   [R74+be],R52       [Dwell] = R52;       
8 2d28: f0                   ret                      return;              

MAF_rd_calc:
8 2d29: 33,0a,fd             jnb   B3,R0a,2d29        if (!B3_HSO_OVF) goto MAF_rd_calc;
//  mask off low bits                                                                 //
8 2d2c: 51,f0,04,54          an3b  R54,R04,f0         R54 = AD_LO & f0;    
8 2d30: b0,05,55             ldb   R55,R05            R55 = AD_HI;         
//  save Raw MAF A/D reading                                                          //
8 2d33: c3,72,a4,54          stw   [R72+a4],R54       [MAF_Raw] = R54;     

MAF_calc:
8 2d37: 4b,76,ae,52,50       sb3w  R50,R52,[R76+ae]   R50 = R52 - [Maf_time];
8 2d3c: c3,76,ae,52          stw   [R76+ae],R52       [Maf_time] = R52;    
8 2d40: c3,76,b8,50          stw   [R76+b8],R50       [Intm] = R50;        
//  MAF calibrate/lookup                                                              //
8 2d44: ef,80,00             call  2dc7               Do_MAF();            
8 2d47: 35,2f,7c             jnb   B5,R2f,2dc6        if (!B5_[Flags_2F]) goto 2dc6;
8 2d4a: c3,76,36,00          stw   [R76+36],0         [Runsum] = 0;        
8 2d4e: a3,76,b0,50          ldw   R50,[R76+b0]       R50 = [Amint];       
8 2d52: c3,76,b6,50          stw   [R76+b6],R50       [Rawairchg] = R50;   
8 2d56: af,76,39,52          ldzbw R52,[R76+39]       R52 = (uns)[Archcor];
8 2d5a: 6c,52,50             ml2w  R50,R52            R50 *= R52;          
8 2d5d: 0c,07,50             shrdw R50,7              R50L = R50L / 80;    
8 2d60: 67,74,d6,50          ad2w  R50,[R74+d6]       R50 += [Archli];     
8 2d64: db,06                jc    2d6c               if (R50 > ffff) goto 2d6c;
8 2d66: 8b,76,2c,50          cmpw  R50,[R76+2c]                            
8 2d6a: d1,04                jleu  2d70               if ((uns) R50 <= [Air37]) goto 2d70;
8 2d6c: a3,76,2c,50          ldw   R50,[R76+2c]       R50 = [Air37];       
8 2d70: c3,74,d8,50          stw   [R74+d8],R50       [Archi] = R50;       
8 2d74: a0,50,54             ldw   R54,R50            R54 = R50;           
8 2d77: 31,26,44             jnb   B1,R26,2dbe        if (!B1_[Flags_26]) goto 2dbe;
8 2d7a: 01,52                clrw  R52                R52 = 0;             
8 2d7c: 0d,08,50             shldw R50,8              R50L = R50L * 100;   
8 2d7f: a3,74,da,58          ldw   R58,[R74+da]       R58 = [Archfg];      
8 2d83: 8c,58,50             divw  R50,R58            R50 = R50L / R58;    
8 2d86: dd,0a                jv    2d92               if (OV) goto 2d92;   
//  Manifold filling - slow filter                                                    //
8 2d88: a3,f6,02,52          ldw   R52,[Rf6+2]        R52 = [Fkarch];      
//  Fraction - slow vs fast filter                                                    //
8 2d8c: 8b,f6,06,50          cmpw  R50,[Rf6+6]                             
8 2d90: d1,04                jleu  2d96               if ((uns) R50 <= [Filfrc]) goto 2d96;

2d92 - Sub 8 2d92:
8 2d92: a3,f6,04,52          ldw   R52,[Rf6+4]        R52 = [Fkarc1];      
8 2d96: 11,5a                clrb  R5a                R5a = 0;             
8 2d98: 68,58,54             sb2w  R54,R58            R54 -= R58;          
8 2d9b: db,04                jc    2da1               if (R54 >= 0) goto 2da1;
8 2d9d: 17,5a                incb  R5a                R5a++;               
8 2d9f: 03,54                negw  R54                R54 = -R54;          
8 2da1: 89,01,00,54          cmpw  R54,1                                   
8 2da5: d9,05                jgtu  2dac               if ((uns) R54 > 1) goto 2dac;
8 2da7: a0,58,50             ldw   R50,R58            R50 = R58;           
8 2daa: 20,12                sjmp  2dbe               goto 2dbe;           

8 2dac: 6c,52,54             ml2w  R54,R52            R54 *= R52;          
8 2daf: 03,56                negw  R56                R56 = -R56;          
8 2db1: d7,02                jne   2db5               if (R54 != R56) goto 2db5;
8 2db3: 05,56                decw  R56                R56--;               
8 2db5: 38,5a,02             jb    B0,R5a,2dba        if (B0_R5a) goto 2dba;
8 2db8: 03,56                negw  R56                R56 = -R56;          
8 2dba: 44,58,56,50          ad3w  R50,R56,R58        R50 = R56 + R58;     
8 2dbe: c3,74,da,50          stw   [R74+da],R50       [Archfg] = R50;      
8 2dc2: c3,76,b0,00          stw   [R76+b0],0         [Amint] = 0;         
8 2dc6: f0                   ret                      return;              

Do_MAF:
8 2dc7: a3,72,a4,50          ldw   R50,[R72+a4]       R50 = [MAF_Raw];     
//  Scale raw MAF value                                                               //
8 2dcb: 6d,00,28,50          ml2w  R50,2800           R50 *= 2800;         
//  Scale via Batt Ref Voltage                                                        //
8 2dcf: 8f,72,90,50          divw  R50,[R72+90]       R50 = R50L / [VSS_Raw];
8 2dd3: d5,03                jnv   2dd8               if (!OV) goto 2dd8;  
//  clamp max MAF voltage                                                             //
8 2dd5: bd,ff,50             ldsbw R50,ff             R50 = (sig)ff;       

2dd8 - Sub 8 2dd8:
8 2dd8: c3,74,d0,50          stw   [R74+d0],R50       [Vmaf] = R50;        
//  MAF transfer function pointer                                                     //
8 2ddc: a3,76,b4,52          ldw   R52,[R76+b4]       R52 = [Maf_ptr];     
//  Table max MAF voltage                                                             //
8 2de0: 8a,52,50             cmpw  R50,[R52]                               
8 2de3: d7,06                jne   2deb               if (R50 != [R52]) goto 2deb;
//  shortcut if max value/Air flow                                                    //
8 2de5: a3,52,02,54          ldw   R54,[R52+2]        R54 = [R52+2];       
//  end Table look up                                                                 //
8 2de9: 20,36                sjmp  2e21               goto 2e21;           

8 2deb: d3,0b                jnc   2df8               if ((uns) R50 < [R52]) goto 2df8;

2ded - Sub 8 2ded:
8 2ded: 69,04,00,52          sb2w  R52,4              R52 -= 4;            
8 2df1: 8a,52,50             cmpw  R50,[R52]                               
//  loop                                                                              //
8 2df4: d9,f7                jgtu  2ded               if ((uns) R50 > [R52]) goto 2ded;
8 2df6: 20,0d                sjmp  2e05               goto 2e05;           

2df8 - Sub 8 2df8:
8 2df8: 65,04,00,52          ad2w  R52,4              R52 += 4;            
8 2dfc: 8a,52,50             cmpw  R50,[R52]                               
//  loop                                                                              //
8 2dff: d3,f7                jnc   2df8               if ((uns) R50 < [R52]) goto 2df8;
8 2e01: 69,04,00,52          sb2w  R52,4              R52 -= 4;            

2e05 - Sub 8 2e05:
8 2e05: a2,53,58             ldw   R58,[R52++]        R58 = [R52++];       
//  larger air flow                                                                   //
8 2e08: a2,53,54             ldw   R54,[R52++]        R54 = [R52++];       
//  MAF difference                                                                    //
8 2e0b: 6a,52,58             sb2w  R58,[R52]          R58 -= [R52];        
//  MAF delta to interpolate                                                          //
8 2e0e: 6a,53,50             sb2w  R50,[R52++]        R50 -= [R52++];      
//  air flow difference                                                               //
8 2e11: 6a,52,54             sb2w  R54,[R52]          R54 -= [R52];        
8 2e14: 6c,50,54             ml2w  R54,R50            R54 *= R50;          
8 2e17: 8c,58,54             divw  R54,R58            R54 = R54L / R58;    
//  interpolated air flow                                                             //
8 2e1a: 66,53,54             ad2w  R54,[R52++]        R54 += [R52++];      
8 2e1d: 69,04,00,52          sb2w  R52,4              R52 -= 4;            

2e21 - Sub 8 2e21:
8 2e21: c3,76,b4,52          stw   [R76+b4],R52       [Maf_ptr] = R52;     
//  old MAF value                                                                     //
8 2e25: a3,74,d2,50          ldw   R50,[R74+d2]       R50 = [Maf];         
//  MAF not in Kg/Hr                                                                  //
8 2e29: c3,74,d2,54          stw   [R74+d2],R54       [Maf] = R54;         
8 2e2d: 01,52                clrw  R52                R52 = 0;             
//  add old and new MAF values                                                        //
8 2e2f: 64,54,50             ad2w  R50,R54            R50 += R54;          
8 2e32: a5,00,00,52          adcw  R52,0              R52 += 0 + CY;       
//  avg/2                                                                             //
8 2e36: 0c,01,50             shrdw R50,1              R50L = R50L / 2;     
8 2e39: 6f,76,b8,50          ml2w  R50,[R76+b8]       R50 *= [Intm];       
8 2e3d: 0d,09,50             shldw R50,9              R50L = R50L * 200;   
8 2e40: 67,01,b0,03,50       ad2w  R50,[3b0]          R50 += [Runsum];     
//  Running Total ?                                                                   //
8 2e45: c3,01,b0,03,50       stw   [3b0],R50          [Runsum] = R50;      
8 2e4a: a4,00,52             adcw  R52,0              R52 += 0 + CY;       
8 2e4d: 67,76,b0,52          ad2w  R52,[R76+b0]       R52 += [Amint];      
8 2e51: d3,03                jnc   2e56               if (R52 <= ffff) goto 2e56;
8 2e53: bd,ff,52             ldsbw R52,ff             R52 = (sig)ff;       
8 2e56: c3,76,b0,52          stw   [R76+b0],R52       [Amint] = R52;       
8 2e5a: f0                   ret                      return;              

Sub0102:
8 2e5b: 01,52                clrw  R52                R52 = 0;             
8 2e5d: a3,53,94,03,54       ldw   R54,[R52+394]      R54 = [R52+Bgful1];  
8 2e62: 35,e7,2d             jnb   B5,Re7,2e92        if (!B5_[Flag_e7]) goto 2e92;
8 2e65: a3,74,da,54          ldw   R54,[R74+da]       R54 = [Archfg];      
8 2e69: 6f,53,98,03,54       ml2w  R54,[R52+398]      R54 *= [R52+Ffulm1]; 
8 2e6e: 8f,76,26,54          divw  R54,[R76+26]       R54 = R54L / [Archg_bg];
8 2e72: d5,03                jnv   2e77               if (!OV) goto 2e77;  
8 2e74: bd,ff,54             ldsbw R54,ff             R54 = (sig)ff;       
8 2e77: a3,53,9c,03,56       ldw   R56,[R52+39c]      R56 = [R52+Ffulc1];  
8 2e7c: 37,57,0b             jnb   B7,R57,2e8a        if (!B7_R57) goto 2e8a;
8 2e7f: 03,56                negw  R56                R56 = -R56;          
8 2e81: 68,56,54             sb2w  R54,R56            R54 -= R56;          
8 2e84: db,0c                jc    2e92               if (R54 >= 0) goto 2e92;
8 2e86: 01,54                clrw  R54                R54 = 0;             
8 2e88: 20,08                sjmp  2e92               goto 2e92;           

8 2e8a: 64,56,54             ad2w  R54,R56            R54 += R56;          
8 2e8d: d3,03                jnc   2e92               if (R54 <= ffff) goto 2e92;
8 2e8f: bd,ff,54             ldsbw R54,ff             R54 = (sig)ff;       
8 2e92: 6d,73,cb,54          ml2w  R54,cb73           R54 *= cb73;         
8 2e96: a0,56,50             ldw   R50,R56            R50 = R56;           
8 2e99: 01,5a                clrw  R5a                R5a = 0;             
8 2e9b: 98,bc,00             cmpb  0,Rbc                                   
8 2e9e: d7,31                jne   2ed1               if (0 != [PIPHi_ETimeH]) goto 2ed1;
8 2ea0: 0c,0a,54             shrdw R54,a              R54L = R54L / 400;   
8 2ea3: 8c,ba,54             divw  R54,Rba            R54 = R54L / [PIPHi_ETime];
8 2ea6: 8b,fc,2e,54          cmpw  R54,[Rfc+2e]                            
8 2eaa: d3,10                jnc   2ebc               if ((uns) R54 < [Sc0117]) goto 2ebc;
8 2eac: a3,fc,2e,54          ldw   R54,[Rfc+2e]       R54 = [Sc0117];      
8 2eb0: 05,54                decw  R54                R54--;               
8 2eb2: 4c,ba,54,58          ml3w  R58,R54,Rba        R58 = R54 * [PIPHi_ETime];
8 2eb6: 0c,06,58             shrdw R58,6              R58L = R58L / 40;    
8 2eb9: a0,58,50             ldw   R50,R58            R50 = R58;           
8 2ebc: 01,5a                clrw  R5a                R5a = 0;             
8 2ebe: a3,72,0e,58          ldw   R58,[R72+e]        R58 = [Pwoff];       
8 2ec2: 0d,05,58             shldw R58,5              R58L = R58L * 20;    
8 2ec5: 8c,ba,58             divw  R58,Rba            R58 = R58L / [PIPHi_ETime];
8 2ec8: 44,58,54,5a          ad3w  R5a,R54,R58        R5a = R54 + R58;     
8 2ecc: d3,03                jnc   2ed1               if (R5a <= ffff) goto 2ed1;
8 2ece: ad,ff,5a             ldzbw R5a,ff             R5a = (uns)ff;       
8 2ed1: 01,54                clrw  R54                R54 = 0;             
//  Injector Pulse Width                                                              //
8 2ed3: 4b,53,06,02,50,56    sb3w  R56,R50,[R52+206]  R56 = R50 - [R52+Fuelpw1];
8 2ed9: db,02                jc    2edd               if (R56 >= 0) goto 2edd;
8 2edb: 03,56                negw  R56                R56 = -R56;          
8 2edd: 8f,53,06,02,54       divw  R54,[R52+206]      R54 = R54L / [R52+Fuelpw1];
8 2ee2: 89,99,19,54          cmpw  R54,1999                                
8 2ee6: d1,03                jleu  2eeb               if ((uns) R54 <= 1999) goto 2eeb;
8 2ee8: 91,80,48             orrb  R48,80             R48 |= 80;           
8 2eeb: c3,53,06,02,50       stw   [R52+206],R50      [R52+Fuelpw1] = R50; 
8 2ef0: 37,2e,13             jnb   B7,R2e,2f06        if (!B7_[Flags_2E]) goto 2f06;
8 2ef3: 31,52,0a             jnb   B1,R52,2f00        if (!B1_R52) goto 2f00;
8 2ef6: 3e,2f,02             jb    B6,R2f,2efb        if (B6_[Flags_2F]) goto 2efb;
8 2ef9: 20,9e                sjmp  2f99               goto 2f99;           

8 2efb: 71,bf,2f             an2b  R2f,bf             [Flags_2F] &= bf;    
8 2efe: 20,06                sjmp  2f06               goto 2f06;           

8 2f00: 37,2f,f6             jnb   B7,R2f,2ef9        if (!B7_[Flags_2F]) goto 2ef9;
8 2f03: 71,7f,2f             an2b  R2f,7f             [Flags_2F] &= 7f;    

2f06 - Sub 8 2f06:
8 2f06: a3,f4,24,54          ldw   R54,[Rf4+24]       R54 = [Injref];      
8 2f0a: 6c,5a,54             ml2w  R54,R5a            R54 *= R5a;          
8 2f0d: 01,5a                clrw  R5a                R5a = 0;             
8 2f0f: a3,72,00,58          ldw   R58,[R72]          R58 = [Injdly];      
8 2f13: 31,52,02             jnb   B1,R52,2f18        if (!B1_R52) goto 2f18;
8 2f16: 15,52                decb  R52                R52--;               
8 2f18: 65,80,02,58          ad2w  R58,280            R58 += 280;          
8 2f1c: 0d,01,58             shldw R58,1              R58L = R58L * 2;     
//  180 = 4 cyl                                                                       //
8 2f1f: 8f,fc,2c,58          divw  R58,[Rfc+2c]       R58 = R58L / [Sc0116];
8 2f23: 68,54,58             sb2w  R58,R54            R58 -= R54;          
8 2f26: db,04                jc    2f2c               if (R58 >= 0) goto 2f2c;
8 2f28: 67,fc,2a,58          ad2w  R58,[Rfc+2a]       R58 += [Sc0115];     
8 2f2c: 37,2e,5c             jnb   B7,R2e,2f8b        if (!B7_[Flags_2E]) goto 2f8b;
8 2f2f: 3b,2f,57             jb    B3,R2f,2f89        if (B3_[Flags_2F]) goto 2f89;
8 2f32: af,53,6e,02,54       ldzbw R54,[R52+26e]      R54 = (uns)[R52+Total_delay1];
//  PIPs per engine revolution                                                        //
8 2f37: af,fe,07,50          ldzbw R50,[Rfe+7]        R50 = (uns)[PIPsC];  
8 2f3b: 6f,51,be,2f,54       ml2w  R54,[R50+2fbe]     R54 *= [R50+OSt8_008];
8 2f40: 6f,51,be,2f,58       ml2w  R58,[R50+2fbe]     R58 *= [R50+OSt8_008];
8 2f45: 0c,06,54             shrdw R54,6              R54L = R54L / 40;    
8 2f48: 0c,06,58             shrdw R58,6              R58L = R58L / 40;    
8 2f4b: 68,54,58             sb2w  R58,R54            R58 -= R54;          
8 2f4e: b8,00,56             sbbb  R56,0              R56 -= 0 - CY;       
8 2f51: d6,02                jge   2f55               if ((sig) R56 >= 0) goto 2f55;
8 2f53: 03,58                negw  R58                R58 = -R58;          
8 2f55: a3,fc,2a,5a          ldw   R5a,[Rfc+2a]       R5a = [Sc0115];      
8 2f59: 09,07,5a             shlw  R5a,7              R5a = R5a * 80;      
8 2f5c: 88,58,5a             cmpw  R5a,R58                                 
8 2f5f: db,04                jc    2f65               if ((uns) R5a >= R58) goto 2f65;
8 2f61: 03,58                negw  R58                R58 = -R58;          
8 2f63: 15,56                decb  R56                R56--;               
8 2f65: 89,00,10,58          cmpw  R58,1000                                
8 2f69: d1,04                jleu  2f6f               if ((uns) R58 <= 1000) goto 2f6f;
8 2f6b: a1,00,10,58          ldw   R58,1000           R58 = 1000;          
8 2f6f: 30,56,02             jnb   B0,R56,2f74        if (!B0_R56) goto 2f74;
8 2f72: 03,58                negw  R58                R58 = -R58;          
8 2f74: 64,54,58             ad2w  R58,R54            R58 += R54;          
8 2f77: a3,51,be,2f,50       ldw   R50,[R50+2fbe]     R50 = [R50+OSt8_008];
8 2f7c: 08,06,50             shrw  R50,6              R50 = R50 / 40;      
8 2f7f: 01,5a                clrw  R5a                R5a = 0;             
8 2f81: 8c,50,58             divw  R58,R50            R58 = R58L / R50;    
8 2f84: c7,53,6e,02,58       stb   [R52+26e],R58      [R52+Total_delay1] = R58;
8 2f89: 20,0e                sjmp  2f99               goto 2f99;           

8 2f8b: 34,2e,0b             jnb   B4,R2e,2f99        if (!B4_[Flags_2E]) goto 2f99;
8 2f8e: c7,74,f0,58          stb   [R74+f0],R58       [Total_delay1] = R58;
8 2f92: c7,74,f1,58          stb   [R74+f1],R58       [Total_delay2] = R58;
8 2f96: 91,80,2e             orrb  R2e,80             [Flags_2E] |= 80;    
8 2f99: 71,f7,2e             an2b  R2e,f7             [Flags_2E] &= f7;    
//  sequential (=1) or simultaneous (=2) injections                                   //
8 2f9c: b1,02,5a             ldb   R5a,2              R5a = 2;             
8 2f9f: 9b,fc,33,5a          cmpb  R5a,[Rfc+33]                            
8 2fa3: df,03                je    2fa8               if (R5a == [Outinj]) goto 2fa8;
8 2fa5: 37,a1,0b             jnb   B7,Ra1,2fb3        if (!B7_[a1_Flags]) goto 2fb3;
8 2fa8: 91,08,2e             orrb  R2e,8              [Flags_2E] |= 8;     
8 2fab: c7,74,ee,00          stb   [R74+ee],0         [Inj_bank1] = 0;     
8 2faf: c7,74,ef,00          stb   [R74+ef],0         [Inj_bank2] = 0;     
8 2fb3: 88,00,52             cmpw  R52,0                                   
8 2fb6: d7,09                jne   2fc1               if (R52 != 0) goto 2fc1;
8 2fb8: af,fe,16,52          ldzbw R52,[Rfe+16]       R52 = (uns)[No_hegos];
8 2fbc: 31,52,02             jnb   B1,R52,2fc1        if (!B1_R52) goto 2fc1;
        Inc   8 2fbe: ostruct   OSt8_008 - Other Structure 8 008



ScScSadDir012:
8 2fc4: 55,80             ScScSadDir012     oword      5580               21888      //  6 cyl  //

ScScSadDir013:
8 2fc6: 40,00             ScScSadDir013     oword      4000               16384      //  8 cyl  //


Sub0104:
8 2fc8: bd,ff,56             ldsbw R56,ff             R56 = (sig)ff;       
8 2fcb: 07,56                incw  R56                R56++;               
8 2fcd: b3,57,6a,02,54       ldb   R54,[R56+26a]      R54 = [R56+Inj_pip_cnt1];
8 2fd2: 15,54                decb  R54                R54--;               
8 2fd4: df,02                je    2fd8               if (R54 == R54) goto 2fd8;
8 2fd6: 20,e2                sjmp  30ba               goto 30ba;           

8 2fd8: 91,20,2e             orrb  R2e,20             [Flags_2E] |= 20;    
8 2fdb: b3,01,be,03,54       ldb   R54,[3be]          R54 = [Piplim];      
8 2fe0: 37,a1,19             jnb   B7,Ra1,2ffc        if (!B7_[a1_Flags]) goto 2ffc;
8 2fe3: 9b,fc,34,00          cmpb  0,[Rfc+34]                              
8 2fe7: d7,05                jne   2fee               if (0 != [Sc0119]) goto 2fee;
8 2fe9: 30,90,05             jnb   B0,R90,2ff1        if (!B0_[Last_HSI]) goto 2ff1;
8 2fec: 20,09                sjmp  2ff7               goto 2ff7;           

8 2fee: 30,90,06             jnb   B0,R90,2ff7        if (!B0_[Last_HSI]) goto 2ff7;
8 2ff1: b3,fc,30,54          ldb   R54,[Rfc+30]       R54 = [Sc0118];      
8 2ff5: 20,05                sjmp  2ffc               goto 2ffc;           

8 2ff7: b1,01,54             ldb   R54,1              R54 = 1;             
8 2ffa: 20,be                sjmp  30ba               goto 30ba;           

8 2ffc: 3b,2e,35             jb    B3,R2e,3034        if (B3_[Flags_2E]) goto 3034;
8 2fff: af,57,6c,02,52       ldzbw R52,[R56+26c]      R52 = (uns)[R56+Inj_bank1];
8 3004: 17,52                incb  R52                R52++;               
//  8 - no of cyls                                                                    //
8 3006: 9b,fc,32,52          cmpb  R52,[Rfc+32]                            
8 300a: d3,02                jnc   300e               if ((uns) R52 < [Cyl_wrap]) goto 300e;
8 300c: 11,52                clrb  R52                R52 = 0;             

300e - Sub 8 300e:
8 300e: c7,57,6c,02,52       stb   [R56+26c],R52      [R56+Inj_bank1] = R52;
//  Load Injector firing order                                                        //
8 3013: 45,e3,01,f4,5a       ad3w  R5a,Rf4,1e3        R5a = Inj_order;     
//  ROM ptr to injector to fire from sequence no                                      //
8 3018: 64,52,5a             ad2w  R5a,R52            R5a += R52;          
//  R50 is cyl no                                                                     //
8 301b: ae,5a,50             ldzbw R50,[R5a]          R50 = (uns)[R5a];    
//  Injector Output Port                                                              //
8 301e: 45,da,01,f4,5a       ad3w  R5a,Rf4,1da        R5a = Inj_opport;    
//  Ptr to port from cyl no                                                           //
8 3023: 64,50,5a             ad2w  R5a,R50            R5a += R50;          
//  port to fire (0 or 2)                                                             //
8 3026: b2,5a,50             ldb   R50,[R5a]          R50 = [R5a];         
8 3029: 38,56,05             jb    B0,R56,3031        if (B0_R56) goto 3031;
//  test port - jmp on port = 0                                                       //
8 302c: 31,50,05             jnb   B1,R50,3034        if (!B1_R50) goto 3034;
8 302f: 20,89                sjmp  30ba               goto 30ba;           

8 3031: 31,50,fb             jnb   B1,R50,302f        if (!B1_R50) goto 302f;
8 3034: 01,52                clrw  R52                R52 = 0;             
8 3036: 34,2e,6c             jnb   B4,R2e,30a5        if (!B4_[Flags_2E]) goto 30a5;
8 3039: af,57,6c,02,52       ldzbw R52,[R56+26c]      R52 = (uns)[R56+Inj_bank1];
//  8 - no of cyls                                                                    //
8 303e: b3,fc,32,5a          ldb   R5a,[Rfc+32]       R5a = [Cyl_wrap];    
8 3042: 99,02,5a             cmpb  R5a,2                                   
8 3045: d7,0a                jne   3051               if (R5a != 2) goto 3051;
8 3047: 30,52,07             jnb   B0,R52,3051        if (!B0_R52) goto 3051;
8 304a: af,fe,07,52          ldzbw R52,[Rfe+7]        R52 = (uns)[PIPsC];  
8 304e: 08,01,52             shrw  R52,1              R52 = R52 / 2;       
8 3051: 09,05,52             shlw  R52,5              R52 = R52 * 20;      
8 3054: ac,d1,50             ldzbw R50,Rd1            R50 = (uns)[Synctr]; 
8 3057: 68,52,50             sb2w  R50,R52            R50 -= R52;          
8 305a: db,04                jc    3060               if (R50 >= 0) goto 3060;
8 305c: 67,fc,2a,50          ad2w  R50,[Rfc+2a]       R50 += [Sc0115];     
8 3060: af,57,6e,02,52       ldzbw R52,[R56+26e]      R52 = (uns)[R56+Total_delay1];
8 3065: 68,50,52             sb2w  R52,R50            R52 -= R50;          
8 3068: db,04                jc    306e               if (R52 >= 0) goto 306e;
8 306a: 67,fc,2a,52          ad2w  R52,[Rfc+2a]       R52 += [Sc0115];     
8 306e: 99,30,52             cmpb  R52,30                                  
8 3071: d1,08                jleu  307b               if ((uns) R52 <= 30) goto 307b;
8 3073: 75,02,54             ad2b  R54,2              R54 += 2;            
8 3076: b1,18,52             ldb   R52,18             R52 = 18;            
8 3079: 20,2a                sjmp  30a5               goto 30a5;           

8 307b: 38,56,05             jb    B0,R56,3083        if (B0_R56) goto 3083;
8 307e: 91,80,2f             orrb  R2f,80             [Flags_2F] |= 80;    
8 3081: 20,03                sjmp  3086               goto 3086;           

8 3083: 91,40,2f             orrb  R2f,40             [Flags_2F] |= 40;    
8 3086: 99,20,52             cmpb  R52,20                                  
8 3089: db,1a                jc    30a5               if ((uns) R52 >= 20) goto 30a5;
8 308b: 38,90,02             jb    B0,R90,3090        if (B0_[Last_HSI]) goto 3090;
8 308e: 15,54                decb  R54                R54--;               
8 3090: 99,10,52             cmpb  R52,10                                  
8 3093: db,10                jc    30a5               if ((uns) R52 >= 10) goto 30a5;
8 3095: 75,20,52             ad2b  R52,20             R52 += 20;           
8 3098: 15,54                decb  R54                R54--;               
8 309a: 38,56,05             jb    B0,R56,30a2        if (B0_R56) goto 30a2;
8 309d: 71,7f,2f             an2b  R2f,7f             [Flags_2F] &= 7f;    
8 30a0: 20,03                sjmp  30a5               goto 30a5;           

8 30a2: 71,bf,2f             an2b  R2f,bf             [Flags_2F] &= bf;    
8 30a5: c4,59,52             stb   R59,R52            R59 = R52;           
8 30a8: 91,04,2e             orrb  R2e,4              [Flags_2E] |= 4;     
8 30ab: 98,54,00             cmpb  0,R54                                   
8 30ae: de,03                jlt   30b3               if ((sig) 0 < R54) goto 30b3;
8 30b0: b1,01,54             ldb   R54,1              R54 = 1;             
8 30b3: c7,57,6a,02,54       stb   [R56+26a],R54      [R56+Inj_pip_cnt1] = R54;
8 30b8: 20,07                sjmp  30c1               goto 30c1;           

8 30ba: c7,57,6a,02,54       stb   [R56+26a],R54      [R56+Inj_pip_cnt1] = R54;
8 30bf: 20,a4                sjmp  3165               goto 3165;           

8 30c1: b3,57,6c,02,58       ldb   R58,[R56+26c]      R58 = [R56+Inj_bank1];
8 30c6: c8,56                push  R56                push(R56);           
8 30c8: af,57,6c,02,54       ldzbw R54,[R56+26c]      R54 = (uns)[R56+Inj_bank1];
8 30cd: 64,f4,54             ad2w  R54,Rf4            R54 += Rf4;          
//  injector firing order ?                                                           //
8 30d0: b3,55,e3,01,54       ldb   R54,[R54+1e3]      R54 = [R54+1e3];     
//  not self test                                                                     //
8 30d5: 35,2a,0a             jnb   B5,R2a,30e2        if (!B5_[VIP_flags]) goto 30e2;
8 30d8: 9b,74,94,54          cmpb  R54,[R74+94]                            
8 30dc: d7,04                jne   30e2               if (R54 != [Vcutout]) goto 30e2;
8 30de: cc,56                pop   R56                R56 = pop();         
8 30e0: 20,83                sjmp  3165               goto 3165;           

8 30e2: 30,e7,0a             jnb   B0,Re7,30ef        if (!B0_[Flag_e7]) goto 30ef;
8 30e5: 95,02,e7             xrb   Re7,2              [Flag_e7] ^= 2;      
8 30e8: 39,e7,04             jb    B1,Re7,30ef        if (B1_[Flag_e7]) goto 30ef;
8 30eb: cc,56                pop   R56                R56 = pop();         
8 30ed: 20,76                sjmp  3165               goto 3165;           

30ef - Sub 8 30ef:
8 30ef: 79,01,54             sb2b  R54,1              R54 -= 1;            
//  2284 Table cell for cyl                                                           //
8 30f2: 5d,16,54,92          ml3b  R92,R54,16         [TPtr] = R54 * 16;   
//  convert cell to table pointer                                                     //
8 30f6: 65,a6,22,92          ad2w  R92,22a6           [TPtr] += InjTTab;   
//  =91B8, Injector Output Port                                                       //
8 30fa: 47,92,08,f4,54       ad3w  R54,Rf4,[R92+8]    R54 = Rf4 + [[TPtr]+8];
//  load port from cyl no                                                             //
8 30ff: af,55,da,01,54       ldzbw R54,[R54+1da]      R54 = (uns)[R54+Code_ones_ex];
//  PulseWidth? - port 0 or 2                                                         //
8 3104: 8b,55,06,02,00       cmpw  0,[R54+206]                             
8 3109: df,17                je    3122               if (0 == [R54+Fuelpw1]) goto 3122;
8 310b: 32,a1,08             jnb   B2,Ra1,3116        if (!B2_[a1_Flags]) goto 3116;
8 310e: a0,8c,80             ldw   R80,R8c            [HSO_time] = [Reftime];
8 3111: b0,8e,82             ldb   R82,R8e            [HSO_timeH] = [ReftimeH];
8 3114: 20,08                sjmp  311e               goto 311e;           

8 3116: 28,82                scall 319a               Set_bank_inj();      
8 3118: a0,50,80             ldw   R80,R50            [HSO_time] = R50;    
8 311b: b0,52,82             ldb   R82,R52            [HSO_timeH] = R52;   
8 311e: 28,a4                scall 31c4               Do_inj?();           
8 3120: 20,10                sjmp  3132               goto 3132;           

8 3122: af,92,05,7e          ldzbw R7e,[R92+5]        [Rtab] = (uns)[[TPtr]+5];
8 3126: 65,c5,02,7e          ad2w  R7e,2c5            [Rtab] += 2c5;       
//  set time for this injector to fire                                                //
8 312a: c3,7e,fe,8c          stw   [R7e+fe],R8c       [[Rtab]+fe] = [Reftime];
8 312e: c7,7e,fd,8e          stb   [R7e+fd],R8e       [[Rtab]+fd] = [ReftimeH];
8 3132: cc,56                pop   R56                R56 = pop();         
8 3134: 71,df,2e             an2b  R2e,df             [Flags_2E] &= df;    
8 3137: 33,2e,2b             jnb   B3,R2e,3165        if (!B3_[Flags_2E]) goto 3165;
8 313a: b3,57,6c,02,54       ldb   R54,[R56+26c]      R54 = [R56+Inj_bank1];
8 313f: 17,54                incb  R54                R54++;               
//  8 - no of cyls                                                                    //
8 3141: 9b,fc,32,54          cmpb  R54,[Rfc+32]                            
8 3145: d3,02                jnc   3149               if ((uns) R54 < [Cyl_wrap]) goto 3149;
//  wrap cyl count                                                                    //
8 3147: 11,54                clrb  R54                R54 = 0;             

3149 - Sub 8 3149:
8 3149: c7,57,6c,02,54       stb   [R56+26c],R54      [R56+Inj_bank1] = R54;
8 314e: 30,54,0a             jnb   B0,R54,315b        if (!B0_R54) goto 315b;
8 3151: 95,40,02             xrb   R02,40             CPU_OK ^= 40;        
8 3154: 17,05                incb  R05                WD_TIMER++;          
8 3156: 17,05                incb  R05                WD_TIMER++;          
//  watchdog and LOS reset                                                            //
8 3158: 95,40,02             xrb   R02,40             CPU_OK ^= 40;        
8 315b: 98,54,58             cmpb  R58,R54                                 
8 315e: df,05                je    3165               if (R58 == R54) goto 3165;
8 3160: 91,20,2e             orrb  R2e,20             [Flags_2E] |= 20;    
8 3163: 27,61                sjmp  30c6               goto 30c6;           

8 3165: 32,2e,05             jnb   B2,R2e,316d        if (!B2_[Flags_2E]) goto 316d;
8 3168: c7,57,70,02,59       stb   [R56+270],R59      [R56+Ibeta1] = R59;  
8 316d: 71,db,2e             an2b  R2e,db             [Flags_2E] &= db;    
8 3170: 3b,2e,0e             jb    B3,R2e,3181        if (B3_[Flags_2E]) goto 3181;
8 3173: b3,fe,16,50          ldb   R50,[Rfe+16]       R50 = [No_hegos];    
8 3177: 38,50,0f             jb    B0,R50,3189        if (B0_R50) goto 3189;
8 317a: 38,56,0c             jb    B0,R56,3189        if (B0_R56) goto 3189;
8 317d: 26,4c                sjmp  2fcb               goto 2fcb;           


//  Not called ?                                                                      //
8 317f: 20,08                                         Unknown Operation/Structure

8 3181: b3,74,ec,50          ldb   R50,[R74+ec]       R50 = [Inj_pip_cnt1];
8 3185: c7,74,ed,50          stb   [R74+ed],R50       [Inj_pip_cnt2] = R50;
8 3189: f0                   ret                      return;              

UPd_Inj_pend:
8 318a: b3,92,07,54          ldb   R54,[R92+7]        R54 = [[TPtr]+7];    
8 318e: 73,72,12,54          an2b  R54,[R72+12]       R54 &= [Inj_pending];
8 3192: c7,72,12,54          stb   [R72+12],R54       [Inj_pending] = R54; 
8 3196: 71,ef,4f             an2b  R4f,ef             [Flags_4F] &= ef;    
8 3199: f0                   ret                      return;              

Set_bank_inj:
8 319a: a3,92,08,50          ldw   R50,[R92+8]        R50 = [[TPtr]+8];    
//  Injector Output Port(Inj port vs cyl)                                             //
8 319e: 45,da,01,f4,5a       ad3w  R5a,Rf4,1da        R5a = Inj_opport;    
//  add cylno                                                                         //
8 31a3: 64,50,5a             ad2w  R5a,R50            R5a += R50;          
//  load port (0 or 2) from ROM Table                                                 //
8 31a6: ae,5a,50             ldzbw R50,[R5a]          R50 = (uns)[R5a];    
//  jmp if port == 0 (not 2)                                                          //
8 31a9: 31,50,02             jnb   B1,R50,31ae        if (!B1_R50) goto 31ae;
//  change port 2 into 1                                                              //
8 31ac: 15,50                decb  R50                R50--;               

31ae - Sub 8 31ae:
8 31ae: b3,51,70,02,51       ldb   R51,[R50+270]      R51 = [R50+Ibeta1];  
8 31b3: 11,50                clrb  R50                R50 = 0;             
//  PIP time lo 16 bits                                                               //
8 31b5: 6c,ba,50             ml2w  R50,Rba            R50 *= [PIPHi_ETime];
//  R50 = R50 * 8192                                                                  //
8 31b8: 0c,0d,50             shrdw R50,d              R50L = R50L / 2000;  
8 31bb: 67,74,50,50          ad2w  R50,[R74+50]       R50 += [Prev_PIP_time];
8 31bf: b7,74,52,52          adcb  R52,[R74+52]       R52 += [Prev_PIP_timeH] + CY;
8 31c3: f0                   ret                      return;              

Do_inj?:
8 31c4: 71,f7,2d             an2b  R2d,f7             [Flags_2D] &= f7;    
8 31c7: af,92,05,7e          ldzbw R7e,[R92+5]        [Rtab] = (uns)[[TPtr]+5];
8 31cb: 65,c5,02,7e          ad2w  R7e,2c5            [Rtab] += 2c5;       
8 31cf: 35,2e,0c             jnb   B5,R2e,31de        if (!B5_[Flags_2E]) goto 31de;
8 31d2: b3,92,06,50          ldb   R50,[R92+6]        R50 = [[TPtr]+6];    
8 31d6: 93,72,10,50          orrb  R50,[R72+10]       R50 |= [Inj_base];   
8 31da: c7,72,10,50          stb   [R72+10],R50       [Inj_base] = R50;    
8 31de: b3,92,07,50          ldb   R50,[R92+7]        R50 = [[TPtr]+7];    
8 31e2: 73,72,11,50          an2b  R50,[R72+11]       R50 &= [Inj_pip];    
8 31e6: c7,72,11,50          stb   [R72+11],R50       [Inj_pip] = R50;     
8 31ea: a1,2a,00,50          ldw   R50,2a             R50 = 2a;            
8 31ee: 43,92,0a,44,00       an3w  0,R44,[R92+a]      0 = [HSOut_Flags] & [[TPtr]+a];
8 31f3: df,42                je    3237               if ([HSOut_Flags] != [[TPtr]+a]) goto 3237;
8 31f5: 67,7e,02,50          ad2w  R50,[R7e+2]        R50 += [[Rtab]+2];   
8 31f9: b3,7e,04,52          ldb   R52,[R7e+4]        R52 = [[Rtab]+4];    
8 31fd: b4,00,52             adcb  R52,0              R52 += 0 + CY;       
8 3200: 88,50,80             cmpw  R80,R50                                 
8 3203: b0,82,86             ldb   R86,R82            R86 = [HSO_timeH];   
8 3206: b8,52,86             sbbb  R86,R52            R86 -= R52 - CY;     
8 3209: 37,86,1e             jnb   B7,R86,322a        if (!B7_R86) goto 322a;
8 320c: 35,2e,0b             jnb   B5,R2e,321a        if (!B5_[Flags_2E]) goto 321a;
8 320f: 91,08,2d             orrb  R2d,8              [Flags_2D] |= 8;     
//  schedule event time                                                               //
8 3212: c3,7e,fe,80          stw   [R7e+fe],R80       [[Rtab]+fe] = [HSO_time];
8 3216: c7,7e,fd,82          stb   [R7e+fd],R82       [[Rtab]+fd] = [HSO_timeH];
8 321a: a3,7e,02,80          ldw   R80,[R7e+2]        [HSO_time] = [[Rtab]+2];
8 321e: b3,7e,04,82          ldb   R82,[R7e+4]        [HSO_timeH] = [[Rtab]+4];
8 3222: 28,a9                scall 32cd               Sub0113();           
8 3224: 71,f7,2d             an2b  R2d,f7             [Flags_2D] &= f7;    
//  Add for execution in 2284/2C5 Table                                               //
8 3227: e7,33,f2             jump  245d               goto Sched_HSO;      

8 322a: b3,92,06,50          ldb   R50,[R92+6]        R50 = [[TPtr]+6];    
8 322e: 93,72,12,50          orrb  R50,[R72+12]       R50 |= [Inj_pending];
8 3232: c7,72,12,50          stb   [R72+12],R50       [Inj_pending] = R50; 
8 3236: f0                   ret                      return;              

8 3237: 67,7e,fe,50          ad2w  R50,[R7e+fe]       R50 += [[Rtab]+fe];  
8 323b: b3,7e,fd,52          ldb   R52,[R7e+fd]       R52 = [[Rtab]+fd];   
8 323f: b4,00,52             adcb  R52,0              R52 += 0 + CY;       
8 3242: 88,50,80             cmpw  R80,R50                                 
8 3245: b0,82,86             ldb   R86,R82            R86 = [HSO_timeH];   
8 3248: b8,52,86             sbbb  R86,R52            R86 -= R52 - CY;     
8 324b: 37,86,06             jnb   B7,R86,3254        if (!B7_R86) goto 3254;
8 324e: a0,50,80             ldw   R80,R50            [HSO_time] = R50;    
8 3251: b0,52,82             ldb   R82,R52            [HSO_timeH] = R52;   
8 3254: 11,4c                clrb  R4c                [Flags_4C] = 0;      
8 3256: 73,92,07,e0          an2b  Re0,[R92+7]        [Inj_mode] &= [[TPtr]+7];

325a - Sub 8 325a:
8 325a: ef,60,f1             call  23bd               Send_HSO_Cmd();      
8 325d: 34,4f,02             jnb   B4,R4f,3262        if (!B4_[Flags_4F]) goto 3262;
8 3260: 2f,28                scall 318a               UPd_Inj_pend();      
8 3262: 36,4c,01             jnb   B6,R4c,3266        if (!B6_[Flags_4C]) goto 3266;
8 3265: f0                   ret                      return;              

8 3266: 28,65                scall 32cd               Sub0113();           
8 3268: 67,72,0e,80          ad2w  R80,[R72+e]        [HSO_time] += [Pwoff];
8 326c: b4,00,82             adcb  R82,0              [HSO_timeH] += 0 + CY;
8 326f: 65,0c,00,92          ad2w  R92,c              [TPtr] += c;         
8 3273: b3,92,06,54          ldb   R54,[R92+6]        R54 = [[TPtr]+6];    
8 3277: 73,72,12,54          an2b  R54,[R72+12]       R54 &= [Inj_pending];
8 327b: df,29                je    32a6               if (R54 == [Inj_pending]) goto 32a6;
8 327d: 91,10,4f             orrb  R4f,10             [Flags_4F] |= 10;    
8 3280: 2f,18                scall 319a               Set_bank_inj();      
8 3282: 73,72,11,54          an2b  R54,[R72+11]       R54 &= [Inj_pip];    
8 3286: df,06                je    328e               if (R54 == [Inj_pip]) goto 328e;
8 3288: 68,ba,50             sb2w  R50,Rba            R50 -= [PIPHi_ETime];
8 328b: b8,00,52             sbbb  R52,0              R52 -= 0 - CY;       
8 328e: 45,2a,00,80,84       ad3w  R84,R80,2a         R84 = [HSO_time] + 2a;
8 3293: b0,82,86             ldb   R86,R82            R86 = [HSO_timeH];   
8 3296: b4,00,86             adcb  R86,0              R86 += 0 + CY;       
8 3299: 88,50,84             cmpw  R84,R50                                 
8 329c: b8,52,86             sbbb  R86,R52            R86 -= R52 - CY;     
8 329f: 3f,86,04             jb    B7,R86,32a6        if (B7_R86) goto 32a6;
8 32a2: 28,29                scall 32cd               Sub0113();           
8 32a4: 2e,e4                scall 318a               UPd_Inj_pend();      
8 32a6: ef,14,f1             call  23bd               Send_HSO_Cmd();      
8 32a9: 36,4c,04             jnb   B6,R4c,32b0        if (!B6_[Flags_4C]) goto 32b0;
8 32ac: 71,ef,4f             an2b  R4f,ef             [Flags_4F] &= ef;    
8 32af: f0                   ret                      return;              

8 32b0: c3,7e,fe,80          stw   [R7e+fe],R80       [[Rtab]+fe] = [HSO_time];
8 32b4: c7,7e,fd,82          stb   [R7e+fd],R82       [[Rtab]+fd] = [HSO_timeH];
8 32b8: 34,4f,0c             jnb   B4,R4f,32c7        if (!B4_[Flags_4F]) goto 32c7;
8 32bb: a0,50,80             ldw   R80,R50            [HSO_time] = R50;    
8 32be: b0,52,82             ldb   R82,R52            [HSO_timeH] = R52;   
8 32c1: 69,0c,00,92          sb2w  R92,c              [TPtr] -= c;         
8 32c5: 27,93                sjmp  325a               goto 325a;           

8 32c7: 07,7e                incw  R7e                [Rtab]++;            
8 32c9: c6,7e,00             stb   [R7e],0            [[Rtab]] = 0;        
8 32cc: f0                   ret                      return;              

Sub0113:
8 32cd: 01,54                clrw  R54                R54 = 0;             
//  Cyl No ?                                                                          //
8 32cf: a3,92,08,56          ldw   R56,[R92+8]        R56 = [[TPtr]+8];    
//  Injector Output Port Table                                                        //
8 32d3: 45,da,01,f4,5a       ad3w  R5a,Rf4,1da        R5a = Inj_opport;    
8 32d8: 64,56,5a             ad2w  R5a,R56            R5a += R56;          
//  load port 0 or 2 for this cyl                                                     //
8 32db: ae,5a,50             ldzbw R50,[R5a]          R50 = (uns)[R5a];    
8 32de: b3,92,06,56          ldb   R56,[R92+6]        R56 = [[TPtr]+6];    
8 32e2: 73,72,10,56          an2b  R56,[R72+10]       R56 &= [Inj_base];   
8 32e6: df,18                je    3300               if (R56 == [Inj_base]) goto 3300;
8 32e8: 97,72,10,56          xrb   R56,[R72+10]       R56 ^= [Inj_base];   
8 32ec: c7,72,10,56          stb   [R72+10],R56       [Inj_base] = R56;    
8 32f0: 3b,2d,08             jb    B3,R2d,32fb        if (B3_[Flags_2D]) goto 32fb;
8 32f3: c3,7e,fe,80          stw   [R7e+fe],R80       [[Rtab]+fe] = [HSO_time];
//  Save time                                                                         //
8 32f7: c7,7e,fd,82          stb   [R7e+fd],R82       [[Rtab]+fd] = [HSO_timeH];

32fb - Sub 8 32fb:
8 32fb: a3,51,06,02,54       ldw   R54,[R50+206]      R54 = [R50+Fuelpw1]; 
8 3300: 01,56                clrw  R56                R56 = 0;             
8 3302: 0d,01,54             shldw R54,1              R54L = R54L * 2;     
8 3305: 64,54,80             ad2w  R80,R54            [HSO_time] += R54;   
8 3308: b4,56,82             adcb  R82,R56            [HSO_timeH] += R56 + CY;
8 330b: 65,96,01,50          ad2w  R50,196            R50 += 196;          
8 330f: a2,50,50             ldw   R50,[R50]          R50 = [R50];         
8 3312: a3,92,08,54          ldw   R54,[R92+8]        R54 = [[TPtr]+8];    
8 3316: 09,01,54             shlw  R54,1              R54 = R54 * 2;       
8 3319: 65,98,01,54          ad2w  R54,198            R54 += 198;          
8 331d: c2,54,50             stw   [R54],R50          [R54] = R50;         
8 3320: 01,52                clrw  R52                R52 = 0;             
8 3322: 67,74,cc,50          ad2w  R50,[R74+cc]       R50 += [Fuel_sum_l]; 
8 3326: b7,74,ce,52          adcb  R52,[R74+ce]       R52 += [Fuel_sum_h] + CY;
8 332a: d5,06                jnv   3332               if (!OV) goto 3332;  
8 332c: bd,ff,50             ldsbw R50,ff             R50 = (sig)ff;       
8 332f: b1,7f,52             ldb   R52,7f             R52 = 7f;            
8 3332: c3,74,cc,50          stw   [R74+cc],R50       [Fuel_sum_l] = R50;  
8 3336: c7,74,ce,52          stb   [R74+ce],R52       [Fuel_sum_h] = R52;  
8 333a: 71,7f,4c             an2b  R4c,7f             [Flags_4C] &= 7f;    
8 333d: f0                   ret                      return;              

Sub0115:
8 333e: 71,7f,48             an2b  R48,7f             R48 &= 7f;           
8 3341: 11,56                clrb  R56                R56 = 0;             
8 3343: a1,9c,22,92          ldw   R92,229c           [TPtr] = OSt8_005;   
//  8 - no of cyls                                                                    //
8 3347: b3,fc,32,57          ldb   R57,[Rfc+32]       R57 = [Cyl_wrap];    

Sub0116:
8 334b: 98,56,57             cmpb  R57,R56                                 
8 334e: d9,02                jgtu  3352               if ((uns) R57 > R56) goto 3352;
8 3350: 20,8e                sjmp  33e0               goto 33e0;           

8 3352: 65,16,00,92          ad2w  R92,16             [TPtr] += 16;        
8 3356: 17,56                incb  R56                R56++;               
8 3358: 43,92,fe,44,00       an3w  0,R44,[R92+fe]     0 = [HSOut_Flags] & [[TPtr]+fe];
8 335d: df,ec                je    334b               if ([HSOut_Flags] != [[TPtr]+fe]) goto Sub0116;
8 335f: 53,92,06,e0,50       an3b  R50,Re0,[R92+6]    R50 = [Inj_mode] & [[TPtr]+6];
8 3364: 98,50,00             cmpb  0,R50                                   
8 3367: d7,1b                jne   3384               if (0 != R50) goto 3384;
//  entry for a cyl no?                                                               //
8 3369: a3,92,08,54          ldw   R54,[R92+8]        R54 = [[TPtr]+8];    
//  Injector Output Port Table                                                        //
8 336d: 45,da,01,f4,5a       ad3w  R5a,Rf4,1da        R5a = Inj_opport;    
//  pointer to the bank for entry R92 cyl ?                                           //
8 3372: 64,54,5a             ad2w  R5a,R54            R5a += R54;          
//  bank to fire for this cyl                                                         //
8 3375: ae,5a,50             ldzbw R50,[R5a]          R50 = (uns)[R5a];    
8 3378: a0,50,54             ldw   R54,R50            R54 = R50;           
//  Table? pulse width for port 0 (port 2 $208)                                       //
8 337b: 65,06,02,50          ad2w  R50,206            R50 += 206;          
8 337f: a2,50,50             ldw   R50,[R50]          R50 = [R50];         
8 3382: 20,02                sjmp  3386               goto 3386;           

8 3384: 01,50                clrw  R50                R50 = 0;             
8 3386: 01,52                clrw  R52                R52 = 0;             
8 3388: 0d,01,50             shldw R50,1              R50L = R50L * 2;     
8 338b: af,92,05,7e          ldzbw R7e,[R92+5]        [Rtab] = (uns)[[TPtr]+5];
8 338f: 67,72,0e,50          ad2w  R50,[R72+e]        R50 += [Pwoff];      
8 3393: b4,00,52             adcb  R52,0              R52 += 0 + CY;       
8 3396: 47,7f,c3,02,50,80    ad3w  R80,R50,[R7e+2c3]  [HSO_time] = R50 + [[Rtab]+Mphtim2];
//  schedule event time                                                               //
8 339c: b3,7f,c2,02,82       ldb   R82,[R7e+2c2]      [HSO_timeH] = [[Rtab]+Mphtim2H];
8 33a1: b4,52,82             adcb  R82,R52            [HSO_timeH] += R52 + CY;
8 33a4: a3,92,08,50          ldw   R50,[R92+8]        R50 = [[TPtr]+8];    
8 33a8: 09,01,50             shlw  R50,1              R50 = R50 * 2;       
8 33ab: 65,98,01,50          ad2w  R50,198            R50 += 198;          
8 33af: 65,96,01,54          ad2w  R54,196            R54 += 196;          
8 33b3: a2,54,54             ldw   R54,[R54]          R54 = [R54];         
8 33b6: 11,52                clrb  R52                R52 = 0;             
8 33b8: 4a,50,54,5a          sb3w  R5a,R54,[R50]      R5a = R54 - [R50];   
8 33bc: c2,50,54             stw   [R50],R54          [R50] = R54;         
8 33bf: b8,00,52             sbbb  R52,0              R52 -= 0 - CY;       
8 33c2: 67,74,cc,5a          ad2w  R5a,[R74+cc]       R5a += [Fuel_sum_l]; 
8 33c6: b7,74,ce,52          adcb  R52,[R74+ce]       R52 += [Fuel_sum_h] + CY;
8 33ca: d5,06                jnv   33d2               if (!OV) goto 33d2;  
8 33cc: b1,7f,52             ldb   R52,7f             R52 = 7f;            
8 33cf: bd,ff,5a             ldsbw R5a,ff             R5a = (sig)ff;       
8 33d2: c3,74,cc,5a          stw   [R74+cc],R5a       [Fuel_sum_l] = R5a;  
8 33d6: c7,74,ce,52          stb   [R74+ce],R52       [Fuel_sum_h] = R52;  
8 33da: c9,4b,33             push  334b               push(Sub0116);       
//  Add for execution in 2284/2C5 Table                                               //
8 33dd: e7,7d,f0             jump  245d               goto Sched_HSO;      

8 33e0: f0                   ret                      return;              

HSO_continued:
8 33e1: b1,06,04             ldb   R04,6              AD_CMD = 6;          
//  EGR vac regulator OFF                                                             //
8 33e4: 71,fb,46             an2b  R46,fb             [IO_Port_State] &= fb;
8 33e7: 98,00,d3             cmpb  Rd3,0                                   
//  EGR stuff done                                                                    //
8 33ea: df,2b                je    3417               if (Rd3 == 0) goto 3417;
8 33ec: b3,74,a6,52          ldb   R52,[R74+a6]       R52 = [Egrprf];      
8 33f0: b3,74,a5,54          ldb   R54,[R74+a5]       R54 = [Egrctf];      
8 33f4: 99,10,52             cmpb  R52,10                                  
8 33f7: db,08                jc    3401               if ((uns) R52 >= 10) goto 3401;
8 33f9: 77,74,a4,52          ad2b  R52,[R74+a4]       R52 += [Egrper];     
8 33fd: b3,74,a3,54          ldb   R54,[R74+a3]       R54 = [Egrcnt];      
8 3401: 98,00,54             cmpb  R54,0                                   
8 3404: df,06                je    340c               if (R54 == 0) goto 340c;
//  EGR vacuum regulator ON                                                           //
8 3406: 91,04,46             orrb  R46,4              [IO_Port_State] |= 4;
8 3409: 79,08,54             sb2b  R54,8              R54 -= 8;            
8 340c: 79,10,52             sb2b  R52,10             R52 -= 10;           
8 340f: c7,74,a6,52          stb   [R74+a6],R52       [Egrprf] = R52;      
8 3413: c7,74,a5,54          stb   [R74+a5],R54       [Egrctf] = R54;      

3417 - Sub 8 3417:
8 3417: 71,f7,46             an2b  R46,f7             [IO_Port_State] &= f7;
//  ISC Duty Cycle ?                                                                  //
8 341a: 44,00,b8,50          ad3w  R50,Rb8,0          R50 = [Iscdty] + 0;  
8 341e: df,0d                je    342d               if (R50 == 0) goto 342d;
//  IFREQ - $b8/256                                                                   //
8 3420: 78,51,b7             sb2b  Rb7,R51            [Ifreq] -= R51;      
8 3423: db,0a                jc    342f               if ([Ifreq] >= 0) goto 342f;
//  -ve, set to min ?                                                                 //
8 3425: 75,80,b7             ad2b  Rb7,80             [Ifreq] += 80;       
//  ISC ON                                                                            //
8 3428: 91,08,46             orrb  R46,8              [IO_Port_State] |= 8;
8 342b: 20,02                sjmp  342f               goto 342f;           

342d - Sub 8 342d:
8 342d: 11,b7                clrb  Rb7                [Ifreq] = 0;         
8 342f: 89,01,00,c6          cmpw  Rc6,1                                   
8 3433: d1,07                jleu  343c               if ((uns) [Dol_count] <= 1) goto 343c;
8 3435: 05,c6                decw  Rc6                [Dol_count]--;       
//  Toggle DOL state                                                                  //
8 3437: 95,02,46             xrb   R46,2              [IO_Port_State] ^= 2;
8 343a: 20,04                sjmp  3440               goto 3440;           

8 343c: a1,01,00,c6          ldw   Rc6,1              [Dol_count] = 1;     
8 3440: 33,d6,6e             jnb   B3,Rd6,34b1        if (!B3_[STO_flags]) goto 34b1;
8 3443: 30,d8,0b             jnb   B0,Rd8,3451        if (!B0_[Vip_flags3]) goto 3451;
8 3446: 91,10,d8             orrb  Rd8,10             [Vip_flags3] |= 10;  
//  block PIP interrupts ?                                                            //
8 3449: 71,7f,08             an2b  R08,7f             INT_MASK &= 7f;      
8 344c: 71,fe,d8             an2b  Rd8,fe             [Vip_flags3] &= fe;  
//  jump past STO stuff                                                               //
8 344f: 20,dd                sjmp  352e               goto 352e;           

8 3451: 34,d8,15             jnb   B4,Rd8,3469        if (!B4_[Vip_flags3]) goto 3469;
8 3454: 71,ef,d8             an2b  Rd8,ef             [Vip_flags3] &= ef;  
//  Allow PIP interrupts ?                                                            //
8 3457: 91,80,08             orrb  R08,80             INT_MASK |= 80;      
//  STO shift count (leftmost 1 bit at start)                                         //
8 345a: b3,76,10,56          ldb   R56,[R76+10]       R56 = [Sto_shift_cnt];
//  loop if bits left to output                                                       //
8 345e: e0,56,43             djnz  R56,34a4           R56--; if (R56 !=  0) goto 34a4;
8 3461: 71,f7,d6             an2b  Rd6,f7             [STO_flags] &= f7;   
//  Self Test Output trigger set - to turn off STO                                    //
8 3464: 3a,2b,4d             jb    B2,R2b,34b4        if (B2_[Flags_2B]) goto 34b4;
8 3467: 20,be                sjmp  3527               goto 3527;           

3469 - Sub 8 3469:
8 3469: 48,8c,06,84          sb3w  R84,R06,R8c        R84 = IO_TIMER - [Reftime];
8 346d: 64,84,8c             ad2w  R8c,R84            [Reftime] += R84;    
//  Update 24 bit master reference time                                               //
8 3470: b4,00,8e             adcb  R8e,0              [ReftimeH] += 0 + CY;
//  Hi 8 bits of current time                                                         //
8 3473: b0,8e,54             ldb   R54,R8e            R54 = [ReftimeH];    
8 3476: b3,76,0f,55          ldb   R55,[R76+f]        R55 = [Sto_high_time];
8 347a: b0,55,56             ldb   R56,R55            R56 = R55;           
//  current master time - RDA(STO time)                                               //
8 347d: 48,8c,da,50          sb3w  R50,Rda,R8c        R50 = [Sto_time] - [Reftime];
//  R56 = STO time - current time (hi bytes)                                          //
8 3481: b8,54,56             sbbb  R56,R54            R56 -= R54 - CY;     
8 3484: d7,1c                jne   34a2               if (R56 != 0) goto 34a2;
8 3486: 89,e3,04,50          cmpw  R50,4e3                                 
//  jump if time remaining till STO > 3 mS                                            //
8 348a: d9,16                jgtu  34a2               if ((uns) R50 > 4e3) goto 34a2;
//  set HSO time                                                                      //
8 348c: 44,50,8c,0e          ad3w  R0e,R8c,R50        HSO_TIME = [Reftime] + R50;
//  set HSO chan 10 off + interrupt                                                   //
8 3490: b1,2a,0d             ldb   R0d,2a             HSO_CMD = 2a;        
//  IO time for each trouble code bit at selected output speed                        //
8 3493: 67,76,0a,da          ad2w  Rda,[R76+a]        [Sto_time] += [Sto_delay];
//  IO time for each trouble code bit at selected output speed                        //
8 3497: b7,76,0e,55          adcb  R55,[R76+e]        R55 += [Sto_high_delay] + CY;
//  STO high 8 bits time                                                              //
8 349b: c7,76,0f,55          stb   [R76+f],R55        [Sto_high_time] = R55;
//  set bit 0 of RD8 flag STO HOLDOFF (time to change to next bit? )                  //
8 349f: 91,01,d8             orrb  Rd8,1              [Vip_flags3] |= 1;   
8 34a2: 20,8a                sjmp  352e               goto 352e;           

34a4 - Sub 8 34a4:
8 34a4: c7,76,10,56          stb   [R76+10],R56       [Sto_shift_cnt] = R56;
//  STO SHIFT - shifted trouble code                                                  //
8 34a8: a3,76,0c,52          ldw   R52,[R76+c]        R52 = [Sto_shift];   
//  next output bit? RIGHT SHIFT? SB left shift                                       //
8 34ac: 08,01,52             shrw  R52,1              R52 = R52 / 2;       
//  set STO hi/lo based on R52 bit 0                                                  //
8 34af: 20,70                sjmp  3521               goto 3521;           

34b1 - Sub 8 34b1:
8 34b1: 32,2b,7a             jnb   B2,R2b,352e        if (!B2_[Flags_2B]) goto 352e;

34b4 - Sub 8 34b4:
8 34b4: 3d,d6,11             jb    B5,Rd6,34c8        if (B5_[STO_flags]) goto 34c8;
//  R52 = 0 - set STO off                                                             //
8 34b7: 01,52                clrw  R52                R52 = 0;             
8 34b9: 37,d6,02             jnb   B7,Rd6,34be        if (!B7_[STO_flags]) goto 34be;
//  R52 = 1 - set STO on                                                              //
8 34bc: 07,52                incw  R52                R52++;               
8 34be: 36,d6,02             jnb   B6,Rd6,34c3        if (!B6_[STO_flags]) goto 34c3;
//  R52 = 0 - set STO off                                                             //
8 34c1: 01,52                clrw  R52                R52 = 0;             

34c3 - Sub 8 34c3:
8 34c3: 71,3f,d6             an2b  Rd6,3f             [STO_flags] &= 3f;   
//  jmp to set STO line hi/lo                                                         //
8 34c6: 20,56                sjmp  351e               goto 351e;           

34c8 - Sub 8 34c8:
8 34c8: 71,df,d6             an2b  Rd6,df             [STO_flags] &= df;   
//  set RD6 bit 3 working                                                             //
8 34cb: 91,08,d6             orrb  Rd6,8              [STO_flags] |= 8;    
//  Self Test Trouble code                                                            //
8 34ce: a0,d4,52             ldw   R52,Rd4            R52 = [Vip_code];    
//  16 bit trouble code?                                                              //
8 34d1: b1,10,56             ldb   R56,10             R56 = 10;            
8 34d4: 31,d9,0d             jnb   B1,Rd9,34e4        if (!B1_[Vip_flags4]) goto 34e4;
8 34d7: 71,fd,d9             an2b  Rd9,fd             [Vip_flags4] &= fd;  

34da - Sub 8 34da:
8 34da: 09,01,d4             shlw  Rd4,1              [Vip_code] = [Vip_code] * 2;
//  leftmost 1 bit just shifted out                                                   //
8 34dd: db,03                jc    34e2               if ([Vip_code] * 2 > ffff) goto 34e2;
//  decr 16 bit count of left most 1 bit                                              //
8 34df: e0,56,f8             djnz  R56,34da           R56--; if (R56 !=  0) goto 34da;

34e2 - Sub 8 34e2:
8 34e2: 17,56                incb  R56                R56++;               

34e4 - Sub 8 34e4:
8 34e4: c7,76,10,56          stb   [R76+10],R56       [Sto_shift_cnt] = R56;
8 34e8: a1,cd,2d,50          ldw   R50,2dcd           R50 = 2dcd;          
//  STO 'slow', 0x32dcd=0.5 secs                                                      //
8 34ec: b1,03,54             ldb   R54,3              R54 = 3;             
8 34ef: 34,d6,06             jnb   B4,Rd6,34f8        if (!B4_[STO_flags]) goto 34f8;
8 34f2: a1,23,08,50          ldw   R50,823            R50 = 823;           
//  STO 'fast', 0x823=5 millisecs                                                     //
8 34f6: 11,54                clrb  R54                R54 = 0;             
8 34f8: 34,2c,06             jnb   B4,R2c,3501        if (!B4_[Flags_2C]) goto 3501;
8 34fb: a1,41,03,50          ldw   R50,341            R50 = 341;           
//  STO 'hyper', 0x341=2 millisecs                                                    //
8 34ff: 11,54                clrb  R54                R54 = 0;             

3501 - Sub 8 3501:
8 3501: 48,8c,06,84          sb3w  R84,R06,R8c        R84 = IO_TIMER - [Reftime];
8 3505: 64,84,8c             ad2w  R8c,R84            [Reftime] += R84;    
8 3508: b4,00,8e             adcb  R8e,0              [ReftimeH] += 0 + CY;
8 350b: c3,76,0a,50          stw   [R76+a],R50        [Sto_delay] = R50;   
//  STO timer value                                                                   //
8 350f: c7,76,0e,54          stb   [R76+e],R54        [Sto_high_delay] = R54;
//  time for this next bit (lo 16)                                                    //
8 3513: 44,50,8c,da          ad3w  Rda,R8c,R50        [Sto_time] = [Reftime] + R50;
8 3517: b4,8e,54             adcb  R54,R8e            R54 += [ReftimeH] + CY;
//  hi 8 time for this next bit                                                       //
8 351a: c7,76,0f,54          stb   [R76+f],R54        [Sto_high_time] = R54;

351e - Sub 8 351e:
8 351e: 71,fb,2b             an2b  R2b,fb             [Flags_2B] &= fb;    

3521 - Sub 8 3521:
8 3521: 91,20,46             orrb  R46,20             [IO_Port_State] |= 20;
//  trouble code flg                                                                  //
8 3524: 38,52,03             jb    B0,R52,352a        if (B0_R52) goto 352a;

3527 - Sub 8 3527:
8 3527: 71,df,46             an2b  R46,df             [IO_Port_State] &= df;

352a - Sub 8 352a:
8 352a: c3,76,0c,52          stw   [R76+c],R52        [Sto_shift] = R52;   
8 352e: 71,df,2f             an2b  R2f,df             [Flags_2F] &= df;    
8 3531: 3f,a1,0d             jb    B7,Ra1,3541        if (B7_[a1_Flags]) goto 3541;
8 3534: 37,09,03             jnb   B7,R09,353a        if (!B7_INT_PEND) goto 353a;
8 3537: 38,0b,07             jb    B0,R0b,3541        if (B0_HSI_SAMP) goto 3541;

353a - Sub 8 353a:
8 353a: a3,74,06,52          ldw   R52,[R74+6]        R52 = [Last_HSO];    
8 353e: ef,e8,f7             call  2d29               MAF_rd_calc();       

3541 - Sub 8 3541:
8 3541: e0,9b,2b             djnz  R9b,356f           [Vsc_count]--; if ([Vsc_count] !=  0) goto 356f;
8 3544: 33,c4,0c             jnb   B3,Rc4,3553        if (!B3_[Vsc_flags]) goto 3553;
8 3547: b3,74,3a,9b          ldb   R9b,[R74+3a]       [Vsc_count] = [Vsc_off_count];
//  Speed Control Vacuum Off                                                          //
8 354b: 71,fe,46             an2b  R46,fe             [IO_Port_State] &= fe;
//  Speed Control Vent On                                                             //
8 354e: 91,10,46             orrb  R46,10             [IO_Port_State] |= 10;
8 3551: 20,0f                sjmp  3562               goto 3562;           

8 3553: b3,74,3b,9b          ldb   R9b,[R74+3b]       [Vsc_count] = [Vsc_on_count];

3557 - Sub 8 3557:
8 3557: 36,c4,05             jnb   B6,Rc4,355f        if (!B6_[Vsc_flags]) goto 355f;
//  TOGGLE Speed Control Vacuum                                                       //
8 355a: 95,01,46             xrb   R46,1              [IO_Port_State] ^= 1;
8 355d: 20,03                sjmp  3562               goto 3562;           

355f - Sub 8 355f:
8 355f: 95,10,46             xrb   R46,10             [IO_Port_State] ^= 10;
8 3562: 95,08,c4             xrb   Rc4,8              [Vsc_flags] ^= 8;    
8 3565: 98,9b,00             cmpb  0,R9b                                   
8 3568: d7,05                jne   356f               if (0 != [Vsc_count]) goto 356f;
8 356a: b1,0a,9b             ldb   R9b,a              [Vsc_count] = a;     
//  Loop back                                                                         //
8 356d: 27,e8                sjmp  3557               goto 3557;           

356f - Sub 8 356f:
8 356f: 71,fd,47             an2b  R47,fd             [Flags_47] &= fd;    
//  12B canister purge start period                                                   //
8 3572: 5b,72,ab,8d,50       sb3b  R50,R8d,[R72+ab]   R50 = R8d - [Start_purg_per];
//  12D canister purge on time                                                        //
8 3577: 9b,72,ad,50          cmpb  R50,[R72+ad]                            
8 357b: d3,0d                jnc   358a               if ((uns) R50 < [Purg_on_time]) goto 358a;
//  12E canister purge period                                                         //
8 357d: 9b,72,ae,50          cmpb  R50,[R72+ae]                            
8 3581: d3,0a                jnc   358d               if ((uns) R50 < [Purge_period]) goto 358d;
//  12B canister purge start period                                                   //
8 3583: c7,72,ab,8d          stb   [R72+ab],R8d       [Start_purg_per] = R8d;
//  canister purge enabled clear                                                      //
8 3587: 36,e9,03             jnb   B6,Re9,358d        if (!B6_[Flags_e9]) goto 358d;

358a - Sub 8 358a:
8 358a: 91,02,47             orrb  R47,2              [Flags_47] |= 2;     
8 358d: e7,64,f0             jump  25f4               goto Sub0045;        

Bap_inth:
8 3590: 71,fb,87             an2b  R87,fb             [New_irqs] &= fb;    
//  time of last read                                                                 //
8 3593: 4b,74,02,7a,50       sb3w  R50,R7a,[R74+2]    R50 = [Event_time] - [Last_bap];
//  delta time since last BP read                                                     //
8 3598: c3,72,8a,50          stw   [R72+8a],R50       [BAP_Intvl] = R50;   
//  update last time read                                                             //
8 359c: c3,74,02,7a          stw   [R74+2],R7a        [Last_bap] = [Event_time];
8 35a0: b0,b6,50             ldb   R50,Rb6            R50 = [Bapcnt];      
8 35a3: 17,50                incb  R50                R50++;               
//  why not just incb directly ?                                                      //
8 35a5: c4,b6,50             stb   Rb6,R50            [Bapcnt] = R50;      
//  new BP calc reqd ?                                                                //
8 35a8: 91,40,4e             orrb  R4e,40             [Flags_4E] |= 40;    
8 35ab: f0                   ret                      return;              

subyteLU:
8 35ac: 91,20,ee             orrb  Ree,20             [Flags_ee] |= 20;    
8 35af: 20,06                sjmp  35b7               goto UUbyteLu;       

SSByteLU:
8 35b1: 91,20,ee             orrb  Ree,20             [Flags_ee] |= 20;    

USByteLU:
8 35b4: 91,10,ee             orrb  Ree,10             [Flags_ee] |= 10;    

UUbyteLu:
8 35b7: 9b,32,02,34          cmpb  R34,[R32+2]                             
//  Signed input                                                                      //
8 35bb: 3d,ee,04             jb    B5,Ree,35c2        if (B5_[Flags_ee]) goto 35c2;
8 35be: db,0a                jc    35ca               if (R32 > ffff) goto 35ca;
8 35c0: 20,02                sjmp  35c4               goto 35c4;           

8 35c2: d6,06                jge   35ca               if ((sig) R34 >= [R32+2]) goto 35ca;
8 35c4: 65,02,00,32          ad2w  R32,2              R32 += 2;            
8 35c8: 27,ed                sjmp  35b7               goto UUbyteLu;       

35ca - Sub 8 35ca:
8 35ca: 71,df,ee             an2b  Ree,df             [Flags_ee] &= df;    
//  Get values above and below i/p val                                                //
8 35cd: b2,33,36             ldb   R36,[R32++]        R36 = [R32++];       
8 35d0: b2,33,38             ldb   R38,[R32++]        R38 = [R32++];       
8 35d3: 7a,32,36             sb2b  R36,[R32]          R36 -= [R32];        
8 35d6: 7a,33,34             sb2b  R34,[R32++]        R34 -= [R32++];      
8 35d9: 7a,32,38             sb2b  R38,[R32]          R38 -= [R32];        
8 35dc: 3c,ee,04             jb    B4,Ree,35e3        if (B4_[Flags_ee]) goto 35e3;
8 35df: db,09                jc    35ea               if (R38 > ff) goto 35ea;
8 35e1: 20,02                sjmp  35e5               goto 35e5;           

35e3 - Sub 8 35e3:
8 35e3: d6,05                jge   35ea               if ((sig) R38 >= 0) goto 35ea;
8 35e5: 91,20,ee             orrb  Ree,20             [Flags_ee] |= 20;    
8 35e8: 13,38                negb  R38                R38 = -R38;          
8 35ea: 7c,34,38             ml2b  R38,R34            R38 *= R34;          
8 35ed: 9c,36,38             divb  R38,R36            R38 = R38W / R36;    
//  Negative, fix sign                                                                //
8 35f0: 35,ee,02             jnb   B5,Ree,35f5        if (!B5_[Flags_ee]) goto 35f5;
8 35f3: 13,38                negb  R38                R38 = -R38;          

35f5 - Sub 8 35f5:
8 35f5: 76,32,38             ad2b  R38,[R32]          R38 += [R32];        
8 35f8: 11,39                clrb  R39                R39 = 0;             
8 35fa: 71,df,ee             an2b  Ree,df             [Flags_ee] &= df;    
//  cleanup                                                                           //
8 35fd: 71,ef,ee             an2b  Ree,ef             [Flags_ee] &= ef;    
8 3600: f0                   ret                      return;              

SUWordLU:
8 3601: 91,20,ee             orrb  Ree,20             [Flags_ee] |= 20;    
8 3604: 20,06                sjmp  360c               goto UUWordLu;       

SSWordLU:
8 3606: 91,20,ee             orrb  Ree,20             [Flags_ee] |= 20;    
8 3609: 91,10,ee             orrb  Ree,10             [Flags_ee] |= 10;    

UUWordLu:
8 360c: 8b,32,04,34          cmpw  R34,[R32+4]                             
8 3610: 3d,ee,04             jb    B5,Ree,3617        if (B5_[Flags_ee]) goto 3617;
8 3613: db,0a                jc    361f               if (R32 > ffff) goto 361f;
8 3615: 20,02                sjmp  3619               goto 3619;           

8 3617: d6,06                jge   361f               if ((sig) R34 >= [R32+4]) goto 361f;
8 3619: 65,04,00,32          ad2w  R32,4              R32 += 4;            
8 361d: 27,ed                sjmp  360c               goto UUWordLu;       

8 361f: 71,df,ee             an2b  Ree,df             [Flags_ee] &= df;    
8 3622: a2,33,36             ldw   R36,[R32++]        R36 = [R32++];       
8 3625: a2,33,38             ldw   R38,[R32++]        R38 = [R32++];       
8 3628: 6a,32,36             sb2w  R36,[R32]          R36 -= [R32];        
8 362b: 6a,33,34             sb2w  R34,[R32++]        R34 -= [R32++];      
8 362e: 6a,32,38             sb2w  R38,[R32]          R38 -= [R32];        
8 3631: 3c,ee,04             jb    B4,Ree,3638        if (B4_[Flags_ee]) goto 3638;
8 3634: db,09                jc    363f               if (R38 > ffff) goto 363f;
8 3636: 20,02                sjmp  363a               goto 363a;           

8 3638: d6,05                jge   363f               if ((sig) R38 >= 0) goto 363f;
8 363a: 91,20,ee             orrb  Ree,20             [Flags_ee] |= 20;    
8 363d: 03,38                negw  R38                R38 = -R38;          
8 363f: 6c,34,38             ml2w  R38,R34            R38 *= R34;          
8 3642: 8c,36,38             divw  R38,R36            R38 = R38L / R36;    
8 3645: 35,ee,02             jnb   B5,Ree,364a        if (!B5_[Flags_ee]) goto 364a;
8 3648: 03,38                negw  R38                R38 = -R38;          
8 364a: 66,32,38             ad2w  R38,[R32]          R38 += [R32];        
8 364d: 71,df,ee             an2b  Ree,df             [Flags_ee] &= df;    
8 3650: 71,ef,ee             an2b  Ree,ef             [Flags_ee] &= ef;    
8 3653: f0                   ret                      return;              

Srolav3T:
8 3654: 28,3f                scall 3695               Get_par();           
//  OLD sensor value                                                                  //
8 3656: a2,3c,32             ldw   R32,[R3c]          R32 = [R3c];         
8 3659: 28,3a                scall 3695               Get_par();           
//  NEW sensor value                                                                  //
8 365b: a2,3c,34             ldw   R34,[R3c]          R34 = [R3c];         

Srolav1T:
8 365e: 28,35                scall 3695               Get_par();           
//  filter value                                                                      //
8 3660: a2,3c,36             ldw   R36,[R3c]          R36 = [R3c];         

Urolav:
8 3663: 28,53                scall 36b8               Calc_FFact();        

Srolav:
8 3665: b1,02,42             ldb   R42,2              R42 = 2;             
8 3668: 20,04                sjmp  366e               goto 366e;           

FilterX:
8 366a: 28,4c                scall 36b8               Calc_FFact();        
//  flag as unsigned                                                                  //
8 366c: 11,42                clrb  R42                R42 = 0;             

366e - Sub 8 366e:
8 366e: 48,32,34,3c          sb3w  R3c,R34,R32        R3c = R34 - R32;     
//  jump if signed                                                                    //
8 3672: 31,42,04             jnb   B1,R42,3679        if (!B1_R42) goto 3679;
//  effectively +ve result (unsigned)                                                 //
8 3675: db,08                jc    367f               if (R42 > ff) goto 367f;
//  effectively -ve result (unsigned)                                                 //
8 3677: 20,02                sjmp  367b               goto 367b;           

3679 - Sub 8 3679:
8 3679: d6,04                jge   367f               if ((sig) R3c >= 0) goto 367f;

367b - Sub 8 367b:
8 367b: 17,42                incb  R42                R42++;               
//  reverse diff, so ABS (diff)                                                       //
8 367d: 03,3c                negw  R3c                R3c = -R3c;          

367f - Sub 8 367f:
8 367f: 6c,36,3c             ml2w  R3c,R36            R3c *= R36;          
//  neg scaled diff Hi 16 bits                                                        //
8 3682: 03,3e                negw  R3e                R3e = -R3e;          
//  jmp if scaled diff > 0000FFFF                                                     //
8 3684: d7,06                jne   368c               if (R3c != R3e) goto 368c;
//  neg scaled diff LO 16 bits                                                        //
8 3686: 03,3c                negw  R3c                R3c = -R3c;          
//  jmp - scaled diff is ZERO                                                         //
8 3688: df,07                je    3691               if (R3e == R3c) goto 3691;
//  any fraction to next whole num                                                    //
8 368a: 05,3e                decw  R3e                R3e--;               

368c - Sub 8 368c:
8 368c: 38,42,02             jb    B0,R42,3691        if (B0_R42) goto 3691;
8 368f: 03,3e                negw  R3e                R3e = -R3e;          

3691 - Sub 8 3691:
8 3691: 64,32,3e             ad2w  R3e,R32            R3e += R32;          
8 3694: f0                   ret                      return;              

Get_par:
8 3695: cc,38                pop   R38                R38 = pop();         
//  Caller subroutine's return addr                                                   //
8 3697: cc,3a                pop   R3a                R3a = pop();         
8 3699: b2,3b,3c             ldb   R3c,[R3a++]        R3c = [R3a++];       
//  3C = Word param from caller                                                       //
8 369c: b2,3b,3d             ldb   R3d,[R3a++]        R3d = [R3a++];       
//  restore caller address (+2)                                                       //
8 369f: c8,3a                push  R3a                push(R3a);           
//  restore this return address                                                       //
8 36a1: c8,38                push  R38                push(R38);           
//  return unchanged if top bit clear                                                 //
8 36a3: 37,3d,11             jnb   B7,R3d,36b7        if (!B7_R3d) goto 36b7;
//  = f0 register offset (R3c top byte)                                               //
8 36a6: ac,3d,38             ldzbw R38,R3d            R38 = (uns)R3d;      
//  clear reg offset (top nibble)                                                     //
8 36a9: 71,0f,3d             an2b  R3d,f              R3d &= f;            
//  top nibble down 3 (reg offset * 2)                                                //
8 36ac: 18,03,38             shrb  R38,3              R38 = R38 / 8;       
//  force even for register offset                                                    //
8 36af: 71,fe,38             an2b  R38,fe             R38 &= fe;           
//  return  (param & fff)+[e0+x*2]                                                    //
8 36b2: 67,39,e0,00,3c       ad2w  R3c,[R38+e0]       R3c += [R38+Inj_mode];
8 36b7: f0                   ret                      return;              

Calc_FFact:
8 36b8: 38,ca,04             jb    B0,Rca,36bf        if (B0_[Flag_ca]) goto 36bf;
//  Background Loop Timer                                                             //
8 36bb: af,74,5e,3e          ldzbw R3e,[R74+5e]       R3e = (uns)[Bg_timer];
8 36bf: 71,fe,ca             an2b  Rca,fe             [Flag_ca] &= fe;     
8 36c2: 01,3c                clrw  R3c                R3c = 0;             
//  divisor + timer                                                                   //
8 36c4: 64,3e,36             ad2w  R36,R3e            R36 += R3e;          
8 36c7: d3,03                jnc   36cc               if (R36 <= ffff) goto 36cc;
//  clip to max FF                                                                    //
8 36c9: bd,ff,36             ldsbw R36,ff             R36 = (sig)ff;       
8 36cc: 8c,36,3c             divw  R3c,R36            R3c = R3cL / R36;    
8 36cf: d5,03                jnv   36d4               if (!OV) goto 36d4;  
//  clip to max on overflow?                                                          //
8 36d1: bd,ff,3c             ldsbw R3c,ff             R3c = (sig)ff;       
8 36d4: a0,3c,36             ldw   R36,R3c            R36 = R3c;           
8 36d7: f0                   ret                      return;              


//  Signed scaled Table (not used)                                                    //
8 36d8: 91,80,2d                                      Unknown Operation/Structure


UTabLu16:
8 36db: 11,31                clrb  R31                R31 = 0;             
//  Byte param A * 16                                                                 //
8 36dd: 09,04,30             shlw  R30,4              R30 = R30 * 10;      
8 36e0: 11,33                clrb  R33                R33 = 0;             
//  Byte param B * 16                                                                 //
8 36e2: 09,04,32             shlw  R32,4              R32 = R32 * 10;      
8 36e5: 20,03                sjmp  36ea               goto UTabLookUp;     

STabLookup:
8 36e7: 91,80,2d             orrb  R2d,80             [Flags_2D] |= 80;    

UTabLookUp:
8 36ea: 5c,33,34,36          ml3b  R36,R34,R33        R36 = R34 * R33;     
8 36ee: 74,31,36             ad2b  R36,R31            R36 += R31;          
8 36f1: d3,02                jnc   36f5               if (R36 <= ff) goto 36f5;
8 36f3: 17,37                incb  R37                R37++;               
8 36f5: 64,36,38             ad2w  R38,R36            R38 += R36;          
8 36f8: b2,39,31             ldb   R31,[R38++]        R31 = [R38++];       
8 36fb: b2,38,33             ldb   R33,[R38]          R33 = [R38];         
8 36fe: 28,1f                scall 371f               TabInterp();         
8 3700: 64,34,38             ad2w  R38,R34            R38 += R34;          
8 3703: b2,38,33             ldb   R33,[R38]          R33 = [R38];         
8 3706: 05,38                decw  R38                R38--;               
8 3708: b2,38,31             ldb   R31,[R38]          R31 = [R38];         
8 370b: b0,3b,34             ldb   R34,R3b            R34 = R3b;           
8 370e: 28,0f                scall 371f               TabInterp();         
8 3710: b0,3b,33             ldb   R33,R3b            R33 = R3b;           
8 3713: b0,34,31             ldb   R31,R34            R31 = R34;           
8 3716: b0,32,30             ldb   R30,R32            R30 = R32;           
8 3719: 28,04                scall 371f               TabInterp();         
8 371b: 71,7f,2d             an2b  R2d,7f             [Flags_2D] &= 7f;    
8 371e: f0                   ret                      return;              

TabInterp:
8 371f: 37,2d,1a             jnb   B7,R2d,373c        if (!B7_[Flags_2D]) goto 373c;
//  SIGNED interpolate calc                                                           //
8 3722: bc,33,3a             ldsbw R3a,R33            R3a = (sig)R33;      
8 3725: bc,31,3c             ldsbw R3c,R31            R3c = (sig)R31;      
8 3728: 68,3c,3a             sb2w  R3a,R3c            R3a -= R3c;          
8 372b: ac,30,3c             ldzbw R3c,R30            R3c = (uns)R30;      
8 372e: fe,6c,3a,3c          sml2w  R3c,R3a           R3c *= (sig)R3a;     
8 3732: c0,3a,3c             stw   R3a,R3c            R3a = R3c;           
8 3735: 74,31,3b             ad2b  R3b,R31            R3b += R31;          
8 3738: 37,3b,0f             jnb   B7,R3b,374a        if (!B7_R3b) goto 374a;
8 373b: f0                   ret                      return;              

373c - Sub 8 373c:
8 373c: 5c,33,30,3a          ml3b  R3a,R30,R33        R3a = R30 * R33;     
8 3740: 5c,31,30,36          ml3b  R36,R30,R31        R36 = R30 * R31;     
8 3744: 68,36,3a             sb2w  R3a,R36            R3a -= R36;          
8 3747: 74,31,3b             ad2b  R3b,R31            R3b += R31;          
8 374a: 65,80,00,3a          ad2w  R3a,80             R3a += 80;           
8 374e: f0                   ret                      return;              

Check_Timers:
8 374f: 9b,fe,04,ad          cmpb  Rad,[Rfe+4]                             
8 3753: de,07                jlt   375c               if ((sig) [Tcstrt] < [CThigh]) goto 375c;
8 3755: 9a,30,c8             cmpb  Rc8,[R30]                               
8 3758: d3,2a                jnc   3784               if ((uns) [Atmr1] < [R30]) goto 3784;
8 375a: 20,26                sjmp  3782               goto 3782;           

8 375c: 07,30                incw  R30                R30++;               
8 375e: 9b,fe,05,ad          cmpb  Rad,[Rfe+5]                             
8 3762: da,0e                jle   3772               if ((sig) [Tcstrt] <= [CtLow]) goto 3772;
8 3764: 9a,30,c8             cmpb  Rc8,[R30]                               
8 3767: d3,1b                jnc   3784               if ((uns) [Atmr1] < [R30]) goto 3784;
8 3769: 07,30                incw  R30                R30++;               
8 376b: 9a,30,c9             cmpb  Rc9,[R30]                               
8 376e: d3,14                jnc   3784               if ((uns) [Atmr2] < [R30]) goto 3784;
8 3770: 20,10                sjmp  3782               goto 3782;           

8 3772: 07,30                incw  R30                R30++;               
8 3774: 07,30                incw  R30                R30++;               
8 3776: 9a,30,c8             cmpb  Rc8,[R30]                               
8 3779: d3,09                jnc   3784               if ((uns) [Atmr1] < [R30]) goto 3784;
8 377b: 07,30                incw  R30                R30++;               
8 377d: 9a,30,c9             cmpb  Rc9,[R30]                               
8 3780: d3,02                jnc   3784               if ((uns) [Atmr2] < [R30]) goto 3784;
8 3782: f8                   clc                      CY = 0;              
8 3783: f0                   ret                      return;              

8 3784: f9                   stc                      CY = 1;              
8 3785: f0                   ret                      return;              

set_rpm_flgs:
8 3786: 71,ef,e9             an2b  Re9,ef             [Flags_e9] &= ef;    
8 3789: 37,a1,21             jnb   B7,Ra1,37ad        if (!B7_[a1_Flags]) goto 37ad;
8 378c: 8b,fa,1a,ae          cmpw  Rae,[Rfa+1a]                            
//  (225 RPM)                                                                         //
8 3790: d1,14                jleu  37a6               if ((uns) [Rpmx4] <= [225_RPM]) goto 37a6;
8 3792: b1,08,14             ldb   R14,8              R14 = 8;             
8 3795: 9b,74,e7,14          cmpb  R14,[R74+e7]                            
//  ECTCNT <=8 ?                                                                      //
8 3799: d9,09                jgtu  37a4               if ((uns) R14 > [Ectcnt]) goto 37a4;
8 379b: 9b,fa,14,b4          cmpb  Rb4,[Rfa+14]                            
8 379f: d3,03                jnc   37a4               if ((uns) [Pipcnt] < [Sc0093]) goto 37a4;
//  RPM>225, ECTCNT<=8, PIPCNT>8, clear CRANKING                                      //
8 37a1: 71,7f,a1             an2b  Ra1,7f             [a1_Flags] &= 7f;    
8 37a4: 20,40                sjmp  37e6               goto 37e6;           

37a6 - Sub 8 37a6:
8 37a6: 11,b4                clrb  Rb4                [Pipcnt] = 0;        
8 37a8: 71,ef,2f             an2b  R2f,ef             [Flags_2F] &= ef;    
//  set underspeed and exit                                                           //
8 37ab: 20,39                sjmp  37e6               goto 37e6;           

37ad - Sub 8 37ad:
8 37ad: 11,b4                clrb  Rb4                [Pipcnt] = 0;        
8 37af: 8b,fa,1c,ae          cmpw  Rae,[Rfa+1c]                            
8 37b3: db,11                jc    37c6               if ((uns) [Rpmx4] >= [Sc0095]) goto 37c6;
//  RPM < 50                                                                          //
8 37b5: 91,80,a1             orrb  Ra1,80             [a1_Flags] |= 80;    
8 37b8: 91,10,e9             orrb  Re9,10             [Flags_e9] |= 10;    
8 37bb: c7,74,e7,00          stb   [R74+e7],0         [Ectcnt] = 0;        
8 37bf: 01,ac                clrw  Rac                [Tcstrl] = 0;        
//  set cranking and other flags                                                      //
8 37c1: 71,ef,2f             an2b  R2f,ef             [Flags_2F] &= ef;    
8 37c4: 20,20                sjmp  37e6               goto 37e6;           

37c6 - Sub 8 37c6:
8 37c6: a3,fa,16,30          ldw   R30,[Rfa+16]       R30 = [200rpm];      
8 37ca: 88,ae,30             cmpw  R30,Rae                                 
8 37cd: d1,02                jleu  37d1               if ((uns) R30 <= [Rpmx4]) goto 37d1;
//  RPM < 200, Underspeed limit low, set underspeed                                   //
8 37cf: 20,15                sjmp  37e6               goto 37e6;           

37d1 - Sub 8 37d1:
8 37d1: 67,fa,18,30          ad2w  R30,[Rfa+18]       R30 += [Sc0094];     
8 37d5: 88,ae,30             cmpw  R30,Rae                                 
//  RPM < 300, Underspeed limit high, exit                                            //
8 37d8: db,0a                jc    37e4               if ((uns) R30 >= [Rpmx4]) goto 37e4;
8 37da: fa                   di                       disable ints;        
8 37db: ff                   ff                                            
8 37dc: 32,a1,05             jnb   B2,Ra1,37e4        if (!B2_[a1_Flags]) goto 37e4;
//  RPM > 300 clear underspeed if set                                                 //
8 37df: 71,fb,a1             an2b  Ra1,fb             [a1_Flags] &= fb;    
8 37e2: 20,0a                sjmp  37ee               goto 37ee;           

8 37e4: fb                   ei                       enable ints;         
8 37e5: f0                   ret                      return;              

8 37e6: fa                   di                       disable ints;        
8 37e7: ff                   ff                                            
8 37e8: 3a,a1,06             jb    B2,Ra1,37f1        if (B2_[a1_Flags]) goto 37f1;
//  set underspeed if necessary                                                       //
8 37eb: 91,04,a1             orrb  Ra1,4              [a1_Flags] |= 4;     

37ee - Sub 8 37ee:
8 37ee: 91,02,2d             orrb  R2d,2              [Flags_2D] |= 2;     
8 37f1: fb                   ei                       enable ints;         
8 37f2: f0                   ret                      return;              

Update_WOT:
8 37f3: 71,7f,e9             an2b  Re9,7f             [Flags_e9] &= 7f;    
8 37f6: a3,72,a6,36          ldw   R36,[R72+a6]       R36 = [TPS_Min__#_was__TPS_Ratch];
//  Min+delta                                                                         //
8 37fa: 47,fa,02,36,38       ad3w  R38,R36,[Rfa+2]    R38 = R36 + [Tp_Delta];
//  Min>=delta, clr WOT                                                               //
8 37ff: db,3a                jc    383b               if (R38 > ffff) goto 383b;
8 3801: 88,38,aa             cmpw  Raa,R38                                 
//  TP <= max,  clr WOT                                                               //
8 3804: d1,35                jleu  383b               if ((uns) RTP <= R38) goto 383b;
//  hysterysis?                                                                       //
8 3806: 67,fa,06,38          ad2w  R38,[Rfa+6]        R38 += [TP_Hysts];   
8 380a: db,05                jc    3811               if (R38 > ffff) goto 3811;
8 380c: 88,38,aa             cmpw  Raa,R38                                 
//  TP > RATCH + DELTA + HYSTS                                                        //
8 380f: d9,03                jgtu  3814               if ((uns) RTP > R38) goto 3814;

3811 - Sub 8 3811:
8 3811: 3f,d0,39             jb    B7,Rd0,384d        if (B7_[Apt]) goto 384d;
8 3814: 37,d0,03             jnb   B7,Rd0,381a        if (!B7_[Apt]) goto 381a;
8 3817: 91,80,e9             orrb  Re9,80             [Flags_e9] |= 80;    

381a - Sub 8 381a:
8 381a: 67,fa,08,36          ad2w  R36,[Rfa+8]        R36 += [Wotbrkv];    
8 381e: db,22                jc    3842               if (R36 > ffff) goto 3842;
8 3820: 88,36,aa             cmpw  Raa,R36                                 
8 3823: d1,1d                jleu  3842               if ((uns) RTP <= R36) goto 3842;
8 3825: 67,fa,04,36          ad2w  R36,[Rfa+4]        R36 += [Tp_Hysts2];  
8 3829: db,05                jc    3830               if (R36 > ffff) goto 3830;
8 382b: 88,36,aa             cmpw  Raa,R36                                 
//  set WOT                                                                           //
8 382e: d9,04                jgtu  3834               if ((uns) RTP > R36) goto 3834;
8 3830: 3f,d0,0f             jb    B7,Rd0,3842        if (B7_[Apt]) goto 3842;
8 3833: f0                   ret                      return;              

8 3834: b1,01,d0             ldb   Rd0,1              [Apt] = 1;           
8 3837: 91,01,24             orrb  R24,1              [Flags_24] |= 1;     
8 383a: f0                   ret                      return;              

8 383b: b1,ff,d0             ldb   Rd0,ff             [Apt] = ff;          
8 383e: 71,fe,24             an2b  R24,fe             [Flags_24] &= fe;    
8 3841: f0                   ret                      return;              

8 3842: 3f,a1,03             jb    B7,Ra1,3848        if (B7_[a1_Flags]) goto 3848;
8 3845: 91,10,2f             orrb  R2f,10             [Flags_2F] |= 10;    
8 3848: 11,d0                clrb  Rd0                [Apt] = 0;           
8 384a: 71,fe,24             an2b  R24,fe             [Flags_24] &= fe;    
8 384d: f0                   ret                      return;              

Update_AD:
8 384e: 36,e6,19             jnb   B6,Re6,386a        if (!B6_[Flags_e6]) goto 386a;
8 3851: 36,c5,05             jnb   B6,Rc5,3859        if (!B6_[Fmem_flags]) goto 3859;
8 3854: 91,04,c5             orrb  Rc5,4              [Fmem_flags] |= 4;   
//  jmp to ACT test                                                                   //
8 3857: 20,30                sjmp  3889               goto 3889;           

3859 - Sub 8 3859:
8 3859: 32,c5,2d             jnb   B2,Rc5,3889        if (!B2_[Fmem_flags]) goto 3889;
//  default EVP                                                                       //
8 385c: a1,80,a2,30          ldw   R30,a280           R30 = a280;          
//  filtered EVP saved in KAM                                                         //
8 3860: c3,01,ee,07,30       stw   [7ee],R30          [KEptzer] = R30;     
8 3865: 71,fb,c5             an2b  Rc5,fb             [Fmem_flags] &= fb;  
//  go to ACT test                                                                    //
8 3868: 20,1f                sjmp  3889               goto 3889;           

386a - Sub 8 386a:
8 386a: 3e,c5,14             jb    B6,Rc5,3881        if (B6_[Fmem_flags]) goto 3881;
//  raw EVP 116                                                                       //
8 386d: a3,72,96,30          ldw   R30,[R72+96]       R30 = [EVP_Raw];     
8 3871: 8b,f3,b2,00,30       cmpw  R30,[Rf2+b2]                            
8 3876: d9,11                jgtu  3889               if ((uns) R30 > [Evpmax]) goto 3889;
8 3878: 8b,f3,b0,00,30       cmpw  R30,[Rf2+b0]                            
//  OK, use as new value                                                              //
8 387d: db,06                jc    3885               if ((uns) R30 >= [Evpmin]) goto 3885;
//  go to ACT test                                                                    //
8 387f: 20,08                sjmp  3889               goto 3889;           

3881 - Sub 8 3881:
8 3881: a3,72,a8,30          ldw   R30,[R72+a8]       R30 = [EVP_Def];     
8 3885: c3,72,f0,30          stw   [R72+f0],R30       [Evp] = R30;         

3889 - Sub 8 3889:
8 3889: 3d,c5,1d             jb    B5,Rc5,38a9        if (B5_[Fmem_flags]) goto 38a9;
8 388c: a3,72,94,30          ldw   R30,[R72+94]       R30 = [ACT_Raw];     
8 3890: 8b,f2,6a,30          cmpw  R30,[Rf2+6a]                            
8 3894: d9,13                jgtu  38a9               if ((uns) R30 > [Actmax]) goto 38a9;
8 3896: 8b,f2,68,30          cmpw  R30,[Rf2+68]                            
8 389a: d3,0d                jnc   38a9               if ((uns) R30 < [Actmin]) goto 38a9;
//  AD to degrees F                                                                   //
8 389c: 45,b0,01,f0,32       ad3w  R32,Rf0,1b0        R32 = Fn703A;        
//  input for ACT calc (addr= 115)                                                    //
8 38a1: b3,72,95,34          ldb   R34,[R72+95]       R34 = [115];         
8 38a5: 2d,0d                scall 35b4               USByteLU();          
//  R38 is our new ACT                                                                //
8 38a7: 20,0f                sjmp  38b8               goto 38b8;           

38a9 - Sub 8 38a9:
8 38a9: 39,ef,05             jb    B1,Ref,38b1        if (B1_[Flags_ef]) goto 38b1;
8 38ac: b0,b0,38             ldb   R38,Rb0            R38 = [ECT];         
//  use ECT as ACT                                                                    //
8 38af: 20,07                sjmp  38b8               goto 38b8;           

38b1 - Sub 8 38b1:
8 38b1: 35,c5,07             jnb   B5,Rc5,38bb        if (!B5_[Fmem_flags]) goto 38bb;
//  Default ACT ?                                                                     //
8 38b4: b3,f6,7f,38          ldb   R38,[Rf6+7f]       R38 = [Sc0068];      
8 38b8: b0,38,b1             ldb   Rb1,R38            [ACT] = R38;         
8 38bb: 3f,c5,1e             jb    B7,Rc5,38dc        if (B7_[Fmem_flags]) goto 38dc;
8 38be: a3,72,92,30          ldw   R30,[R72+92]       R30 = [ECT_Raw];     
8 38c2: 8b,f3,80,00,30       cmpw  R30,[Rf2+80]                            
8 38c7: d9,13                jgtu  38dc               if ((uns) R30 > [Ectmax]) goto 38dc;
8 38c9: 8b,f2,7e,30          cmpw  R30,[Rf2+7e]                            
//  BAD sensor                                                                        //
8 38cd: d3,0d                jnc   38dc               if ((uns) R30 < [Ectmin]) goto 38dc;
//  AD to degrees F                                                                   //
8 38cf: 45,b0,01,f0,32       ad3w  R32,Rf0,1b0        R32 = Fn703A;        
//  Input for ECT calc  (addr=113)                                                    //
8 38d4: b3,72,93,34          ldb   R34,[R72+93]       R34 = [113];         
8 38d8: 2c,da                scall 35b4               USByteLU();          
8 38da: 20,22                sjmp  38fe               goto 38fe;           

38dc - Sub 8 38dc:
8 38dc: b0,b1,38             ldb   R38,Rb1            R38 = [ACT];         
8 38df: 3f,a1,1c             jb    B7,Ra1,38fe        if (B7_[a1_Flags]) goto 38fe;
8 38e2: 9b,fe,04,ad          cmpb  Rad,[Rfe+4]                             
8 38e6: de,08                jlt   38f0               if ((sig) [Tcstrt] < [CThigh]) goto 38f0;
8 38e8: 9b,fc,0e,c8          cmpb  Rc8,[Rfc+e]                             
8 38ec: d3,10                jnc   38fe               if ((uns) [Atmr1] < [Sc0112]) goto 38fe;
8 38ee: 20,06                sjmp  38f6               goto 38f6;           

8 38f0: 9b,fc,0f,c8          cmpb  Rc8,[Rfc+f]                             
8 38f4: d3,08                jnc   38fe               if ((uns) [Atmr1] < [Sc0113]) goto 38fe;
8 38f6: 37,c5,17             jnb   B7,Rc5,3910        if (!B7_[Fmem_flags]) goto 3910;
//  Default ECT value from ROM ? (75 deg ?)                                           //
8 38f9: b3,f7,80,00,38       ldb   R38,[Rf6+80]       R38 = [Sc0069];      

38fe - Sub 8 38fe:
8 38fe: bc,b0,32             ldsbw R32,Rb0            R32 = (sig)[ECT];    
//  new ECT value to filter and save                                                  //
8 3901: bc,38,34             ldsbw R34,R38            R34 = (sig)R38;      
//  R38 = R38 * 256                                                                   //
8 3904: 09,08,38             shlw  R38,8              R38 = R38 * 100;     
//  filter factor                                                                     //
8 3907: a3,fa,44,36          ldw   R36,[Rfa+44]       R36 = [Sc0108];      
//  FILTER (factor times difference added back)                                       //
8 390b: 2d,5d                scall 366a               FilterX();           
//  Filterd Engine Coolant Temperature                                                //
8 390d: b0,3e,b0             ldb   Rb0,R3e            [ECT] = R3e;         

3910 - Sub 8 3910:
8 3910: a3,72,b4,14          ldw   R14,[R72+b4]       R14 = [Putmr];       
//  TKYON2 - compare whole seconds                                                    //
8 3914: 8b,f8,52,14          cmpw  R14,[Rf8+52]                            
//  jump timer <= ROM time                                                            //
8 3918: d1,15                jleu  392f               if ((uns) R14 <= [Sc0089]) goto 392f;
8 391a: b3,74,e7,14          ldb   R14,[R74+e7]       R14 = [Ectcnt];      
8 391e: 99,08,14             cmpb  R14,8                                   
//  jmp time <= 8 secs?                                                               //
8 3921: db,0c                jc    392f               if ((uns) R14 >= 8) goto 392f;
//  div by 8                                                                          //
8 3923: 0a,03,38             asrw  R38,3              R38 = R38 / 8;       
8 3926: 64,38,ac             ad2w  Rac,R38            [Tcstrl] += R38;     
//  incr putimer                                                                      //
8 3929: 17,14                incb  R14                R14++;               
8 392b: c7,74,e7,14          stb   [R74+e7],R14       [Ectcnt] = R14;      

392f - Sub 8 392f:
8 392f: 3c,c5,10             jb    B4,Rc5,3942        if (B4_[Fmem_flags]) goto 3942;
8 3932: a3,72,a2,30          ldw   R30,[R72+a2]       R30 = [TPS_Raw];     
8 3936: 8b,f2,70,30          cmpw  R30,[Rf2+70]                            
8 393a: d3,06                jnc   3942               if ((uns) R30 < [Tapmin]) goto 3942;
8 393c: 8b,f2,6e,30          cmpw  R30,[Rf2+6e]                            
8 3940: d1,23                jleu  3965               if ((uns) R30 <= [Tapmax]) goto 3965;
8 3942: a3,72,a6,30          ldw   R30,[R72+a6]       R30 = [TPS_Min__#_was__TPS_Ratch];
8 3946: 3f,a1,1c             jb    B7,Ra1,3965        if (B7_[a1_Flags]) goto 3965;
8 3949: 8b,f7,84,00,a2       cmpw  Ra2,[Rf6+84]                            
//  range error                                                                       //
8 394e: d3,15                jnc   3965               if ((uns) RAM < [Sc0071]) goto 3965;
//  TP sensor has failed ?                                                            //
8 3950: 34,c5,15             jnb   B4,Rc5,3968        if (!B4_[Fmem_flags]) goto 3968;
8 3953: a3,f0,02,30          ldw   R30,[Rf0+2]        R30 = [Sc0002];      
8 3957: c3,72,a6,30          stw   [R72+a6],R30       [TPS_Min__#_was__TPS_Ratch] = R30;
//  Change in TP if not at idle (as indicated by AM) To permit Part Throttle operation  //
8 395b: 67,f7,82,00,30       ad2w  R30,[Rf6+82]       R30 += [Sc0070];     
8 3960: d3,03                jnc   3965               if (R30 <= ffff) goto 3965;
//  default value                                                                     //
8 3962: bd,c0,30             ldsbw R30,c0             R30 = (sig)c0;       
8 3965: a0,30,aa             ldw   Raa,R30            RTP = R30;           

3968 - Sub 8 3968:
8 3968: a1,ae,a3,38          ldw   R38,a3ae           R38 = a3ae;          
//  read raw TAR sensor 120                                                           //
8 396c: 6b,72,a0,38          sb2w  R38,[R72+a0]       R38 -= [TAR_Raw];    
8 3970: db,02                jc    3974               if (R38 >= 0) goto 3974;
//  clamp to zero                                                                     //
8 3972: 01,38                clrw  R38                R38 = 0;             
8 3974: 6d,ae,bc,38          ml2w  R38,bcae           R38 *= bcae;         
8 3978: 0d,01,38             shldw R38,1              R38L = R38L * 2;     
//  round up                                                                          //
8 397b: 65,80,00,3a          ad2w  R3a,80             R3a += 80;           
//  TAR scaled and translated? 29E                                                    //
8 397f: c7,74,20,3b          stb   [R74+20],R3b       [Tar] = R3b;         
8 3983: 9b,f8,4b,00          cmpb  0,[Rf8+4b]                              
8 3987: d7,0a                jne   3993               if (0 != [Sc0085]) goto 3993;
8 3989: b3,f8,4c,14          ldb   R14,[Rf8+4c]       R14 = [Sc0086];      
8 398d: c7,74,80,14          stb   [R74+80],R14       RBp = R14;           
8 3991: 20,94                sjmp  3a27               goto 3a27;           

8 3993: 31,c5,09             jnb   B1,Rc5,399f        if (!B1_[Fmem_flags]) goto 399f;
8 3996: b3,f7,86,00,35       ldb   R35,[Rf6+86]       R35 = [Sc0072];      
//  filter R35 as new TP                                                              //
8 399b: 20,6c                sjmp  3a09               goto 3a09;           


//  Never gets here !                                                                 //
8 399d: 20,66                                         Unknown Operation/Structure


399f - Sub 8 399f:
8 399f: b3,72,b6,3a          ldb   R3a,[R72+b6]       R3a = [Baptmr];      
8 39a3: 9b,f3,16,01,3a       cmpb  R3a,[Rf2+116]                           
8 39a8: d9,77                jgtu  3a21               if ((uns) R3a > [Vbpmax]) goto 3a21;
8 39aa: a3,72,8a,1c          ldw   R1c,[R72+8a]       R1c = [BAP_Intvl];   
//  Faulty BAP?                                                                       //
8 39ae: 8b,f3,02,01,1c       cmpw  R1c,[Rf2+102]                           
8 39b3: d3,6c                jnc   3a21               if ((uns) R1c < [Vbpdl1]) goto 3a21;
8 39b5: 3f,a1,03             jb    B7,Ra1,39bb        if (B7_[a1_Flags]) goto 39bb;
8 39b8: 32,4e,4a             jnb   B2,R4e,3a05        if (!B2_[Flags_4E]) goto 3a05;
8 39bb: fa                   di                       disable ints;        
8 39bc: ff                   ff                                            
//  BP counts                                                                         //
8 39bd: ac,b6,1e             ldzbw R1e,Rb6            R1e = (uns)[Bapcnt]; 
//  time of last BP read                                                              //
8 39c0: a3,74,02,16          ldw   R16,[R74+2]        R16 = [Last_bap];    
//  reset count to zero                                                               //
8 39c4: 11,b6                clrb  Rb6                [Bapcnt] = 0;        
//  disallow odd BP counts                                                            //
8 39c6: 30,1e,07             jnb   B0,R1e,39d0        if (!B0_R1e) goto 39d0;
8 39c9: 15,1e                decb  R1e                R1e--;               
8 39cb: 17,b6                incb  Rb6                [Bapcnt]++;          
8 39cd: 68,1c,16             sb2w  R16,R1c            R16 -= R1c;          
8 39d0: fb                   ei                       enable ints;         
8 39d1: 98,1e,00             cmpb  0,R1e                                   
//  BP count == zero?                                                                 //
8 39d4: d6,2f                jge   3a05               if ((sig) 0 >= R1e) goto 3a05;
//  Time of last BP read - R18 is delta time?                                         //
8 39d6: 4b,72,bc,16,18       sb3w  R18,R16,[R72+bc]   R18 = R16 - [Mintim2];
8 39db: 01,1a                clrw  R1a                R1a = 0;             
8 39dd: 0d,01,18             shldw R18,1              R18L = R18L * 2;     
//  convert counts to freq by dividing by time                                        //
8 39e0: 8c,1e,18             divw  R18,R1e            R18 = R18L / R1e;    
8 39e3: a1,ab,9a,34          ldw   R34,9aab           R34 = 9aab;          
8 39e7: a1,5b,06,36          ldw   R36,65b            R36 = 65b;           
//  = 106666667/freq                                                                  //
8 39eb: 8c,18,34             divw  R34,R18            R34 = R34L / R18;    
//  Table 8C78 - conversion to atmo                                                   //
8 39ee: 45,78,00,f0,32       ad3w  R32,Rf0,78         R32 = Bapxfr;        
8 39f3: ef,16,fc             call  360c               UUWordLu();          
//  round up to save byte vs word                                                     //
8 39f6: 65,80,00,38          ad2w  R38,80             R38 += 80;           
//  save BP 12F                                                                       //
8 39fa: c7,72,af,39          stb   [R72+af],R39       [Ibap] = R39;        
//  time of last BP calc                                                              //
8 39fe: c3,72,bc,16          stw   [R72+bc],R16       [Mintim2] = R16;     
8 3a02: 71,fb,4e             an2b  R4e,fb             [Flags_4E] &= fb;    
8 3a05: b3,72,af,35          ldb   R35,[R72+af]       R35 = [Ibap];        

3a09 - Sub 8 3a09:
8 3a09: 11,34                clrb  R34                R34 = 0;             
//  Old AD sensor value, filtered BP                                                  //
8 3a0b: a3,72,b0,32          ldw   R32,[R72+b0]       R32 = [Bap_Filtl];   
//  filter new/old AD input                                                           //
8 3a0f: ef,4c,fc             call  365e               Srolav1T([d056]);    
8 3a12: 56,d0                                         #args                
//  filtered BP                                                                       //
8 3a14: c3,72,b0,3e          stw   [R72+b0],R3e       [Bap_Filtl] = R3e;   
//  BP - barometric pressure 1FE                                                      //
8 3a18: c7,74,80,3f          stb   [R74+80],R3f       RBp = R3f;           
8 3a1c: 39,c5,02             jb    B1,Rc5,3a21        if (B1_[Fmem_flags]) goto 3a21;
8 3a1f: 20,06                sjmp  3a27               goto 3a27;           

8 3a21: 11,b6                clrb  Rb6                [Bapcnt] = 0;        
//  time of last BP read/calc                                                         //
8 3a23: c3,72,bc,06          stw   [R72+bc],R06       [Mintim2] = IO_TIMER;
8 3a27: 3b,c5,19             jb    B3,Rc5,3a43        if (B3_[Fmem_flags]) goto 3a43;
8 3a2a: a3,72,a4,34          ldw   R34,[R72+a4]       R34 = [MAF_Raw];     
8 3a2e: 8b,f3,12,01,ae       cmpw  Rae,[Rf2+112]                           
8 3a33: db,07                jc    3a3c               if ((uns) [Rpmx4] >= [Vmarpm]) goto 3a3c;
//  max MAF count                                                                     //
8 3a35: 8b,f3,0e,01,34       cmpw  R34,[Rf2+10e]                           
8 3a3a: d9,07                jgtu  3a43               if ((uns) R34 > [Maxmaf]) goto 3a43;

3a3c - Sub 8 3a3c:
8 3a3c: 8b,f3,10,01,34       cmpw  R34,[Rf2+110]                           
//  range OK                                                                          //
8 3a41: db,0b                jc    3a4e               if ((uns) R34 >= [Vmamin]) goto 3a4e;

3a43 - Sub 8 3a43:
8 3a43: 91,01,26             orrb  R26,1              [Flags_26] |= 1;     
//  bad MAF sensor retry interval (3)                                                 //
8 3a46: b3,f2,4c,34          ldb   R34,[Rf2+4c]       R34 = [Mfmhys];      
//  set bad MAF retry interval                                                        //
8 3a4a: c7,72,cb,34          stb   [R72+cb],R34       [14b] = R34;         
8 3a4e: 37,a1,06             jnb   B7,Ra1,3a57        if (!B7_[a1_Flags]) goto 3a57;
//  counts since last bad MAF read                                                    //
8 3a51: c7,72,cb,00          stb   [R72+cb],0         [14b] = 0;           
8 3a55: 20,11                sjmp  3a68               goto 3a68;           

3a57 - Sub 8 3a57:
8 3a57: b3,72,cb,34          ldb   R34,[R72+cb]       R34 = [14b];         
8 3a5b: 98,34,00             cmpb  0,R34                                   
8 3a5e: df,08                je    3a68               if (0 == R34) goto 3a68;
8 3a60: 15,34                decb  R34                R34--;               
8 3a62: c7,72,cb,34          stb   [R72+cb],R34       [14b] = R34;         
8 3a66: 20,03                sjmp  3a6b               goto 3a6b;           

3a68 - Sub 8 3a68:
8 3a68: 71,fe,26             an2b  R26,fe             [Flags_26] &= fe;    

3a6b - Sub 8 3a6b:
8 3a6b: 38,26,1e             jb    B0,R26,3a8c        if (B0_[Flags_26]) goto 3a8c;
8 3a6e: cb,74,da             push  [R74+da]           push([Archfg]);      
8 3a71: cf,74,d4             pop   [R74+d4]           [Archg] = pop();     
8 3a74: a3,74,d8,30          ldw   R30,[R74+d8]       R30 = [Archi];       
8 3a78: 01,32                clrw  R32                R32 = 0;             
8 3a7a: 0d,08,30             shldw R30,8              R30L = R30L * 100;   
8 3a7d: 8f,74,da,30          divw  R30,[R74+da]       R30 = R30L / [Archfg];
8 3a81: d5,03                jnv   3a86               if (!OV) goto 3a86;  
8 3a83: bd,ff,30             ldsbw R30,ff             R30 = (sig)ff;       
8 3a86: c3,74,dc,30          stw   [R74+dc],R30       [Filrc1] = R30;      
8 3a8a: 20,7d                sjmp  3b09               goto 3b09;           

8 3a8c: a0,ae,34             ldw   R34,Rae            R34 = [Rpmx4];       
8 3a8f: 3c,c5,67             jb    B4,Rc5,3af9        if (B4_[Fmem_flags]) goto 3af9;
//  spark RPM scaling                                                                 //
8 3a92: 45,de,00,f0,32       ad3w  R32,Rf0,de         R32 = Rpmscale;      
8 3a97: ef,72,fb             call  360c               UUWordLu();          
8 3a9a: a0,38,30             ldw   R30,R38            R30 = R38;           
8 3a9d: a3,72,a2,34          ldw   R34,[R72+a2]       R34 = [TPS_Raw];     
8 3aa1: 6b,72,a6,34          sb2w  R34,[R72+a6]       R34 -= [TPS_Min__#_was__TPS_Ratch];
8 3aa5: db,02                jc    3aa9               if (R34 >= 0) goto 3aa9;
//  clamp to zero (throttle closing? )                                                //
8 3aa7: 01,34                clrw  R34                R34 = 0;             

3aa9 - Sub 8 3aa9:
8 3aa9: 45,f0,00,f4,32       ad3w  R32,Rf4,f0         R32 = Fn098;         
8 3aae: ef,5b,fb             call  360c               UUWordLu();          
8 3ab1: a0,38,32             ldw   R32,R38            R32 = R38;           
8 3ab4: 45,2c,01,f4,38       ad3w  R38,Rf4,12c        R38 = Tb001;         
8 3ab9: ad,0a,34             ldzbw R34,a              R34 = (uns)a;        
8 3abc: ef,2b,fc             call  36ea               UTabLookUp();        
8 3abf: ac,3b,38             ldzbw R38,R3b            R38 = (uns)R3b;      
8 3ac2: a3,74,e4,34          ldw   R34,[R74+e4]       R34 = [Debyma_fm];   
8 3ac6: 01,36                clrw  R36                R36 = 0;             
8 3ac8: 0d,08,34             shldw R34,8              R34L = R34L * 100;   
8 3acb: 8c,ae,34             divw  R34,Rae            R34 = R34L / [Rpmx4];
8 3ace: 9f,fe,07,34          divb  R34,[Rfe+7]        R34 = R34W / [PIPsC];
8 3ad2: d5,03                jnv   3ad7               if (!OV) goto 3ad7;  
8 3ad4: b1,ff,34             ldb   R34,ff             R34 = ff;            
8 3ad7: 11,35                clrb  R35                R35 = 0;             
8 3ad9: 64,38,34             ad2w  R34,R38            R34 += R38;          
8 3adc: af,74,80,36          ldzbw R36,[R74+80]       R36 = (uns)RBp;      
8 3ae0: 09,07,36             shlw  R36,7              R36 = R36 * 80;      
8 3ae3: 6c,36,34             ml2w  R34,R36            R34 *= R36;          
8 3ae6: 8d,ef,00,34          divw  R34,ef             R34 = R34L / ef;     
8 3aea: d5,03                jnv   3aef               if (!OV) goto 3aef;  
8 3aec: bd,ff,34             ldsbw R34,ff             R34 = (sig)ff;       
8 3aef: c3,74,d4,34          stw   [R74+d4],R34       [Archg] = R34;       
8 3af3: c3,74,da,34          stw   [R74+da],R34       [Archfg] = R34;      
8 3af7: 20,10                sjmp  3b09               goto 3b09;           

8 3af9: 45,0c,01,f4,32       ad3w  R32,Rf4,10c        R32 = Fc003;         
8 3afe: ef,0b,fb             call  360c               UUWordLu();          
8 3b01: c3,74,d4,38          stw   [R74+d4],R38       [Archg] = R38;       
8 3b05: c3,74,da,38          stw   [R74+da],R38       [Archfg] = R38;      
8 3b09: a3,72,9a,14          ldw   R14,[R72+9a]       R14 = [NDS_Raw];     
//  last raw AD NDS/A3C                                                               //
8 3b0d: 4b,74,0c,14,16       sb3w  R16,R14,[R74+c]    R16 = R14 - [Lst_iacc];
8 3b12: db,02                jc    3b16               if (R16 >= 0) goto 3b16;
8 3b14: 03,16                negw  R16                R16 = -R16;          
8 3b16: 89,80,02,16          cmpw  R16,280                                 
8 3b1a: d9,28                jgtu  3b44               if ((uns) R16 > 280) goto 3b44;
//  A/C cycling control switch is open                                                //
8 3b1c: 71,7f,ee             an2b  Ree,7f             [Flags_ee] &= 7f;    
8 3b1f: 91,40,ee             orrb  Ree,40             [Flags_ee] |= 40;    
8 3b22: 89,00,ee,14          cmpw  R14,ee00                                
8 3b26: db,1c                jc    3b44               if ((uns) R14 >= ee00) goto 3b44;
8 3b28: 89,00,8b,14          cmpw  R14,8b00                                
8 3b2c: d3,05                jnc   3b33               if ((uns) R14 < 8b00) goto 3b33;
8 3b2e: 71,bf,ee             an2b  Ree,bf             [Flags_ee] &= bf;    
8 3b31: 20,11                sjmp  3b44               goto 3b44;           

8 3b33: 89,00,67,14          cmpw  R14,6700                                
8 3b37: d3,05                jnc   3b3e               if ((uns) R14 < 6700) goto 3b3e;
8 3b39: 91,80,ee             orrb  Ree,80             [Flags_ee] |= 80;    
8 3b3c: 20,06                sjmp  3b44               goto 3b44;           

3b3e - Sub 8 3b3e:
8 3b3e: 91,80,ee             orrb  Ree,80             [Flags_ee] |= 80;    
8 3b41: 71,bf,ee             an2b  Ree,bf             [Flags_ee] &= bf;    

3b44 - Sub 8 3b44:
8 3b44: c3,74,0c,14          stw   [R74+c],R14        [Lst_iacc] = R14;    
//  Transmission Load switch                                                          //
8 3b48: b3,fe,02,18          ldb   R18,[Rfe+2]        R18 = [TRLOAD];      
8 3b4c: b0,e7,30             ldb   R30,Re7            R30 = [Flag_e7];     
//  1 = Drive.                                                                        //
8 3b4f: 71,7f,e7             an2b  Re7,7f             [Flag_e7] &= 7f;     
//  Manual Trans, no clutch or gear switches, forced neutral state (NDSFLG = 0).      //
8 3b52: 99,00,18             cmpb  R18,0                                   
8 3b55: df,06                je    3b5d               if (R18 == 0) goto 3b5d;
8 3b57: 36,ee,03             jnb   B6,Ree,3b5d        if (!B6_[Flags_ee]) goto 3b5d;
//  1 = Drive.                                                                        //
8 3b5a: 91,80,e7             orrb  Re7,80             [Flag_e7] |= 80;     
8 3b5d: 94,e7,30             xrb   R30,Re7            R30 ^= [Flag_e7];    
8 3b60: 37,30,02             jnb   B7,R30,3b65        if (!B7_R30) goto 3b65;
//  time since Neutral/Drive Switch State change, sec.                                //
8 3b63: 11,cc                clrb  Rcc                [Nddtim] = 0;        

3b65 - Sub 8 3b65:
8 3b65: 99,03,18             cmpb  R18,3                                   
8 3b68: d9,0b                jgtu  3b75               if ((uns) R18 > 3) goto 3b75;
8 3b6a: 71,bf,26             an2b  R26,bf             [Flags_26] &= bf;    
//  1 = Drive.                                                                        //
8 3b6d: 37,e7,2a             jnb   B7,Re7,3b9a        if (!B7_[Flag_e7]) goto 3b9a;
//  Drive Neutral select.                                                             //
8 3b70: 91,40,26             orrb  R26,40             [Flags_26] |= 40;    
8 3b73: 20,25                sjmp  3b9a               goto 3b9a;           

3b75 - Sub 8 3b75:
8 3b75: 3f,e7,0f             jb    B7,Re7,3b87        if (B7_[Flag_e7]) goto 3b87;
8 3b78: b3,f5,92,00,38       ldb   R38,[Rf4+92]       R38 = [Nddelt];      
//  time since Neutral/Drive Switch State change, sec.                                //
8 3b7d: 98,cc,38             cmpb  R38,Rcc                                 
8 3b80: d9,18                jgtu  3b9a               if ((uns) R38 > [Nddtim]) goto 3b9a;
//  clr  Drive Neutral select.                                                        //
8 3b82: 71,bf,26             an2b  R26,bf             [Flags_26] &= bf;    
8 3b85: 20,13                sjmp  3b9a               goto 3b9a;           

8 3b87: b0,b0,34             ldb   R34,Rb0            R34 = [ECT];         
//  OUTPUT = Seconds.                                                                 //
8 3b8a: 45,26,00,f0,32       ad3w  R32,Rf0,26         R32 = Fn394F;        
8 3b8f: ef,1a,fa             call  35ac               subyteLU();          
//  time since Neutral/Drive Switch State change, sec.                                //
8 3b92: 98,cc,38             cmpb  R38,Rcc                                 
8 3b95: d9,03                jgtu  3b9a               if ((uns) R38 > [Nddtim]) goto 3b9a;
//  set Drive/Neutral Select.                                                         //
8 3b97: 91,40,26             orrb  R26,40             [Flags_26] |= 40;    

3b9a - Sub 8 3b9a:
8 3b9a: 71,ef,27             an2b  R27,ef             [Flags_27] &= ef;    
8 3b9d: 30,df,03             jnb   B0,Rdf,3ba3        if (!B0_Rdf) goto 3ba3;
8 3ba0: 91,10,27             orrb  R27,10             [Flags_27] |= 10;    

3ba3 - Sub 8 3ba3:
8 3ba3: 71,f7,27             an2b  R27,f7             [Flags_27] &= f7;    
8 3ba6: a3,72,9c,14          ldw   R14,[R72+9c]       R14 = [EGO1_Raw];    
//  Trip Voltage                                                                      //
8 3baa: 89,c0,d5,14          cmpw  R14,d5c0                                
//  4.17v = Rich                                                                      //
8 3bae: db,08                jc    3bb8               if ((uns) R14 >= d5c0) goto 3bb8;
//  jump if already rich (No Cross)                                                   //
8 3bb0: 3f,ea,13             jb    B7,Rea,3bc6        if (B7_[Flags_ea]) goto 3bc6;
//  Set Mixture Rich                                                                  //
8 3bb3: 91,80,ea             orrb  Rea,80             [Flags_ea] |= 80;    
8 3bb6: 20,06                sjmp  3bbe               goto 3bbe;           

3bb8 - Sub 8 3bb8:
8 3bb8: 37,ea,0b             jnb   B7,Rea,3bc6        if (!B7_[Flags_ea]) goto 3bc6;
//  mixture is lean                                                                   //
8 3bbb: 71,7f,ea             an2b  Rea,7f             [Flags_ea] &= 7f;    

3bbe - Sub 8 3bbe:
8 3bbe: 91,08,27             orrb  R27,8              [Flags_27] |= 8;     
//  sensor 1                                                                          //
8 3bc1: ad,01,42             ldzbw R42,1              R42 = (uns)1;        
8 3bc4: 29,09                scall 3ccf               EGO_CrosscntB();     
8 3bc6: 71,fe,27             an2b  R27,fe             [Flags_27] &= fe;    
8 3bc9: a3,72,9e,14          ldw   R14,[R72+9e]       R14 = [EGO2_Raw];    
8 3bcd: 89,c0,d5,14          cmpw  R14,d5c0                                
8 3bd1: db,08                jc    3bdb               if ((uns) R14 >= d5c0) goto 3bdb;
8 3bd3: 3e,ea,13             jb    B6,Rea,3be9        if (B6_[Flags_ea]) goto 3be9;
8 3bd6: 91,40,ea             orrb  Rea,40             [Flags_ea] |= 40;    
8 3bd9: 20,06                sjmp  3be1               goto 3be1;           

8 3bdb: 36,ea,0b             jnb   B6,Rea,3be9        if (!B6_[Flags_ea]) goto 3be9;
8 3bde: 71,bf,ea             an2b  Rea,bf             [Flags_ea] &= bf;    

3be1 - Sub 8 3be1:
8 3be1: 91,01,27             orrb  R27,1              [Flags_27] |= 1;     
//  sensor 2                                                                          //
8 3be4: ad,02,42             ldzbw R42,2              R42 = (uns)2;        
8 3be7: 28,e6                scall 3ccf               EGO_CrosscntB();     
8 3be9: 71,fd,ea             an2b  Rea,fd             [Flags_ea] &= fd;    
//  BIHP Brake Input H/w Present                                                      //
8 3bec: 9b,f6,13,00          cmpb  0,[Rf6+13]                              
//  jmp if not A/C or BOO sensor input                                                //
8 3bf0: df,06                je    3bf8               if (0 == [Bihp]) goto 3bf8;
//  jmp if not BOO HIGH                                                               //
8 3bf2: 34,90,03             jnb   B4,R90,3bf8        if (!B4_[Last_HSI]) goto 3bf8;
//  Brake is on.                                                                      //
8 3bf5: 91,02,ea             orrb  Rea,2              [Flags_ea] |= 2;     
8 3bf8: 91,20,2b             orrb  R2b,20             [Flags_2B] |= 20;    
//  HSI bit 3 is STI - Self Test Input - on the fly test                              //
8 3bfb: 33,0b,03             jnb   B3,R0b,3c01        if (!B3_HSI_SAMP) goto 3c01;
8 3bfe: 71,df,2b             an2b  R2b,df             [Flags_2B] &= df;    
8 3c01: a3,fc,0c,36          ldw   R36,[Rfc+c]        R36 = [Spdlim_a_off];
//  R34L = 28000000                                                                   //
8 3c05: 01,34                clrw  R34                R34 = 0;             
8 3c07: a3,72,90,32          ldw   R32,[R72+90]       R32 = [VSS_Raw];     
//  chk for div by zero (VCAL regulator is bad)                                       //
8 3c0b: 88,32,00             cmpw  0,R32                                   
8 3c0e: df,05                je    3c15               if (0 == R32) goto 3c15;
//  28000000/VCAL = 5014 without voltage error                                        //
8 3c10: 8c,32,34             divw  R34,R32            R34 = R34L / R32;    
8 3c13: d5,06                jnv   3c1b               if (!OV) goto 3c1b;  

3c15 - Sub 8 3c15:
8 3c15: a1,fd,8d,34          ldw   R34,8dfd           R34 = 8dfd;          
8 3c19: 20,10                sjmp  3c2b               goto 3c2b;           

8 3c1b: 89,fd,8d,34          cmpw  R34,8dfd                                
8 3c1f: d9,f4                jgtu  3c15               if ((uns) R34 > 8dfd) goto 3c15;
8 3c21: 89,89,41,34          cmpw  R34,4189                                
8 3c25: d9,04                jgtu  3c2b               if ((uns) R34 > 4189) goto 3c2b;
//  clamp range err                                                                   //
8 3c27: a1,89,41,34          ldw   R34,4189           R34 = 4189;          

3c2b - Sub 8 3c2b:
8 3c2b: 6f,fe,18,34          ml2w  R34,[Rfe+18]       R34 *= [Sc0154];     
//  hi 16 bits of 32 bit result                                                       //
8 3c2f: a0,36,34             ldw   R34,R36            R34 = R36;           
//  raw KEYPWR (17.86% of bat voltage)(result is VBat * 2)(result Hi SB 1BFE w/o errs)  //
8 3c32: 6f,72,8c,34          ml2w  R34,[R72+8c]       R34 *= [Key_Pwr];    
//  check max voltage in top 16 of 32 bit result (~15.94V)                            //
8 3c36: 89,e1,1f,36          cmpw  R36,1fe1                                
//  clamp voltage                                                                     //
8 3c3a: d9,05                jgtu  3c41               if ((uns) R36 > 1fe1) goto 3c41;
//  now volts * 16                                                                    //
8 3c3c: 0d,03,34             shldw R34,3              R34L = R34L * 8;     
8 3c3f: 20,03                sjmp  3c44               goto 3c44;           

3c41 - Sub 8 3c41:
8 3c41: b1,ff,37             ldb   R37,ff             R37 = ff;            

3c44 - Sub 8 3c44:
8 3c44: af,74,93,32          ldzbw R32,[R74+93]       R32 = (uns)[Vbat];   
//  NEW AD sensor value Lo                                                            //
8 3c48: ac,37,34             ldzbw R34,R37            R34 = (uns)R37;      
//  filter new AD input - battery voltage                                             //
8 3c4b: ef,10,fa             call  365e               Srolav1T([d050]);    
8 3c4e: 50,d0                                         #args                
//  updated AD value = 211 - Battery Voltage Level * 16                               //
8 3c50: c7,74,93,3e          stb   [R74+93],R3e       [Vbat] = R3e;        
8 3c54: b0,3e,34             ldb   R34,R3e            R34 = R3e;           
//  Table injector offset vs battery volts                                            //
8 3c57: 45,b2,00,fc,32       ad3w  R32,Rfc,b2         R32 = Inj_vss;       
8 3c5c: ef,58,f9             call  35b7               UUbyteLu();          
8 3c5f: c7,72,13,38          stb   [R72+13],R38       [Pwofs] = R38;       
8 3c63: 01,30                clrw  R30                R30 = 0;             
8 3c65: b0,38,31             ldb   R31,R38            R31 = R38;           
8 3c68: 6d,06,0d,30          ml2w  R30,d06            R30 *= d06;          
8 3c6c: c3,72,0e,32          stw   [R72+e],R32        [Pwoff] = R32;       
8 3c70: a3,74,9c,32          ldw   R32,[R74+9c]       R32 = [Oldtp];       
8 3c74: 68,aa,32             sb2w  R32,Raa            R32 -= RTP;          
8 3c77: d3,0a                jnc   3c83               if (R32 < 0) goto 3c83;
8 3c79: 8b,f4,30,32          cmpw  R32,[Rf4+30]                            
8 3c7d: d1,04                jleu  3c83               if ((uns) R32 <= [Tpdlta]) goto 3c83;
//  scale and translated TAR                                                          //
8 3c7f: c7,74,20,00          stb   [R74+20],0         [Tar] = 0;           
8 3c83: b3,74,20,30          ldb   R30,[R74+20]       R30 = [Tar];         
8 3c87: 9b,f4,34,30          cmpb  R30,[Rf4+34]                            
8 3c8b: d1,15                jleu  3ca2               if ((uns) R30 <= [Aetar]) goto 3ca2;
//  engine load (VE? )                                                                //
8 3c8d: a3,74,de,32          ldw   R32,[R74+de]       R32 = [Load];        
8 3c91: 6b,74,9e,32          sb2w  R32,[R74+9e]       R32 -= [Aeload];     
8 3c95: d3,0b                jnc   3ca2               if (R32 < 0) goto 3ca2;
8 3c97: 8b,f4,32,32          cmpw  R32,[Rf4+32]                            
8 3c9b: d1,05                jleu  3ca2               if ((uns) R32 <= [Aeacld]) goto 3ca2;
8 3c9d: 91,20,29             orrb  R29,20             [Flags_29] |= 20;    
8 3ca0: 20,08                sjmp  3caa               goto 3caa;           

8 3ca2: 98,00,30             cmpb  R30,0                                   
8 3ca5: d7,03                jne   3caa               if (R30 != 0) goto 3caa;
8 3ca7: 71,df,29             an2b  R29,df             [Flags_29] &= df;    
8 3caa: c3,74,9c,aa          stw   [R74+9c],Raa       [Oldtp] = RTP;       
8 3cae: 45,e3,00,f4,32       ad3w  R32,Rf4,e3         R32 = Fn389;         
8 3cb3: b3,74,80,34          ldb   R34,[R74+80]       R34 = RBp;           
8 3cb7: ef,fd,f8             call  35b7               UUbyteLu();          
8 3cba: c7,74,82,38          stb   [R74+82],R38       [Mult_bp311] = R38;  
8 3cbe: 45,46,01,fa,32       ad3w  R32,Rfa,146        R32 = Fc031;         
8 3cc3: b3,74,80,34          ldb   R34,[R74+80]       R34 = RBp;           
8 3cc7: ef,ed,f8             call  35b7               UUbyteLu();          
8 3cca: c7,74,83,38          stb   [R74+83],R38       [Mult_bp212A] = R38; 
8 3cce: f0                   ret                      return;              

EGO_CrosscntB:
8 3ccf: 28,02                scall 3cd3               EGO_crosscnt();      
8 3cd1: 11,42                clrb  R42                R42 = 0;             

EGO_crosscnt:
8 3cd3: b3,43,a4,02,34       ldb   R34,[R42+2a4]      R34 = [R42+Egosss];  
8 3cd8: 17,34                incb  R34                R34++;               
8 3cda: d3,02                jnc   3cde               if (R34 <= ff) goto 3cde;
//  clamp max to FF                                                                   //
8 3cdc: 15,34                decb  R34                R34--;               
8 3cde: c7,43,a4,02,34       stb   [R42+2a4],R34      [R42+Egosss] = R34;  
8 3ce3: f0                   ret                      return;              

Update_MPH:
8 3ce4: fa                   di                       disable ints;        
8 3ce5: ff                   ff                                            
//  (VSS)                                                                             //
8 3ce6: ac,b2,42             ldzbw R42,Rb2            R42 = (uns)[Mphcnt]; 
//  IO time for HSI going 'high'                                                      //
8 3ce9: a3,74,40,30          ldw   R30,[R74+40]       R30 = [Mphtiml1];    
8 3ced: b3,74,42,32          ldb   R32,[R74+42]       R32 = [Mphtim1H];    
//  VSS speed ring clicks                                                             //
8 3cf1: 11,b2                clrb  Rb2                [Mphcnt] = 0;        
8 3cf3: fb                   ei                       enable ints;         
8 3cf4: 01,34                clrw  R34                R34 = 0;             
//  time since last click                                                             //
8 3cf6: b3,74,3d,36          ldb   R36,[R74+3d]       R36 = [Tslmph];      
8 3cfa: 99,ff,36             cmpb  R36,ff                                  
8 3cfd: d3,05                jnc   3d04               if ((uns) R36 < ff) goto 3d04;
//  timed out, clear and reset                                                        //
8 3cff: 71,fb,c4             an2b  Rc4,fb             [Vsc_flags] &= fb;   
8 3d02: 20,2f                sjmp  3d33               goto 3d33;           

3d04 - Sub 8 3d04:
8 3d04: 98,00,42             cmpb  R42,0                                   
//  jmp if valid sample                                                               //
8 3d07: d7,06                jne   3d0f               if (R42 != 0) goto 3d0f;
//  NEW MPH = last MPH                                                                //
8 3d09: a3,74,34,34          ldw   R34,[R74+34]       R34 = [Mph_Raw];     
8 3d0d: 20,28                sjmp  3d37               goto 3d37;           

3d0f - Sub 8 3d0f:
8 3d0f: ac,32,16             ldzbw R16,R32            R16 = (uns)R32;      
//  time since start of this RB2 click count (24 bits)                                //
8 3d12: 4b,74,44,30,14       sb3w  R14,R30,[R74+44]   R14 = R30 - [Mphtim2H];
8 3d17: bb,74,46,16          sbbb  R16,[R74+46]       R16 -= [2c4] - CY;   
//  = time per VSS click                                                              //
8 3d1b: 8c,42,14             divw  R14,R42            R14 = R14L / R42;    
8 3d1e: d5,03                jnv   3d23               if (!OV) goto 3d23;  
8 3d20: bd,ff,14             ldsbw R14,ff             R14 = (sig)ff;       

3d23 - Sub 8 3d23:
8 3d23: a1,b8,05,36          ldw   R36,5b8            R36 = 5b8;           
8 3d27: a1,00,d8,34          ldw   R34,d800           R34 = d800;          
//  96M / R14(time per click) = distance per time (MPH? )                             //
8 3d2b: 8c,14,34             divw  R34,R14            R34 = R34L / R14;    
8 3d2e: d5,03                jnv   3d33               if (!OV) goto 3d33;  
8 3d30: bd,ff,34             ldsbw R34,ff             R34 = (sig)ff;       

3d33 - Sub 8 3d33:
8 3d33: c3,74,34,34          stw   [R74+34],R34       [Mph_Raw] = R34;     

3d37 - Sub 8 3d37:
8 3d37: c3,74,44,30          stw   [R74+44],R30       [Mphtim2H] = R30;    
8 3d3b: c7,74,46,32          stb   [R74+46],R32       [2c4] = R32;         
8 3d3f: a3,74,3e,32          ldw   R32,[R74+3e]       R32 = [Mph_Filt];    
8 3d43: ef,18,f9             call  365e               Srolav1T([d052]);    
8 3d46: 52,d0                                         #args                
//  Filtered vehicle speed (1)                                                        //
8 3d48: c3,74,3e,3e          stw   [R74+3e],R3e       [Mph_Filt] = R3e;    
8 3d4c: a3,74,2e,32          ldw   R32,[R74+2e]       R32 = [Mph_FiltA];   
8 3d50: ef,0b,f9             call  365e               Srolav1T([d05a]);    
8 3d53: 5a,d0                                         #args                
//  Filtered vehicle speed (2)                                                        //
8 3d55: c3,74,2e,3e          stw   [R74+2e],R3e       [Mph_FiltA] = R3e;   
8 3d59: f0                   ret                      return;              

Update_HWND:
8 3d5a: 51,80,ee,30          an3b  R30,Ree,80         R30 = [Flags_ee] & 80;
//  subtract from last state                                                          //
8 3d5e: 5b,76,38,30,32       sb3b  R32,R30,[R76+38]   R32 = R30 - [Lsta3C];
//  no state change                                                                   //
8 3d63: df,08                je    3d6d               if (R32 == 0) goto 3d6d;
//  last state = current state                                                        //
8 3d65: c7,76,38,30          stb   [R76+38],R30       [Lsta3C] = R30;      
8 3d69: c3,76,2e,00          stw   [R76+2e],0         [A3CTMR] = 0;        
8 3d6d: a3,76,2e,30          ldw   R30,[R76+2e]       R30 = [A3CTMR];      
8 3d71: 8b,f0,06,30          cmpw  R30,[Rf0+6]                             
//  250mS                                                                             //
8 3d75: d1,04                jleu  3d7b               if ((uns) R30 <= [Sc0004]) goto 3d7b;
8 3d77: c3,76,30,00          stw   [R76+30],0         [Hwtmr] = 0;         
8 3d7b: a3,76,30,34          ldw   R34,[R76+30]       R34 = [Hwtmr];       
8 3d7f: 8b,f0,08,34          cmpw  R34,[Rf0+8]                             
//  300mS                                                                             //
8 3d83: d1,0e                jleu  3d93               if ((uns) R34 <= [Sc0005]) goto 3d93;
//  defrost already on ?                                                              //
8 3d85: 39,e6,0b             jb    B1,Re6,3d93        if (B1_[Flags_e6]) goto 3d93;
//  jmp if HWFLGL - first time                                                        //
8 3d88: 38,e6,08             jb    B0,Re6,3d93        if (B0_[Flags_e6]) goto 3d93;
8 3d8b: 91,02,e6             orrb  Re6,2              [Flags_e6] |= 2;     
//  set first time defrost on                                                         //
8 3d8e: 91,01,e6             orrb  Re6,1              [Flags_e6] |= 1;     
8 3d91: 20,0c                sjmp  3d9f               goto 3d9f;           

8 3d93: 8b,f6,0a,30          cmpw  R30,[Rf6+a]                             
8 3d97: d1,06                jleu  3d9f               if ((uns) R30 <= [SSFCTR]) goto 3d9f;
//  jmp if A3C - is AC on?                                                            //
8 3d99: 3f,ee,03             jb    B7,Ree,3d9f        if (B7_[Flags_ee]) goto 3d9f;
8 3d9c: 71,fd,e6             an2b  Re6,fd             [Flags_e6] &= fd;    
8 3d9f: f0                   ret                      return;              



ScScSadDir014:
8 3da0: 02,fa             ScScSadDir014     oword       2fa                 762

ScScSadDir015:
8 3da2: 01,fc             ScScSadDir015     oword       1fc                 508

ScScSadDir016:
8 3da4: 01,7d             ScScSadDir016     oword       17d                 381

ScScSadDir017:
8 3da6: f0,80             ScScSadDir017     oword      f080               61568      //  = 2faf080 = 50,000,000 4 cyl  //

ScScSadDir018:
8 3da8: a0,55             ScScSadDir018     oword      a055               41045      //  = 1fca055 = 33,333,333 6 cyl  //

ScScSadDir019:
8 3daa: 78,40             ScScSadDir019     oword      7840               30784      //  = 17d7840 = 25,000,000 8 cyl  //


Update_rpm:
8 3dac: a1,33,03,14          ldw   R14,333            R14 = 333;           
//  time since last PIP recieved ?                                                    //
8 3db0: 8b,72,be,14          cmpw  R14,[R72+be]                            
8 3db4: d9,3b                jgtu  3df1               if ((uns) R14 > [Tslpip]) goto 3df1;
//  RPM = 0?                                                                          //
8 3db6: 01,36                clrw  R36                R36 = 0;             
8 3db8: 71,ef,2d             an2b  R2d,ef             [Flags_2D] &= ef;    
8 3dbb: b1,01,32             ldb   R32,1              R32 = 1;             
8 3dbe: c7,74,ec,32          stb   [R74+ec],R32       [Inj_pip_cnt1] = R32;
8 3dc2: c7,74,ed,32          stb   [R74+ed],R32       [Inj_pip_cnt2] = R32;
8 3dc6: 71,2f,2e             an2b  R2e,2f             [Flags_2E] &= 2f;    
8 3dc9: 9b,f8,1a,00          cmpb  0,[Rf8+1a]                              
8 3dcd: df,0d                je    3ddc               if (0 == [Tfi_dwell]) goto 3ddc;
8 3dcf: fa                   di                       disable ints;        
8 3dd0: ff                   ff                                            
//  short entry 2284 - spout?                                                         //
8 3dd1: a1,96,22,92          ldw   R92,2296           [TPtr] = OSt8_004;   
8 3dd5: 91,08,4c             orrb  R4c,8              [Flags_4C] |= 8;     
//  send HSO command 55 ands lots of other stuff - spout?                             //
8 3dd8: ef,e2,e5             call  23bd               Send_HSO_Cmd();      
8 3ddb: fb                   ei                       enable ints;         
8 3ddc: 9b,f8,19,00          cmpb  0,[Rf8+19]                              
8 3de0: df,0d                je    3def               if (0 == [Hphidres]) goto 3def;
8 3de2: fa                   di                       disable ints;        
8 3de3: ff                   ff                                            
//  2nd short entry 2284 - spout?                                                     //
8 3de4: a1,9e,22,92          ldw   R92,229e           [TPtr] = OSt8_006;   
8 3de8: 91,08,4c             orrb  R4c,8              [Flags_4C] |= 8;     
//  send HSO command C5 ands lots of other stuff - spout?                             //
8 3deb: ef,cf,e5             call  23bd               Send_HSO_Cmd();      
8 3dee: fb                   ei                       enable ints;         
8 3def: 20,25                sjmp  3e16               goto 3e16;           

8 3df1: 33,4e,4e             jnb   B3,R4e,3e42        if (!B3_[Flags_4E]) goto 3e42;
8 3df4: 71,f7,4e             an2b  R4e,f7             [Flags_4E] &= f7;    
8 3df7: af,fe,07,30          ldzbw R30,[Rfe+7]        R30 = (uns)[PIPsC];  
//  Hi word from table                                                                //
8 3dfb: a3,31,9c,3d,36       ldw   R36,[R30+3d9c]     R36 = [R30+OSt8_009];
//  Lo word from table                                                                //
8 3e00: a3,31,a2,3d,34       ldw   R34,[R30+3da2]     R34 = [R30+ScScSadDir015];
//  PIP time Lo                                                                       //
8 3e05: a0,ba,38             ldw   R38,Rba            R38 = [PIPHi_ETime]; 
//  Pip time Hi (byte)                                                                //
8 3e08: ac,bc,3a             ldzbw R3a,Rbc            R3a = (uns)[PIPHi_ETimeH];
//  normalize time value (R38Long)                                                    //
8 3e0b: 0f,30,38             norm  R38,R30            R30L = Norm R38L;    
//  divide. (val/pip time = RPM)                                                      //
8 3e0e: 8c,3a,34             divw  R34,R3a            R34 = R34L / R3a;    
//  engine RPM is in bottom bits of LONG shift                                        //
8 3e11: 01,36                clrw  R36                R36 = 0;             
//  new RPM                                                                           //
8 3e13: 0d,30,34             shldw R34,30             R34L = R34L << R30;  

3e16 - Sub 8 3e16:
8 3e16: a0,36,ae             ldw   Rae,R36            [Rpmx4] = R36;       
8 3e19: 08,06,36             shrw  R36,6              R36 = R36 / 40;      
8 3e1c: 98,00,37             cmpb  R37,0                                   
8 3e1f: df,03                je    3e24               if (R37 == 0) goto 3e24;
8 3e21: b1,ff,36             ldb   R36,ff             R36 = ff;            
8 3e24: c7,74,21,36          stb   [R74+21],R36       [N_byte] = R36;      
8 3e28: ef,29,f8             call  3654               Srolav3T([RPM_Filt1],[Rpmx4],[d04c]);
8 3e2b: 08,01,ae,00,4c,d0                             #args                
8 3e31: c3,72,88,3e          stw   [R72+88],R3e       [RPM_Filt1] = R3e;   
8 3e35: ef,1c,f8             call  3654               Srolav3T([RPM_Filt2],[Rpmx4],[d05c]);
8 3e38: 7c,02,ae,00,5c,d0                             #args                
8 3e3e: c3,74,fe,3e          stw   [R74+fe],R3e       [RPM_Filt2] = R3e;   

3e42 - Sub 8 3e42:
8 3e42: a3,fc,2e,32          ldw   R32,[Rfc+2e]       R32 = [Sc0117];      
8 3e46: 08,04,32             shrw  R32,4              R32 = R32 / 10;      
//  R32 = 16                                                                          //
8 3e49: 7f,fc,33,32          ml2b  R32,[Rfc+33]       R32 *= [Outinj];     
//  8 - no of cyls                                                                    //
8 3e4d: 9f,fc,32,32          divb  R32,[Rfc+32]       R32 = R32W / [Cyl_wrap];
//  piplim = 4                                                                        //
8 3e51: c7,76,44,32          stb   [R76+44],R32       [Piplim] = R32;      
8 3e55: af,fe,07,14          ldzbw R14,[Rfe+7]        R14 = (uns)[PIPsC];  
//  R14 is index (0,2,4)=(4,6,8 cyls)                                                 //
8 3e59: 69,04,00,14          sb2w  R14,4              R14 -= 4;            
//  27C4 [4] = 3200                                                                   //
8 3e5d: cb,15,c4,27          push  [R14+27c4]         push([R14+ScScSadDir002]);
//  sim min = 3200                                                                    //
8 3e61: cf,76,48             pop   [R76+48]           [Sim_min] = pop();   
8 3e64: 64,f0,14             ad2w  R14,Rf0            R14 += Rf0;          
//  Min PIP Period                                                                    //
8 3e67: cb,14,12             push  [R14+12]           push([R14+Tmr_OVF_cnt]);
//  Min PIP dly = 961                                                                 //
8 3e6a: cf,76,46             pop   [R76+46]           [Min_pip_dly] = pop();
//  = 13107  20% of 65536                                                             //
8 3e6d: 8b,fe,0e,00          cmpw  0,[Rfe+e]                               
8 3e71: d6,05                jge   3e78               if ((sig) 0 >= [MHPFD]) goto 3e78;
8 3e73: 71,fb,25             an2b  R25,fb             [Flags_25] &= fb;    
8 3e76: 20,03                sjmp  3e7b               goto 3e7b;           

8 3e78: 91,04,25             orrb  R25,4              [Flags_25] |= 4;     
8 3e7b: f0                   ret                      return;              

Load_Calc:
8 3e7c: a3,f4,42,36          ldw   R36,[Rf4+42]       R36 = [Archlk];      
8 3e80: 9f,fe,07,36          divb  R36,[Rfe+7]        R36 = R36W / [PIPsC];
8 3e84: d5,03                jnv   3e89               if (!OV) goto 3e89;  
8 3e86: b1,ff,36             ldb   R36,ff             R36 = ff;            
8 3e89: 11,37                clrb  R37                R37 = 0;             
8 3e8b: 01,34                clrw  R34                R34 = 0;             
8 3e8d: 8c,ae,34             divw  R34,Rae            R34 = R34L / [Rpmx4];
8 3e90: d5,03                jnv   3e95               if (!OV) goto 3e95;  
8 3e92: bd,ff,34             ldsbw R34,ff             R34 = (sig)ff;       
8 3e95: c3,74,d6,34          stw   [R74+d6],R34       [Archli] = R34;      
8 3e99: 9b,f6,08,00          cmpb  0,[Rf6+8]                               
8 3e9d: df,05                je    3ea4               if (0 == [Sc0016]) goto 3ea4;
8 3e9f: 91,02,26             orrb  R26,2              [Flags_26] |= 2;     
8 3ea2: 20,03                sjmp  3ea7               goto 3ea7;           

8 3ea4: 71,fd,26             an2b  R26,fd             [Flags_26] &= fd;    

3ea7 - Sub 8 3ea7:
8 3ea7: 45,de,00,f0,32       ad3w  R32,Rf0,de         R32 = Rpmscale;      
8 3eac: a0,ae,34             ldw   R34,Rae            R34 = [Rpmx4];       
8 3eaf: ef,5a,f7             call  360c               UUWordLu();          
8 3eb2: a0,38,a6             ldw   Ra6,R38            [Nrmces] = R38;      
//  emission load scaling                                                             //
8 3eb5: 45,b2,00,f0,32       ad3w  R32,Rf0,b2         R32 = Emm_lscale;    
//  raw engine load (= VE? )                                                          //
8 3eba: a3,74,de,34          ldw   R34,[R74+de]       R34 = [Load];        
8 3ebe: ef,4b,f7             call  360c               UUWordLu();          
8 3ec1: a0,38,a8             ldw   Ra8,R38            [Nrmrld] = R38;      
8 3ec4: a0,a6,30             ldw   R30,Ra6            R30 = [Nrmces];      
8 3ec7: a0,a8,32             ldw   R32,Ra8            R32 = [Nrmrld];      
8 3eca: ad,0a,34             ldzbw R34,a              R34 = (uns)a;        
//  Air Meter Backflow Correction Table                                               //
8 3ecd: 45,22,01,fc,38       ad3w  R38,Rfc,122        R38 = Tb007;         
8 3ed2: ef,15,f8             call  36ea               UTabLookUp();        
8 3ed5: c7,76,39,3b          stb   [R76+39],R3b       [Archcor] = R3b;     
//  Table 9204 ? vs RPM                                                               //
8 3ed9: 45,2e,02,f4,32       ad3w  R32,Rf4,22e        R32 = Fc004;         
8 3ede: a0,ae,34             ldw   R34,Rae            R34 = [Rpmx4];       
8 3ee1: ef,28,f7             call  360c               UUWordLu();          
8 3ee4: c3,76,2c,38          stw   [R76+2c],R38       [Air37] = R38;       
8 3ee8: a3,74,d4,30          ldw   R30,[R74+d4]       R30 = [Archg];       
8 3eec: af,fe,07,32          ldzbw R32,[Rfe+7]        R32 = (uns)[PIPsC];  
8 3ef0: 6c,32,30             ml2w  R30,R32            R30 *= R32;          
8 3ef3: 0c,03,30             shrdw R30,3              R30L = R30L / 8;     
8 3ef6: 6c,ae,30             ml2w  R30,Rae            R30 *= [Rpmx4];      
8 3ef9: 0c,0e,30             shrdw R30,e              R30L = R30L / 4000;  
8 3efc: 88,00,32             cmpw  R32,0                                   
8 3eff: df,03                je    3f04               if (R32 == 0) goto 3f04;
8 3f01: bd,ff,30             ldsbw R30,ff             R30 = (sig)ff;       
8 3f04: c0,a2,30             stw   Ra2,R30            RAM = R30;           
8 3f07: a3,72,de,3e          ldw   R3e,[R72+de]       R3e = [Fam];         
8 3f0b: 08,01,3e             shrw  R3e,1              R3e = R3e / 2;       
//  =Closed TP                                                                        //
8 3f0e: a3,72,a6,3c          ldw   R3c,[R72+a6]       R3c = [TPS_Min__#_was__TPS_Ratch];
8 3f12: 67,f4,6a,3c          ad2w  R3c,[Rf4+6a]       R3c += [Delrat];     
8 3f16: 47,fe,24,3c,38       ad3w  R38,R3c,[Rfe+24]   R38 = R3c + [Sc0161];
8 3f1b: 88,aa,38             cmpw  R38,Raa                                 
8 3f1e: d3,22                jnc   3f42               if ((uns) R38 < RTP) goto 3f42;
8 3f20: b3,72,e6,38          ldb   R38,[R72+e6]       R38 = [Dsdrpm];      
8 3f24: 9b,fe,1e,38          cmpb  R38,[Rfe+1e]                            
8 3f28: d9,18                jgtu  3f42               if ((uns) R38 > [Sc0156]) goto 3f42;
8 3f2a: 77,fe,1f,38          ad2b  R38,[Rfe+1f]       R38 += [Sc0157];     
8 3f2e: db,2a                jc    3f5a               if (R38 > ff) goto 3f5a;
8 3f30: 9b,74,21,38          cmpb  R38,[R74+21]                            
8 3f34: db,24                jc    3f5a               if ((uns) R38 >= [N_byte]) goto 3f5a;
8 3f36: 77,fe,20,38          ad2b  R38,[Rfe+20]       R38 += [Sc0158];     
8 3f3a: db,75                jc    3fb1               if (R38 > ff) goto 3fb1;
8 3f3c: 9b,74,21,38          cmpb  R38,[R74+21]                            
8 3f40: db,6f                jc    3fb1               if ((uns) R38 >= [N_byte]) goto 3fb1;
8 3f42: 71,f7,ec             an2b  Rec,f7             [Flag_ec] &= f7;     
8 3f45: a3,fe,26,3c          ldw   R3c,[Rfe+26]       R3c = [IFAM];        
8 3f49: 08,01,3c             shrw  R3c,1              R3c = R3c / 2;       
8 3f4c: 88,3c,3e             cmpw  R3e,R3c                                 
8 3f4f: d1,07                jleu  3f58               if ((uns) R3e <= R3c) goto 3f58;
8 3f51: 09,01,3c             shlw  R3c,1              R3c = R3c * 2;       
8 3f54: c3,72,de,3c          stw   [R72+de],R3c       [Fam] = R3c;         
8 3f58: 20,a2                sjmp  3ffc               goto 3ffc;           

8 3f5a: 88,aa,3c             cmpw  R3c,Raa                                 
8 3f5d: d3,52                jnc   3fb1               if ((uns) R3c < RTP) goto 3fb1;
8 3f5f: 3b,ec,4f             jb    B3,Rec,3fb1        if (B3_[Flag_ec]) goto 3fb1;
8 3f62: 91,08,ec             orrb  Rec,8              [Flag_ec] |= 8;      
8 3f65: c3,72,b2,00          stw   [R72+b2],0         [Ffmtmr] = 0;        
//  = 66                                                                              //
8 3f69: af,fe,22,30          ldzbw R30,[Rfe+22]       R30 = (uns)[Sc0160]; 
8 3f6d: 6c,3e,30             ml2w  R30,R3e            R30 *= R3e;          
8 3f70: 0c,07,30             shrdw R30,7              R30L = R30L / 80;    
8 3f73: 88,30,a2             cmpw  Ra2,R30                                 
8 3f76: db,05                jc    3f7d               if ((uns) RAM >= R30) goto 3f7d;
8 3f78: a0,30,a2             ldw   Ra2,R30            RAM = R30;           
8 3f7b: 20,12                sjmp  3f8f               goto 3f8f;           

3f7d - Sub 8 3f7d:
8 3f7d: af,fe,21,30          ldzbw R30,[Rfe+21]       R30 = (uns)[Sc0159]; 
8 3f81: 6c,3e,30             ml2w  R30,R3e            R30 *= R3e;          
8 3f84: 0c,07,30             shrdw R30,7              R30L = R30L / 80;    
8 3f87: 88,30,a2             cmpw  Ra2,R30                                 
8 3f8a: d1,03                jleu  3f8f               if ((uns) RAM <= R30) goto 3f8f;
8 3f8c: a0,30,a2             ldw   Ra2,R30            RAM = R30;           
8 3f8f: a3,f4,4a,32          ldw   R32,[Rf4+4a]       R32 = [Faminc];      
8 3f93: 0a,01,32             asrw  R32,1              R32 = R32 / 2;       
8 3f96: 44,a2,32,3e          ad3w  R3e,R32,Ra2        R3e = R32 + RAM;     
8 3f9a: 3f,33,07             jb    B7,R33,3fa4        if (B7_R33) goto 3fa4;
8 3f9d: d3,09                jnc   3fa8               if (R3e * 2 <= ffff) goto 3fa8;
8 3f9f: bd,ff,3e             ldsbw R3e,ff             R3e = (sig)ff;       
8 3fa2: 20,04                sjmp  3fa8               goto 3fa8;           

8 3fa4: db,02                jc    3fa8               if (R3e > ffff) goto 3fa8;
8 3fa6: 01,3e                clrw  R3e                R3e = 0;             
8 3fa8: 09,01,3e             shlw  R3e,1              R3e = R3e * 2;       
8 3fab: c3,72,de,3e          stw   [R72+de],R3e       [Fam] = R3e;         
8 3faf: 20,45                sjmp  3ff6               goto 3ff6;           

8 3fb1: 33,ec,42             jnb   B3,Rec,3ff6        if (!B3_[Flag_ec]) goto 3ff6;
8 3fb4: 48,3e,a2,40          sb3w  R40,Ra2,R3e        R40 = RAM - R3e;     
8 3fb8: d6,02                jge   3fbc               if ((sig) R40 >= 0) goto 3fbc;
8 3fba: 03,40                negw  R40                R40 = -R40;          
8 3fbc: a3,f4,7e,34          ldw   R34,[Rf4+7e]       R34 = [Famlim];      
8 3fc0: 6c,a2,34             ml2w  R34,Ra2            R34 *= RAM;          
8 3fc3: 88,36,40             cmpw  R40,R36                                 
8 3fc6: d1,2e                jleu  3ff6               if ((uns) R40 <= R36) goto 3ff6;
8 3fc8: b3,72,ea,34          ldb   R34,[R72+ea]       R34 = [Bgcnt];       
8 3fcc: 17,34                incb  R34                R34++;               
8 3fce: 9b,f4,6c,34          cmpb  R34,[Rf4+6c]                            
8 3fd2: d3,24                jnc   3ff8               if ((uns) R34 < [Samrat]) goto 3ff8;
8 3fd4: a0,3e,32             ldw   R32,R3e            R32 = R3e;           
8 3fd7: a0,a2,34             ldw   R34,Ra2            R34 = RAM;           
8 3fda: a3,fa,4a,36          ldw   R36,[Rfa+4a]       R36 = [Sc0109];      
8 3fde: a3,72,b2,3e          ldw   R3e,[R72+b2]       R3e = [Ffmtmr];      
8 3fe2: c3,72,b2,00          stw   [R72+b2],0         [Ffmtmr] = 0;        
8 3fe6: 91,01,ca             orrb  Rca,1              [Flag_ca] |= 1;      
8 3fe9: ef,77,f6             call  3663               Urolav();            
8 3fec: 09,01,3e             shlw  R3e,1              R3e = R3e * 2;       
8 3fef: c3,72,de,3e          stw   [R72+de],R3e       [Fam] = R3e;         
8 3ff3: 08,01,3e             shrw  R3e,1              R3e = R3e / 2;       
8 3ff6: 11,34                clrb  R34                R34 = 0;             
8 3ff8: c7,72,ea,34          stb   [R72+ea],R34       [Bgcnt] = R34;       
8 3ffc: 3b,ec,0f             jb    B3,Rec,400e        if (B3_[Flag_ec]) goto 400e;
8 3fff: 11,32                clrb  R32                R32 = 0;             
8 4001: 20,03                sjmp  4006               goto 4006;           

8 4003: b1,80,32             ldb   R32,80             R32 = 80;            
8 4006: 71,f7,25             an2b  R25,f7             [Flags_25] &= f7;    
8 4009: a0,a2,3e             ldw   R3e,Ra2            R3e = RAM;           
8 400c: 20,2c                sjmp  403a               goto 403a;           

8 400e: b1,ff,32             ldb   R32,ff             R32 = ff;            
//  = 0                                                                               //
8 4011: a3,fe,1c,34          ldw   R34,[Rfe+1c]       R34 = [Sc0155];      
8 4015: 6c,3e,34             ml2w  R34,R3e            R34 *= R3e;          
8 4018: 0d,01,34             shldw R34,1              R34L = R34L * 2;     
8 401b: db,08                jc    4025               if (R34 * 2 > ffff) goto 4025;
8 401d: 88,36,a2             cmpw  Ra2,R36                                 
8 4020: d9,e1                jgtu  4003               if ((uns) RAM > R36) goto 4003;
8 4022: 91,08,25             orrb  R25,8              [Flags_25] |= 8;     

4025 - Sub 8 4025:
8 4025: a3,f5,80,00,34       ldw   R34,[Rf4+80]       R34 = [Maxfam];      
8 402a: 6c,a2,34             ml2w  R34,Ra2            R34 *= RAM;          
8 402d: 0d,01,34             shldw R34,1              R34L = R34L * 2;     
8 4030: db,08                jc    403a               if (R34 * 2 > ffff) goto 403a;
8 4032: 88,36,3e             cmpw  R3e,R36                                 
8 4035: d1,03                jleu  403a               if ((uns) R3e <= R36) goto 403a;
8 4037: a0,36,3e             ldw   R3e,R36            R3e = R36;           
8 403a: 8b,fe,1a,3e          cmpw  R3e,[Rfe+1a]                            
8 403e: db,04                jc    4044               if ((uns) R3e >= [MINAM]) goto 4044;
8 4040: a3,fe,1a,3e          ldw   R3e,[Rfe+1a]       R3e = [MINAM];       
8 4044: c0,a2,3e             stw   Ra2,R3e            RAM = R3e;           
8 4047: c7,72,e7,32          stb   [R72+e7],R32       [Famreg] = R32;      
//  EGR Mass Flow                                                                     //
8 404b: af,74,0a,38          ldzbw R38,[R74+a]        R38 = (uns)REm;      
8 404f: 09,03,38             shlw  R38,3              R38 = R38 * 8;       
8 4052: 64,a2,38             ad2w  R38,Ra2            R38 += RAM;          
8 4055: d3,03                jnc   405a               if (R38 <= ffff) goto 405a;
//  clamp max to FFFF                                                                 //
8 4057: bd,ff,38             ldsbw R38,ff             R38 = (sig)ff;       
8 405a: a0,38,a4             ldw   Ra4,R38            [Ampem] = R38;       
8 405d: a3,74,d4,3e          ldw   R3e,[R74+d4]       R3e = [Archg];       
8 4061: 01,3c                clrw  R3c                R3c = 0;             
8 4063: 0c,03,3c             shrdw R3c,3              R3cL = R3cL / 8;     
8 4066: 8f,f4,44,3c          divw  R3c,[Rf4+44]       R3c = R3cL / [Engdisp];
8 406a: d5,03                jnv   406f               if (!OV) goto 406f;  
//  clamp max to FFFF                                                                 //
8 406c: bd,ff,3c             ldsbw R3c,ff             R3c = (sig)ff;       

406f - Sub 8 406f:
8 406f: c3,74,de,3c          stw   [R74+de],R3c       [Load] = R3c;        
8 4073: 45,12,02,fc,32       ad3w  R32,Rfc,212        R32 = Fc043;         
8 4078: a0,ae,34             ldw   R34,Rae            R34 = [Rpmx4];       
8 407b: ef,8e,f5             call  360c               UUWordLu();          
8 407e: af,74,80,30          ldzbw R30,[R74+80]       R30 = (uns)RBp;      
//  BP * fs(RPM)                                                                      //
8 4082: 6c,38,30             ml2w  R30,R38            R30 *= R38;          
8 4085: 8d,ef,00,30          divw  R30,ef             R30 = R30L / ef;     
8 4089: d5,03                jnv   408e               if (!OV) goto 408e;  
//  clamp max to FFFF                                                                 //
8 408b: bd,ff,30             ldsbw R30,ff             R30 = (sig)ff;       
8 408e: c3,74,e0,30          stw   [R74+e0],R30       [Peak_load] = R30;   
8 4092: 9b,fc,02,00          cmpb  0,[Rfc+2]                               
//  never jumps ?                                                                     //
8 4096: d7,10                jne   40a8               if (0 != [Sc0111]) goto 40a8;
8 4098: a0,3c,3e             ldw   R3e,R3c            R3e = R3c;           
8 409b: 01,3c                clrw  R3c                R3c = 0;             
//  div by 2                                                                          //
8 409d: 0c,01,3c             shrdw R3c,1              R3cL = R3cL / 2;     
//  air flow / (RPM * CID) = VE (=Load)                                               //
8 40a0: 8c,30,3c             divw  R3c,R30            R3c = R3cL / R30;    
8 40a3: d5,03                jnv   40a8               if (!OV) goto 40a8;  
//  clamp max to FFFF                                                                 //
8 40a5: bd,ff,3c             ldsbw R3c,ff             R3c = (sig)ff;       

40a8 - Sub 8 40a8:
8 40a8: c3,74,e2,3c          stw   [R74+e2],R3c       [Perload] = R3c;     
8 40ac: ef,a5,f5             call  3654               Srolav3T([Aeload],[Load],[d054]);
8 40af: 1c,02,5c,02,54,d0                             #args                
//  Save filtered Load                                                                //
8 40b5: c3,74,9e,3e          stw   [R74+9e],R3e       [Aeload] = R3e;      
8 40b9: f0                   ret                      return;              

Update_Egr:
8 40ba: 36,e6,4a             jnb   B6,Re6,4107        if (!B6_[Flags_e6]) goto 4107;
8 40bd: 3f,a1,3c             jb    B7,Ra1,40fc        if (B7_[a1_Flags]) goto 40fc;
8 40c0: ef,91,f5             call  3654               Srolav3T([EPT_Filt],[EVP_Raw],[d048]);
8 40c3: 04,01,16,01,48,d0                             #args                
//  save result                                                                       //
8 40c9: c3,72,84,3e          stw   [R72+84],R3e       [EPT_Filt] = R3e;    
8 40cd: 37,d0,2a             jnb   B7,Rd0,40fa        if (!B7_[Apt]) goto 40fa;
8 40d0: 77,fa,30,00          ad2b  0,[Rfa+30]         0 += [Sc0099];       
8 40d4: df,24                je    40fa               if ([Sc0099] == 0) goto 40fa;
//  166                                                                               //
8 40d6: af,72,e6,30          ldzbw R30,[R72+e6]       R30 = (uns)[Dsdrpm]; 
8 40da: 09,06,30             shlw  R30,6              R30 = R30 * 40;      
8 40dd: 67,fa,32,30          ad2w  R30,[Rfa+32]       R30 += [Sc0100];     
8 40e1: 88,30,ae             cmpw  Rae,R30                                 
8 40e4: d9,14                jgtu  40fa               if ((uns) [Rpmx4] > R30) goto 40fa;
8 40e6: 9b,fa,34,b0          cmpb  Rb0,[Rfa+34]                            
8 40ea: de,0e                jlt   40fa               if ((sig) [ECT] < [Sc0101]) goto 40fa;
8 40ec: ef,65,f5             call  3654               Srolav3T([KEptzer],[EVP_Raw],[d048]);
8 40ef: ee,07,16,01,48,d0                             #args                
//  Save result                                                                       //
8 40f5: c3,01,ee,07,3e       stw   [7ee],R3e          [KEptzer] = R3e;     
8 40fa: 20,27                sjmp  4123               goto 4123;           

40fc - Sub 8 40fc:
8 40fc: a3,01,ee,07,30       ldw   R30,[7ee]          R30 = [KEptzer];     
//  filtered result EVP 1                                                             //
8 4101: c3,72,84,30          stw   [R72+84],R30       [EPT_Filt] = R30;    
8 4105: 20,39                sjmp  4140               goto 4140;           

8 4107: 37,a1,02             jnb   B7,Ra1,410c        if (!B7_[a1_Flags]) goto 410c;
8 410a: 20,34                sjmp  4140               goto 4140;           

8 410c: ef,45,f5             call  3654               Srolav3T([EGR_Filt],[Evp],[d060]);
8 410f: 02,01,70,01,60,d0                             #args                
//  Store result                                                                      //
8 4115: c3,72,82,3e          stw   [R72+82],R3e       [EGR_Filt] = R3e;    
8 4119: 8b,72,a8,3e          cmpw  R3e,[R72+a8]                            
8 411d: db,04                jc    4123               if ((uns) R3e >= [EVP_Def]) goto 4123;
8 411f: c3,72,a8,3e          stw   [R72+a8],R3e       [EVP_Def] = R3e;     
8 4123: ef,2e,f5             call  3654               Srolav3T([TP_Filt],RTP,[d04e]);
8 4126: 00,01,aa,00,4e,d0                             #args                
//  Save result                                                                       //
8 412c: c3,72,80,3e          stw   [R72+80],R3e       [TP_Filt] = R3e;     
//  RPM <= 450 RPM ?                                                                  //
8 4130: 89,08,07,ae          cmpw  Rae,708                                 
8 4134: d1,0a                jleu  4140               if ((uns) [Rpmx4] <= 708) goto 4140;
8 4136: 8b,72,a6,3e          cmpw  R3e,[R72+a6]                            
8 413a: db,04                jc    4140               if ((uns) R3e >= [TPS_Min__#_was__TPS_Ratch]) goto 4140;
//  update to smaller Min TP Closed position                                          //
8 413c: c3,72,a6,3e          stw   [R72+a6],R3e       [TPS_Min__#_was__TPS_Ratch] = R3e;
8 4140: f0                   ret                      return;              

Check_spd_lim:
8 4141: 45,04,00,fc,42       ad3w  R42,Rfc,4          R42 = Halffuelon;    
8 4146: 8a,43,ae             cmpw  Rae,[R42++]                             
8 4149: d1,03                jleu  414e               if ((uns) [Rpmx4] <= [R42++]) goto 414e;
//  > 8000 rpm - Half fuel ON                                                         //
8 414b: 91,08,2f             orrb  R2f,8              [Flags_2F] |= 8;     

414e - Sub 8 414e:
8 414e: 8a,43,ae             cmpw  Rae,[R42++]                             
8 4151: db,03                jc    4156               if ((uns) [Rpmx4] >= [R42++]) goto 4156;
//  < 7500 rpm - Half fuel OFF                                                        //
8 4153: 71,f7,2f             an2b  R2f,f7             [Flags_2F] &= f7;    
8 4156: 9b,f2,47,00          cmpb  0,[Rf2+47]                              
//  tracking vehcle speed ? = 1                                                       //
8 415a: d7,07                jne   4163               if (0 != [Vstype]) goto 4163;
8 415c: 71,fb,e7             an2b  Re7,fb             [Flag_e7] &= fb;     
8 415f: 71,fe,e7             an2b  Re7,fe             [Flag_e7] &= fe;     
8 4162: f0                   ret                      return;              

4163 - Sub 8 4163:
8 4163: b3,74,3f,30          ldb   R30,[R74+3f]       R30 = [Mph_FiltH];   
//  Speed Limiter A = FF ON                                                           //
8 4167: 9a,43,30             cmpb  R30,[R42++]                             
//  jmp if speed < FF (ALWAYS)                                                        //
8 416a: d1,03                jleu  416f               if ((uns) R30 <= [R42++]) goto 416f;
8 416c: 91,20,25             orrb  R25,20             [Flags_25] |= 20;    

416f - Sub 8 416f:
8 416f: 9a,43,30             cmpb  R30,[R42++]                             
//  jmp if speed < FF                                                                 //
8 4172: db,03                jc    4177               if ((uns) R30 >= [R42++]) goto 4177;
8 4174: 71,df,25             an2b  R25,df             [Flags_25] &= df;    

4177 - Sub 8 4177:
8 4177: 9a,43,30             cmpb  R30,[R42++]                             
//  jump if speed <= ROM limit                                                        //
8 417a: d9,0d                jgtu  4189               if ((uns) R30 > [R42++]) goto 4189;
8 417c: 38,e7,0a             jb    B0,Re7,4189        if (B0_[Flag_e7]) goto 4189;
//  Speed Limiter B = FF OFF                                                          //
8 417f: 9a,42,30             cmpb  R30,[R42]                               
//  jmp if speed >= ROM limit                                                         //
8 4182: db,08                jc    418c               if ((uns) R30 >= [R42]) goto 418c;
8 4184: 71,ef,25             an2b  R25,ef             [Flags_25] &= ef;    
8 4187: 20,03                sjmp  418c               goto 418c;           

8 4189: 91,10,25             orrb  R25,10             [Flags_25] |= 10;    
8 418c: 35,25,04             jnb   B5,R25,4193        if (!B5_[Flags_25]) goto 4193;
8 418f: 91,01,e7             orrb  Re7,1              [Flag_e7] |= 1;      
8 4192: f0                   ret                      return;              

8 4193: 34,25,07             jnb   B4,R25,419d        if (!B4_[Flags_25]) goto 419d;
//  1 = High speed alternate fuel/spark                                               //
8 4196: 91,04,e7             orrb  Re7,4              [Flag_e7] |= 4;      
//  1 = fire alternate injectors                                                      //
8 4199: 71,fe,e7             an2b  Re7,fe             [Flag_e7] &= fe;     
8 419c: f0                   ret                      return;              

8 419d: 71,fb,e7             an2b  Re7,fb             [Flag_e7] &= fb;     
8 41a0: f0                   ret                      return;              

Update_clolp:
8 41a1: a3,fa,0e,30          ldw   R30,[Rfa+e]        R30 = [LDMH];        
8 41a5: 47,fa,10,30,32       ad3w  R32,R30,[Rfa+10]   R32 = R30 + [LDMHH]; 
//  260 Volumetric Efficiency                                                         //
8 41aa: 8b,74,e2,32          cmpw  R32,[R74+e2]                            
8 41ae: d9,05                jgtu  41b5               if ((uns) R32 > [Perload]) goto 41b5;
//  set LDFlag                                                                        //
8 41b0: 91,01,e9             orrb  Re9,1              [Flags_e9] |= 1;     
8 41b3: 20,09                sjmp  41be               goto 41be;           

41b5 - Sub 8 41b5:
8 41b5: 8b,74,e2,30          cmpw  R30,[R74+e2]                            
8 41b9: d1,03                jleu  41be               if ((uns) R30 <= [Perload]) goto 41be;
//  clr LDFlag                                                                        //
8 41bb: 71,fe,e9             an2b  Re9,fe             [Flags_e9] &= fe;    

41be - Sub 8 41be:
8 41be: 30,e9,21             jnb   B0,Re9,41e2        if (!B0_[Flags_e9]) goto 41e2;
//  WOT flag?                                                                         //
8 41c1: 38,d0,1e             jb    B0,Rd0,41e2        if (B0_[Apt]) goto 41e2;
//  Engine Temp 254 degrees F ?                                                       //
8 41c4: 9b,fa,0a,b0          cmpb  Rb0,[Rfa+a]                             
8 41c8: da,18                jle   41e2               if ((sig) [ECT] <= [Ldel]) goto 41e2;
//  Engine Temp 220 degrees F ?                                                       //
8 41ca: 9b,fa,0b,b0          cmpb  Rb0,[Rfa+b]                             
8 41ce: d6,12                jge   41e2               if ((sig) [ECT] >= [Ldeh]) goto 41e2;
8 41d0: b3,72,c5,42          ldb   R42,[R72+c5]       R42 = [Lugtmr];      
8 41d4: 9b,fa,0d,42          cmpb  R42,[Rfa+d]                             
8 41d8: d3,08                jnc   41e2               if ((uns) R42 < [LDLTM]) goto 41e2;
//  jmp if not WMEGOL                                                                 //
8 41da: 31,ef,05             jnb   B1,Ref,41e2        if (!B1_[Flags_ef]) goto 41e2;
8 41dd: 91,02,e9             orrb  Re9,2              [Flags_e9] |= 2;     
8 41e0: 20,03                sjmp  41e5               goto 41e5;           

8 41e2: 71,fd,e9             an2b  Re9,fd             [Flags_e9] &= fd;    
8 41e5: 45,0e,00,fc,30       ad3w  R30,Rfc,e          R30 = Sc0112;        
8 41ea: ef,62,f5             call  374f               Check_Timers();      
8 41ed: db,10                jc    41ff               if (R30 > ffff) goto 41ff;
8 41ef: b3,74,26,30          ldb   R30,[R74+26]       R30 = [Egosss];      
//  EGOCL1 = 1                                                                        //
8 41f3: 9b,fc,1a,30          cmpb  R30,[Rfc+1a]                            
8 41f7: d3,06                jnc   41ff               if ((uns) R30 < [Sc0114]) goto 41ff;
8 41f9: 91,04,ef             orrb  Ref,4              [Flags_ef] |= 4;     
8 41fc: 91,02,ef             orrb  Ref,2              [Flags_ef] |= 2;     

41ff - Sub 8 41ff:
8 41ff: a3,fc,1c,32          ldw   R32,[Rfc+1c]       R32 = [Min_cl_ld];   
//  engine load (VE? )                                                                //
8 4203: 8b,74,de,32          cmpw  R32,[R74+de]                            
8 4207: db,05                jc    420e               if ((uns) R32 >= [Load]) goto 420e;
8 4209: 91,08,ee             orrb  Ree,8              [Flags_ee] |= 8;     
8 420c: 20,0f                sjmp  421d               goto 421d;           

420e - Sub 8 420e:
8 420e: 6b,fc,1e,32          sb2w  R32,[Rfc+1e]       R32 -= [Min_ld_cl];  
8 4212: d3,09                jnc   421d               if (R32 < 0) goto 421d;
//  engine load (VE? )                                                                //
8 4214: 8b,74,de,32          cmpw  R32,[R74+de]                            
8 4218: d1,03                jleu  421d               if ((uns) R32 <= [Load]) goto 421d;
8 421a: 71,f7,ee             an2b  Ree,f7             [Flags_ee] &= f7;    

421d - Sub 8 421d:
8 421d: 45,2e,02,fc,32       ad3w  R32,Rfc,22e        R32 = Fc044;         
8 4222: bc,b0,34             ldsbw R34,Rb0            R34 = (sig)[ECT];    
8 4225: ef,d9,f3             call  3601               SUWordLU();          
8 4228: 8b,74,e2,38          cmpw  R38,[R74+e2]                            
8 422c: d1,05                jleu  4233               if ((uns) R38 <= [Perload]) goto 4233;
8 422e: 91,01,29             orrb  R29,1              [Flags_29] |= 1;     
8 4231: 20,12                sjmp  4245               goto 4245;           

4233 - Sub 8 4233:
8 4233: 67,fc,20,38          ad2w  R38,[Rfc+20]       R38 += [HLODH];      
8 4237: d3,03                jnc   423c               if (R38 <= ffff) goto 423c;
8 4239: bd,ff,38             ldsbw R38,ff             R38 = (sig)ff;       
8 423c: 8b,74,e2,38          cmpw  R38,[R74+e2]                            
8 4240: db,03                jc    4245               if ((uns) R38 >= [Perload]) goto 4245;
8 4242: 71,fe,29             an2b  R29,fe             [Flags_29] &= fe;    

4245 - Sub 8 4245:
8 4245: a3,fc,14,38          ldw   R38,[Rfc+14]       R38 = [Openlpv];     
8 4249: 67,72,a6,38          ad2w  R38,[R72+a6]       R38 += [TPS_Min__#_was__TPS_Ratch];
8 424d: db,05                jc    4254               if (R38 > ffff) goto 4254;
8 424f: 88,aa,38             cmpw  R38,Raa                                 
8 4252: d3,05                jnc   4259               if ((uns) R38 < RTP) goto 4259;
8 4254: 91,04,29             orrb  R29,4              [Flags_29] |= 4;     
8 4257: 20,0e                sjmp  4267               goto 4267;           

4259 - Sub 8 4259:
8 4259: 67,fa,04,38          ad2w  R38,[Rfa+4]        R38 += [Tp_Hysts2];  
8 425d: db,08                jc    4267               if (R38 > ffff) goto 4267;
8 425f: 88,aa,38             cmpw  R38,Raa                                 
8 4262: db,03                jc    4267               if ((uns) R38 >= RTP) goto 4267;
8 4264: 71,fb,29             an2b  R29,fb             [Flags_29] &= fb;    
8 4267: 33,ee,49             jnb   B3,Ree,42b3        if (!B3_[Flags_ee]) goto 42b3;
8 426a: 32,29,46             jnb   B2,R29,42b3        if (!B2_[Flags_29]) goto 42b3;
8 426d: 32,ef,43             jnb   B2,Ref,42b3        if (!B2_[Flags_ef]) goto 42b3;
8 4270: 9b,fc,53,b3          cmpb  Rb3,[Rfc+53]                            
8 4274: d7,3d                jne   42b3               if ([Ppctr] != [Pipnum]) goto 42b3;
8 4276: 36,25,3a             jnb   B6,R25,42b3        if (!B6_[Flags_25]) goto 42b3;
8 4279: 3a,e7,37             jb    B2,Re7,42b3        if (B2_[Flag_e7]) goto 42b3;
8 427c: 39,e9,34             jb    B1,Re9,42b3        if (B1_[Flags_e9]) goto 42b3;
8 427f: 30,d0,0a             jnb   B0,Rd0,428c        if (!B0_[Apt]) goto 428c;
8 4282: b3,72,c4,32          ldb   R32,[R72+c4]       R32 = [Ctntmr];      
8 4286: 9b,f4,72,32          cmpb  R32,[Rf4+72]                            
8 428a: d9,27                jgtu  42b3               if ((uns) R32 > [Niold]) goto 42b3;
8 428c: 30,ec,06             jnb   B0,Rec,4295        if (!B0_[Flag_ec]) goto 4295;
8 428f: 9b,f4,07,00          cmpb  0,[Rf4+7]                               
8 4293: d7,1e                jne   42b3               if (0 != [Mfasw]) goto 42b3;
8 4295: 38,29,0a             jb    B0,R29,42a2        if (B0_[Flags_29]) goto 42a2;
//  High load timer - 1/8 seconds under high load so far                              //
8 4298: b3,72,cc,32          ldb   R32,[R72+cc]       R32 = [Hltmr];       
//  time at high load to force Open loop(seconds)                                     //
8 429c: 9b,fc,22,32          cmpb  R32,[Rfc+22]                            
8 42a0: d9,11                jgtu  42b3               if ((uns) R32 > [Ol_time]) goto 42b3;
8 42a2: 32,ee,03             jnb   B2,Ree,42a8        if (!B2_[Flags_ee]) goto 42a8;
8 42a5: 91,01,eb             orrb  Reb,1              [Flags_eb] |= 1;     
8 42a8: 71,fb,ee             an2b  Ree,fb             [Flags_ee] &= fb;    
//  1 = closed loop control mode                                                      //
8 42ab: b1,01,34             ldb   R34,1              R34 = 1;             
8 42ae: c7,74,92,34          stb   [R74+92],R34       [Clflg] = R34;       
8 42b2: f0                   ret                      return;              

8 42b3: 91,04,ee             orrb  Ree,4              [Flags_ee] |= 4;     
//  set open loop                                                                     //
8 42b6: c7,74,92,00          stb   [R74+92],0         [Clflg] = 0;         
8 42ba: b1,01,34             ldb   R34,1              R34 = 1;             
//  ENPIP1 = 1                                                                        //
8 42bd: c7,74,ea,34          stb   [R74+ea],R34       [Enpip1] = R34;      
//  ENPIP2 = 1                                                                        //
8 42c1: c7,74,eb,34          stb   [R74+eb],R34       [Enpip2] = R34;      
8 42c5: f0                   ret                      return;              

Calc_Fuel_ratio:
8 42c6: 01,14                clrw  R14                R14 = 0;             
8 42c8: 01,16                clrw  R16                R16 = 0;             
8 42ca: 39,ed,21             jb    B1,Red,42ee        if (B1_[Flags_ed]) goto 42ee;
8 42cd: 71,fd,ee             an2b  Ree,fd             [Flags_ee] &= fd;    
8 42d0: 37,ea,03             jnb   B7,Rea,42d6        if (!B7_[Flags_ea]) goto 42d6;
8 42d3: 91,02,ee             orrb  Ree,2              [Flags_ee] |= 2;     
8 42d6: 71,fe,ee             an2b  Ree,fe             [Flags_ee] &= fe;    
8 42d9: 33,27,03             jnb   B3,R27,42df        if (!B3_[Flags_27]) goto 42df;
8 42dc: 91,01,ee             orrb  Ree,1              [Flags_ee] |= 1;     
8 42df: 28,85                scall 4366               Sub0249();           
8 42e1: 38,ed,23             jb    B0,Red,4307        if (B0_[Flags_ed]) goto 4307;
//  no of HEGOs                                                                       //
8 42e4: af,fe,16,16          ldzbw R16,[Rfe+16]       R16 = (uns)[No_hegos];
8 42e8: 31,16,1c             jnb   B1,R16,4307        if (!B1_R16) goto 4307;
8 42eb: ad,01,14             ldzbw R14,1              R14 = (uns)1;        
8 42ee: 71,fd,ee             an2b  Ree,fd             [Flags_ee] &= fd;    
8 42f1: 36,ea,03             jnb   B6,Rea,42f7        if (!B6_[Flags_ea]) goto 42f7;
8 42f4: 91,02,ee             orrb  Ree,2              [Flags_ee] |= 2;     
8 42f7: 71,fe,ee             an2b  Ree,fe             [Flags_ee] &= fe;    
8 42fa: 30,27,03             jnb   B0,R27,4300        if (!B0_[Flags_27]) goto 4300;
8 42fd: 91,01,ee             orrb  Ree,1              [Flags_ee] |= 1;     
8 4300: 28,64                scall 4366               Sub0249();           
8 4302: 39,ed,02             jb    B1,Red,4307        if (B1_[Flags_ed]) goto 4307;
8 4305: 20,08                sjmp  430f               goto 430f;           

4307 - Sub 8 4307:
8 4307: a3,74,8c,42          ldw   R42,[R74+8c]       R42 = [Lambse1];     
//  Desired fuel ratio for the right side bank                                        //
8 430b: c3,74,8e,42          stw   [R74+8e],R42       [Lambse2] = R42;     
8 430f: 3b,ec,16             jb    B3,Rec,4328        if (B3_[Flag_ec]) goto 4328;
8 4312: 33,26,1b             jnb   B3,R26,4330        if (!B3_[Flags_26]) goto 4330;
8 4315: 71,f7,26             an2b  R26,f7             [Flags_26] &= f7;    
8 4318: 01,16                clrw  R16                R16 = 0;             
8 431a: a3,fc,26,34          ldw   R34,[Rfc+26]       R34 = [Lammin];      
8 431e: 29,f3                scall 4513               Sub0254();           
8 4320: 07,16                incw  R16                R16++;               
8 4322: 07,16                incw  R16                R16++;               
8 4324: 29,ed                scall 4513               Sub0254();           
8 4326: 20,08                sjmp  4330               goto 4330;           

8 4328: 3b,26,05             jb    B3,R26,4330        if (B3_[Flags_26]) goto 4330;
8 432b: 91,08,26             orrb  R26,8              [Flags_26] |= 8;     
8 432e: 28,1b                scall 434b               Sub0248();           
8 4330: 37,d0,0c             jnb   B7,Rd0,433f        if (!B7_[Apt]) goto 433f;
8 4333: b3,72,eb,38          ldb   R38,[R72+eb]       R38 = [Isflag];      
8 4337: 9b,72,ec,38          cmpb  R38,[R72+ec]                            
8 433b: df,02                je    433f               if (R38 == [Islast]) goto 433f;
8 433d: 28,0c                scall 434b               Sub0248();           
8 433f: 30,eb,23             jnb   B0,Reb,4365        if (!B0_[Flags_eb]) goto 4365;
8 4342: 9b,fe,0a,00          cmpb  0,[Rfe+a]                               
8 4346: df,1d                je    4365               if (0 == [Sc0151]) goto 4365;
8 4348: 71,fe,eb             an2b  Reb,fe             [Flags_eb] &= fe;    

Sub0248:
8 434b: a1,00,80,42          ldw   R42,8000           R42 = 8000;          
8 434f: b3,74,8d,30          ldb   R30,[R74+8d]       R30 = [20b];         
8 4353: 37,30,04             jnb   B7,R30,435a        if (!B7_R30) goto 435a;
8 4356: c3,74,8c,42          stw   [R74+8c],R42       [Lambse1] = R42;     
8 435a: b3,74,8f,30          ldb   R30,[R74+8f]       R30 = [20d];         
8 435e: 37,30,04             jnb   B7,R30,4365        if (!B7_R30) goto 4365;
8 4361: c3,74,8e,42          stw   [R74+8e],R42       [Lambse2] = R42;     
8 4365: f0                   ret                      return;              

Sub0249:
8 4366: 45,92,00,fc,32       ad3w  R32,Rfc,92         R32 = Emm_rscale;    
8 436b: a0,ae,34             ldw   R34,Rae            R34 = [Rpmx4];       
8 436e: ef,9b,f2             call  360c               UUWordLu();          
8 4371: a0,38,a6             ldw   Ra6,R38            [Nrmces] = R38;      
//  load scaling                                                                      //
8 4374: 45,fa,00,f0,32       ad3w  R32,Rf0,fa         R32 = Ldscale;       
//  engine load (VE? )                                                                //
8 4379: a3,74,de,34          ldw   R34,[R74+de]       R34 = [Load];        
8 437d: ef,8c,f2             call  360c               UUWordLu();          
8 4380: a0,38,a8             ldw   Ra8,R38            [Nrmrld] = R38;      
8 4383: a0,a6,30             ldw   R30,Ra6            R30 = [Nrmces];      
8 4386: a0,a8,32             ldw   R32,Ra8            R32 = [Nrmrld];      
8 4389: ad,04,34             ldzbw R34,4              R34 = (uns)4;        
//  HEGO BIAS                                                                         //
8 438c: 45,4a,03,fc,38       ad3w  R38,Rfc,34a        R38 = Hego_bias;     
8 4391: ef,53,f3             call  36e7               STabLookup();        
//  computed HEGO bias?                                                               //
8 4394: c7,72,14,3b          stb   [R72+14],R3b       [Bias] = R3b;        
8 4398: bc,3b,1e             ldsbw R1e,R3b            R1e = (sig)R3b;      
8 439b: 01,18                clrw  R18                R18 = 0;             
8 439d: 37,1f,04             jnb   B7,R1f,43a4        if (!B7_R1f) goto 43a4;
8 43a0: 17,18                incb  R18                R18++;               
8 43a2: 03,1e                negw  R1e                R1e = -R1e;          
8 43a4: a0,a8,32             ldw   R32,Ra8            R32 = [Nrmrld];      
8 43a7: a0,a6,30             ldw   R30,Ra6            R30 = [Nrmces];      
8 43aa: ad,04,34             ldzbw R34,4              R34 = (uns)4;        
//  Closed Loop Peak-to-Peak amplitude, lambdas.                                      //
8 43ad: 45,2a,03,fc,38       ad3w  R38,Rfc,32a        R38 = Hego_ampl;     
8 43b2: ef,35,f3             call  36ea               UTabLookUp();        
8 43b5: ac,3b,1a             ldzbw R1a,R3b            R1a = (uns)R3b;      
8 43b8: a0,a8,32             ldw   R32,Ra8            R32 = [Nrmrld];      
8 43bb: a0,a6,30             ldw   R30,Ra6            R30 = [Nrmces];      
8 43be: ad,04,34             ldzbw R34,4              R34 = (uns)4;        
//  time delay from when fuel change made until the EGO sensor sees it                //
8 43c1: 45,0a,03,fc,38       ad3w  R38,Rfc,30a        R38 = Ex_pulse;      
8 43c6: ef,21,f3             call  36ea               UTabLookUp();        
8 43c9: b0,3b,1d             ldb   R1d,R3b            R1d = R3b;           
8 43cc: b0,1a,3b             ldb   R3b,R1a            R3b = R1a;           
8 43cf: a0,1e,38             ldw   R38,R1e            R38 = R1e;           
8 43d2: 09,07,38             shlw  R38,7              R38 = R38 * 80;      
8 43d5: 9c,3b,38             divb  R38,R3b            R38 = R38W / R3b;    
8 43d8: dd,05                jv    43df               if (OV) goto 43df;   
8 43da: 99,e6,38             cmpb  R38,e6                                  
8 43dd: d1,03                jleu  43e2               if ((uns) R38 <= e6) goto 43e2;
8 43df: b1,e6,38             ldb   R38,e6             R38 = e6;            
8 43e2: b0,38,1c             ldb   R1c,R38            R1c = R38;           
8 43e5: 30,ee,02             jnb   B0,Ree,43ea        if (!B0_[Flags_ee]) goto 43ea;
8 43e8: 20,71                sjmp  445b               goto 445b;           

8 43ea: a0,1e,3c             ldw   R3c,R1e            R3c = R1e;           
8 43ed: a0,1a,30             ldw   R30,R1a            R30 = R1a;           
8 43f0: 09,02,30             shlw  R30,2              R30 = R30 * 4;       
8 43f3: 68,30,3c             sb2w  R3c,R30            R3c -= R30;          
8 43f6: db,61                jc    4459               if (R3c >= 0) goto 4459;
8 43f8: 03,3c                negw  R3c                R3c = -R3c;          
8 43fa: 45,6e,01,f0,32       ad3w  R32,Rf0,16e        R32 = Fn339;         
8 43ff: b0,1c,34             ldb   R34,R1c            R34 = R1c;           
8 4402: ef,b2,f1             call  35b7               UUbyteLu();          
8 4405: 38,18,05             jb    B0,R18,440d        if (B0_R18) goto 440d;
8 4408: 39,ee,07             jb    B1,Ree,4412        if (B1_[Flags_ee]) goto 4412;
8 440b: 20,03                sjmp  4410               goto 4410;           

8 440d: 31,ee,02             jnb   B1,Ree,4412        if (!B1_[Flags_ee]) goto 4412;
8 4410: 13,38                negb  R38                R38 = -R38;          
8 4412: 6c,38,3c             ml2w  R3c,R38            R3c *= R38;          
8 4415: ac,1d,38             ldzbw R38,R1d            R38 = (uns)R1d;      
8 4418: 6d,c0,03,38          ml2w  R38,3c0            R38 *= 3c0;          
8 441c: 8c,ae,38             divw  R38,Rae            R38 = R38L / [Rpmx4];
8 441f: d5,03                jnv   4424               if (!OV) goto 4424;  
8 4421: bd,ff,38             ldsbw R38,ff             R38 = (sig)ff;       
8 4424: 8c,38,3c             divw  R3c,R38            R3c = R3cL / R38;    
8 4427: d5,03                jnv   442c               if (!OV) goto 442c;  
8 4429: bd,ff,3c             ldsbw R3c,ff             R3c = (sig)ff;       
8 442c: 4b,17,74,02,06,34    sb3w  R34,R06,[R16+274]  R34 = IO_TIMER - [R16+Tslamu1];
8 4432: 6d,44,28,34          ml2w  R34,2844           R34 *= 2844;         
8 4436: 6c,36,3c             ml2w  R3c,R36            R3c *= R36;          
//  20A - LAMBSE1( )[divide by 32768]                                                 //
8 4439: a3,17,0a,02,34       ldw   R34,[R16+20a]      R34 = [R16+Lambse1]; 
8 443e: 39,ee,09             jb    B1,Ree,444a        if (B1_[Flags_ee]) goto 444a;
8 4441: 68,3e,34             sb2w  R34,R3e            R34 -= R3e;          
8 4444: db,0c                jc    4452               if (R34 >= 0) goto 4452;
8 4446: 01,34                clrw  R34                R34 = 0;             
8 4448: 20,08                sjmp  4452               goto 4452;           

8 444a: 64,3e,34             ad2w  R34,R3e            R34 += R3e;          
8 444d: d3,03                jnc   4452               if (R34 <= ffff) goto 4452;
//  clamp overflow                                                                    //
8 444f: bd,ff,34             ldsbw R34,ff             R34 = (sig)ff;       

4452 - Sub 8 4452:
8 4452: 28,aa                scall 44fe               Clamp_Lamda();       
//  20A - LAMBSE1( )[divide by 32768]                                                 //
8 4454: c3,17,0a,02,34       stw   [R16+20a],R34      [R16+Lambse1] = R34; 
8 4459: 20,9d                sjmp  44f8               goto 44f8;           

8 445b: a0,1a,3c             ldw   R3c,R1a            R3c = R1a;           
8 445e: 09,02,3c             shlw  R3c,2              R3c = R3c * 4;       
8 4461: 45,78,01,f0,32       ad3w  R32,Rf0,178        R32 = Fn342;         
8 4466: b0,1c,34             ldb   R34,R1c            R34 = R1c;           
8 4469: 30,18,05             jnb   B0,R18,4471        if (!B0_R18) goto 4471;
8 446c: 39,ee,0f             jb    B1,Ree,447e        if (B1_[Flags_ee]) goto 447e;
8 446f: 20,03                sjmp  4474               goto 4474;           

8 4471: 31,ee,0a             jnb   B1,Ree,447e        if (!B1_[Flags_ee]) goto 447e;
8 4474: 64,1e,3c             ad2w  R3c,R1e            R3c += R1e;          
8 4477: 45,86,01,f0,32       ad3w  R32,Rf0,186        R32 = Fn344;         
8 447c: 17,19                incb  R19                R19++;               
8 447e: ef,36,f1             call  35b7               UUbyteLu();          
8 4481: 6c,3c,38             ml2w  R38,R3c            R38 *= R3c;          
8 4484: 0c,04,38             shrdw R38,4              R38L = R38L / 10;    
8 4487: b3,15,68,02,3c       ldb   R3c,[R14+268]      R3c = [R14+Enpip1];  
8 448c: 9b,15,9c,00,3c       cmpb  R3c,[R14+9c]                            
8 4491: db,05                jc    4498               if ((uns) R3c >= [R14+Anpip1]) goto 4498;
8 4493: c7,15,9c,00,3c       stb   [R14+9c],R3c       [R14+Anpip1] = R3c;  
8 4498: af,15,9c,00,3c       ldzbw R3c,[R14+9c]       R3c = (uns)[R14+Anpip1];
8 449d: 6c,38,3c             ml2w  R3c,R38            R3c *= R38;          
8 44a0: af,15,68,02,38       ldzbw R38,[R14+268]      R38 = (uns)[R14+Enpip1];
8 44a5: 8c,38,3c             divw  R3c,R38            R3c = R3cL / R38;    
//  20A - LAMBSE1( )[divide by 32768]                                                 //
8 44a8: a3,17,0a,02,34       ldw   R34,[R16+20a]      R34 = [R16+Lambse1]; 
8 44ad: 39,ee,09             jb    B1,Ree,44b9        if (B1_[Flags_ee]) goto 44b9;
8 44b0: 68,3c,34             sb2w  R34,R3c            R34 -= R3c;          
8 44b3: db,0c                jc    44c1               if (R34 >= 0) goto 44c1;
8 44b5: 01,34                clrw  R34                R34 = 0;             
8 44b7: 20,08                sjmp  44c1               goto 44c1;           

8 44b9: 64,3c,34             ad2w  R34,R3c            R34 += R3c;          
8 44bc: d3,03                jnc   44c1               if (R34 <= ffff) goto 44c1;
//  clamp overflow                                                                    //
8 44be: bd,ff,34             ldsbw R34,ff             R34 = (sig)ff;       

44c1 - Sub 8 44c1:
8 44c1: 28,3b                scall 44fe               Clamp_Lamda();       
//  20A - LAMBSE1( )[divide by 32768]                                                 //
8 44c3: c3,17,0a,02,34       stw   [R16+20a],R34      [R16+Lambse1] = R34; 
8 44c8: c7,15,9c,00,00       stb   [R14+9c],0         [R14+Anpip1] = 0;    
8 44cd: ac,1d,3c             ldzbw R3c,R1d            R3c = (uns)R1d;      
8 44d0: 09,01,3c             shlw  R3c,1              R3c = R3c * 2;       
8 44d3: b1,10,38             ldb   R38,10             R38 = 10;            
8 44d6: 38,19,0b             jb    B0,R19,44e4        if (B0_R19) goto 44e4;
8 44d9: 45,90,01,f0,32       ad3w  R32,Rf0,190        R32 = Fn346;         
8 44de: b0,1c,34             ldb   R34,R1c            R34 = R1c;           
8 44e1: ef,d3,f0             call  35b7               UUbyteLu();          
8 44e4: 7f,fe,07,38          ml2b  R38,[Rfe+7]        R38 *= [PIPsC];      
8 44e8: 6c,38,3c             ml2w  R3c,R38            R3c *= R38;          
8 44eb: 88,00,3e             cmpw  R3e,0                                   
8 44ee: df,03                je    44f3               if (R3e == 0) goto 44f3;
8 44f0: b1,ff,3d             ldb   R3d,ff             R3d = ff;            
8 44f3: c7,15,68,02,3d       stb   [R14+268],R3d      [R14+Enpip1] = R3d;  
8 44f8: c3,17,74,02,06       stw   [R16+274],R06      [R16+Tslamu1] = IO_TIMER;
8 44fd: f0                   ret                      return;              

Clamp_Lamda:
8 44fe: 8b,fc,24,34          cmpw  R34,[Rfc+24]                            
8 4502: d1,04                jleu  4508               if ((uns) R34 <= [Lammax]) goto 4508;
8 4504: a3,fc,24,34          ldw   R34,[Rfc+24]       R34 = [Lammax];      

4508 - Sub 8 4508:
8 4508: 8b,fc,26,34          cmpw  R34,[Rfc+26]                            
8 450c: db,04                jc    4512               if ((uns) R34 >= [Lammin]) goto 4512;
8 450e: a3,fc,26,34          ldw   R34,[Rfc+26]       R34 = [Lammin];      
8 4512: f0                   ret                      return;              

Sub0254:
8 4513: a3,17,0a,02,36       ldw   R36,[R16+20a]      R36 = [R16+Lambse1]; 
8 4518: 6b,fc,74,36          sb2w  R36,[Rfc+74]       R36 -= [LMBJMP];     
8 451c: d3,05                jnc   4523               if (R36 < 0) goto 4523;
8 451e: 88,34,36             cmpw  R36,R34                                 
8 4521: db,03                jc    4526               if ((uns) R36 >= R34) goto 4526;
8 4523: c0,36,34             stw   R36,R34            R36 = R34;           

4526 - Sub 8 4526:
8 4526: c3,17,0a,02,36       stw   [R16+20a],R36      [R16+Lambse1] = R36; 
8 452b: f0                   ret                      return;              

Sub0256:
8 452c: 45,d2,00,f0,32       ad3w  R32,Rf0,d2         R32 = Ectflscale;    
8 4531: b3,fc,35,36          ldb   R36,[Rfc+35]       R36 = [Sc0120];      
8 4535: 29,b1                scall 46e8               Sub0262();           
8 4537: 0a,07,34             asrw  R34,7              R34 = R34 / 80;      
8 453a: ef,6f,f0             call  35ac               subyteLU();          
8 453d: b0,38,30             ldb   R30,R38            R30 = R38;           
8 4540: 45,16,01,f0,32       ad3w  R32,Rf0,116        R32 = Fn072A;        
//  260 Volumetric Efficiency                                                         //
8 4545: a3,74,e2,34          ldw   R34,[R74+e2]       R34 = [Perload];     
8 4549: ef,c0,f0             call  360c               UUWordLu();          
8 454c: b0,38,32             ldb   R32,R38            R32 = R38;           
8 454f: ad,0a,34             ldzbw R34,a              R34 = (uns)a;        
//  Base Fuel (A/F ratio) (ECT vs load)                                               //
8 4552: 45,72,01,fc,38       ad3w  R38,Rfc,172        R38 = Tb008;         
8 4557: ef,81,f1             call  36db               UTabLu16();          
//  Open Loop Fuel Multiplier vs ACT                                                  //
8 455a: 45,ca,00,fc,32       ad3w  R32,Rfc,ca         R32 = Olactmult;     
//  RB1 = ACT (ACT = RB1 * 4)                                                         //
8 455f: b0,b1,34             ldb   R34,Rb1            R34 = [ACT];         
8 4562: ef,47,f0             call  35ac               subyteLU();          
8 4565: 5c,3b,38,3c          ml3b  R3c,R38,R3b        R3c = R38 * R3b;     
8 4569: 45,d2,00,f0,32       ad3w  R32,Rf0,d2         R32 = Ectflscale;    
8 456e: b3,fc,36,36          ldb   R36,[Rfc+36]       R36 = [Sc0121];      
8 4572: 29,74                scall 46e8               Sub0262();           
8 4574: 0a,07,34             asrw  R34,7              R34 = R34 / 80;      
8 4577: ef,32,f0             call  35ac               subyteLU();          
8 457a: b0,38,30             ldb   R30,R38            R30 = R38;           
8 457d: 45,90,00,f0,32       ad3w  R32,Rf0,90         R32 = Fn018;         
8 4582: b0,c8,34             ldb   R34,Rc8            R34 = [Atmr1];       
8 4585: ef,2f,f0             call  35b7               UUbyteLu();          
8 4588: b0,38,32             ldb   R32,R38            R32 = R38;           
8 458b: ad,0a,34             ldzbw R34,a              R34 = (uns)a;        
//  Startup Fuel (A/F ratio)(ECT vs Time)                                             //
8 458e: 45,c2,01,fc,38       ad3w  R38,Rfc,1c2        R38 = Tb009;         
8 4593: ef,45,f1             call  36db               UTabLu16();          
8 4596: 69,80,00,3a          sb2w  R3a,80             R3a -= 80;           
8 459a: 08,02,3a             shrw  R3a,2              R3a = R3a / 4;       
8 459d: 68,3a,3c             sb2w  R3c,R3a            R3c -= R3a;          
8 45a0: db,02                jc    45a4               if (R3c >= 0) goto 45a4;
8 45a2: 01,3c                clrw  R3c                R3c = 0;             
8 45a4: ad,80,38             ldzbw R38,80             R38 = (uns)80;       
8 45a7: 31,e9,3f             jnb   B1,Re9,45e9        if (!B1_[Flags_e9]) goto 45e9;
8 45aa: b3,74,83,42          ldb   R42,[R74+83]       R42 = [Mult_bp212A]; 
//  Sea Level Lugging O/L Fuel Multiplier vs RPM                                      //
8 45ae: 45,82,00,fa,32       ad3w  R32,Rfa,82         R32 = Sea_llug_ol_mult;
8 45b3: a0,ae,34             ldw   R34,Rae            R34 = [Rpmx4];       
8 45b6: ef,53,f0             call  360c               UUWordLu();          
8 45b9: 7c,38,42             ml2b  R42,R38            R42 *= R38;          
8 45bc: 45,c8,00,f8,32       ad3w  R32,Rf8,c8         R32 = Fc019;         
//  barometric pressure                                                               //
8 45c1: b3,74,80,34          ldb   R34,[R74+80]       R34 = RBp;           
8 45c5: ef,ef,ef             call  35b7               UUbyteLu();          
8 45c8: b0,38,30             ldb   R30,R38            R30 = R38;           
//  Altitude Lugging O/L Fuel Multiplier vs RPM                                       //
8 45cb: 45,9e,00,fa,32       ad3w  R32,Rfa,9e         R32 = Alt_lug_ol_mult;
8 45d0: a0,ae,34             ldw   R34,Rae            R34 = [Rpmx4];       
8 45d3: ef,36,f0             call  360c               UUWordLu();          
8 45d6: 7c,30,38             ml2b  R38,R30            R38 *= R30;          
8 45d9: 64,42,38             ad2w  R38,R42            R38 += R42;          
8 45dc: db,06                jc    45e4               if (R38 > ffff) goto 45e4;
8 45de: 08,07,38             shrw  R38,7              R38 = R38 / 80;      
8 45e1: 30,39,03             jnb   B0,R39,45e7        if (!B0_R39) goto 45e7;
8 45e4: ad,ff,38             ldzbw R38,ff             R38 = (uns)ff;       
8 45e7: 20,a7                sjmp  4690               goto 4690;           

8 45e9: 36,26,0d             jnb   B6,R26,45f9        if (!B6_[Flags_26]) goto 45f9;
8 45ec: 37,d0,0a             jnb   B7,Rd0,45f9        if (!B7_[Apt]) goto 45f9;
8 45ef: 3a,ef,07             jb    B2,Ref,45f9        if (B2_[Flags_ef]) goto 45f9;
//  fuel closed throttle open loop multiply                                           //
8 45f2: 45,d6,00,fc,32       ad3w  R32,Rfc,d6         R32 = Cl_ol_fuel;    
8 45f7: 20,91                sjmp  468a               goto 468a;           

8 45f9: 32,26,2c             jnb   B2,R26,4628        if (!B2_[Flags_26]) goto 4628;
8 45fc: 9b,fe,05,ad          cmpb  Rad,[Rfe+5]                             
8 4600: da,26                jle   4628               if ((sig) [Tcstrt] <= [CtLow]) goto 4628;
8 4602: 9b,f4,0a,ad          cmpb  Rad,[Rf4+a]                             
8 4606: d6,20                jge   4628               if ((sig) [Tcstrt] >= [Cthin]) goto 4628;
8 4608: 9b,f4,0c,c8          cmpb  Rc8,[Rf4+c]                             
8 460c: db,1a                jc    4628               if ((uns) [Atmr1] >= [Olmtd1]) goto 4628;
8 460e: 45,ee,00,fc,32       ad3w  R32,Rfc,ee         R32 = Fc042;         
8 4613: a0,ae,34             ldw   R34,Rae            R34 = [Rpmx4];       
8 4616: ef,f3,ef             call  360c               UUWordLu();          
8 4619: 7f,f4,0b,38          ml2b  R38,[Rf4+b]        R38 *= [Numpr];      
8 461d: 08,07,38             shrw  R38,7              R38 = R38 / 80;      
8 4620: 30,39,03             jnb   B0,R39,4626        if (!B0_R39) goto 4626;
8 4623: ad,ff,38             ldzbw R38,ff             R38 = (uns)ff;       
8 4626: 20,68                sjmp  4690               goto 4690;           

8 4628: 30,ec,4d             jnb   B0,Rec,4678        if (!B0_[Flag_ec]) goto 4678;
8 462b: 9b,f4,07,00          cmpb  0,[Rf4+7]                               
8 462f: df,47                je    4678               if (0 == [Mfasw]) goto 4678;
//  Table spark RPM scaling                                                           //
8 4631: 45,de,00,f0,32       ad3w  R32,Rf0,de         R32 = Rpmscale;      
8 4636: a0,ae,34             ldw   R34,Rae            R34 = [Rpmx4];       
8 4639: ef,d0,ef             call  360c               UUWordLu();          
8 463c: a0,38,30             ldw   R30,R38            R30 = R38;           
//  Table 9016                                                                        //
8 463f: 45,16,01,f0,32       ad3w  R32,Rf0,116        R32 = Fn072A;        
//  260 Volumetric Efficiency                                                         //
8 4644: a3,74,e2,34          ldw   R34,[R74+e2]       R34 = [Perload];     
8 4648: ef,c1,ef             call  360c               UUWordLu();          
8 464b: 09,04,38             shlw  R38,4              R38 = R38 * 10;      
8 464e: a0,38,32             ldw   R32,R38            R32 = R38;           
8 4651: ad,0a,34             ldzbw R34,a              R34 = (uns)a;        
//  Manage Fuel Air Fuel Table, 10 x 8 Table of multipliers as a function of engine speed N and LOAD  //
8 4654: 45,93,00,f4,38       ad3w  R38,Rf4,93         R38 = Fn1328;        
8 4659: ef,8e,f0             call  36ea               UTabLookUp();        
8 465c: b3,74,82,38          ldb   R38,[R74+82]       R38 = [Mult_bp311];  
8 4660: 7c,3b,38             ml2b  R38,R3b            R38 *= R3b;          
8 4663: 5f,74,f4,39,38       ml3b  R38,R39,[R74+f4]   R38 = R39 * [Mfamul];
8 4668: 09,02,38             shlw  R38,2              R38 = R38 * 4;       
8 466b: 55,80,39,38          ad3b  R38,R39,80         R38 = R39 + 80;      
8 466f: d3,03                jnc   4674               if (R38 <= ff) goto 4674;
8 4671: b1,ff,38             ldb   R38,ff             R38 = ff;            
8 4674: 11,39                clrb  R39                R39 = 0;             
8 4676: 20,18                sjmp  4690               goto 4690;           

4678 - Sub 8 4678:
8 4678: 32,26,07             jnb   B2,R26,4682        if (!B2_[Flags_26]) goto 4682;
//  WOT Fuel Multiplier vs RPM 1                                                      //
8 467b: 45,ee,00,fc,32       ad3w  R32,Rfc,ee         R32 = Fc042;         
8 4680: 20,08                sjmp  468a               goto 468a;           

8 4682: 30,24,0b             jnb   B0,R24,4690        if (!B0_[Flags_24]) goto 4690;
//  WOT Fuel Multiplier vs RPM 2                                                      //
8 4685: 45,02,01,fc,32       ad3w  R32,Rfc,102        R32 = Wot_fuel_mlt;  
8 468a: a0,ae,34             ldw   R34,Rae            R34 = [Rpmx4];       
8 468d: ef,7c,ef             call  360c               UUWordLu();          
8 4690: 6c,38,3c             ml2w  R3c,R38            R3c *= R38;          
8 4693: 0c,05,3c             shrdw R3c,5              R3cL = R3cL / 20;    
8 4696: 88,00,3e             cmpw  R3e,0                                   
8 4699: df,03                je    469e               if (R3e == 0) goto 469e;
8 469b: bd,ff,3c             ldsbw R3c,ff             R3c = (sig)ff;       

469e - Sub 8 469e:
8 469e: 6f,72,e8,3c          ml2w  R3c,[R72+e8]       R3c *= [Lammul];     
8 46a2: 98,3f,00             cmpb  0,R3f                                   
8 46a5: df,05                je    46ac               if (0 == R3f) goto 46ac;
8 46a7: bd,ff,3c             ldsbw R3c,ff             R3c = (sig)ff;       
8 46aa: 20,03                sjmp  46af               goto 46af;           

8 46ac: 0c,08,3c             shrdw R3c,8              R3cL = R3cL / 100;   

46af - Sub 8 46af:
8 46af: 6f,fa,12,3c          ml2w  R3c,[Rfa+12]       R3c *= [Olflmult];   
8 46b3: 98,3f,00             cmpb  0,R3f                                   
8 46b6: df,05                je    46bd               if (0 == R3f) goto 46bd;
8 46b8: bd,ff,3e             ldsbw R3e,ff             R3e = (sig)ff;       
8 46bb: 20,03                sjmp  46c0               goto 46c0;           

8 46bd: 0d,08,3c             shldw R3c,8              R3cL = R3cL * 100;   

46c0 - Sub 8 46c0:
8 46c0: 32,e7,15             jnb   B2,Re7,46d8        if (!B2_[Flag_e7]) goto 46d8;
//  Table (vehicle speed - LAMBSE)                                                    //
8 46c3: 45,73,00,fa,32       ad3w  R32,Rfa,73         R32 = Fc026;         
//  vehicle speed filtered(1) (MPH) 2BC is 8.8 format VSS                             //
8 46c8: b3,74,3f,34          ldb   R34,[R74+3f]       R34 = [Mph_FiltH];   
8 46cc: ef,e8,ee             call  35b7               UUbyteLu();          
8 46cf: a0,3e,3c             ldw   R3c,R3e            R3c = R3e;           
8 46d2: 09,08,38             shlw  R38,8              R38 = R38 * 100;     
8 46d5: 6c,38,3c             ml2w  R3c,R38            R3c *= R38;          
8 46d8: 88,00,3e             cmpw  R3e,0                                   
8 46db: d7,02                jne   46df               if (R3e != 0) goto 46df;
8 46dd: 07,3e                incw  R3e                R3e++;               

46df - Sub 8 46df:
8 46df: c3,74,8c,3e          stw   [R74+8c],R3e       [Lambse1] = R3e;     
//  Desired fuel ratio for the right side bank of injectors                           //
8 46e3: c3,74,8e,3e          stw   [R74+8e],R3e       [Lambse2] = R3e;     
8 46e7: f0                   ret                      return;              

Sub0262:
8 46e8: fe,5c,b1,36,34       sml3b  R34,R36,Rb1       R34 = (sig)R36 * [ACT];
8 46ed: 13,36                negb  R36                R36 = -R36;          
8 46ef: 75,7f,36             ad2b  R36,7f             R36 += 7f;           
8 46f2: fe,7c,b0,36          sml2b  R36,Rb0           R36 *= (sig)[ECT];   
8 46f6: bc,b0,38             ldsbw R38,Rb0            R38 = (sig)[ECT];    
8 46f9: 64,38,36             ad2w  R36,R38            R36 += R38;          
8 46fc: 64,36,34             ad2w  R34,R36            R34 += R36;          
8 46ff: f0                   ret                      return;              

Adapt?:
8 4700: 3f,a1,14             jb    B7,Ra1,4717        if (B7_[a1_Flags]) goto 4717;
//  Run/Underspeed Flag. (1 = Underspeed or CRANK, 0 = Run)                           //
8 4703: 3a,a1,11             jb    B2,Ra1,4717        if (B2_[a1_Flags]) goto 4717;
//  ? ROM 9AE2=55                                                                     //
8 4706: 9b,fc,64,b0          cmpb  Rb0,[Rfc+64]                            
//  jump if ECT < 170 degrees Farenheit                                               //
8 470a: de,0b                jlt   4717               if ((sig) [ECT] < [MinECT_adp]) goto 4717;
//   ROM 9AE3=71                                                                      //
8 470c: 9b,fc,65,b0          cmpb  Rb0,[Rfc+65]                            
//  jump if ECT > 226 degrees Farenheit                                               //
8 4710: d2,05                jgt   4717               if ((sig) [ECT] > [MaxECT_adp]) goto 4717;
//  set Adaptive Fuel Time Flag                                                       //
8 4712: 91,01,a1             orrb  Ra1,1              [a1_Flags] |= 1;     
8 4715: 20,07                sjmp  471e               goto 471e;           

8 4717: c3,72,ba,00          stw   [R72+ba],0         [Adptmr] = 0;        
//  Adaptive Fuel Time Flag                                                           //
8 471b: 71,fe,a1             an2b  Ra1,fe             [a1_Flags] &= fe;    
8 471e: 51,f8,c5,38          an3b  R38,Rc5,f8         R38 = [Fmem_flags] & f8;
8 4722: df,02                je    4726               if (R38 == 0) goto 4726;
8 4724: 20,e9                sjmp  480f               goto 480f;           

8 4726: 3a,ee,0a             jb    B2,Ree,4733        if (B2_[Flags_ee]) goto 4733;
8 4729: a3,72,ba,38          ldw   R38,[R72+ba]       R38 = [Adptmr];      
8 472d: 8b,fc,68,38          cmpw  R38,[Rfc+68]                            
8 4731: db,02                jc    4735               if ((uns) R38 >= [ADAPTIM]) goto 4735;
8 4733: 20,da                sjmp  480f               goto 480f;           

8 4735: 33,ec,25             jnb   B3,Rec,475d        if (!B3_[Flag_ec]) goto 475d;
8 4738: b3,72,d7,30          ldb   R30,[R72+d7]       R30 = [Iscflg];      
8 473c: 99,01,30             cmpb  R30,1                                   
8 473f: d7,f2                jne   4733               if (R30 != 1) goto 4733;
8 4741: b3,72,eb,30          ldb   R30,[R72+eb]       R30 = [Isflag];      
//  the column no of the Adaptive Learning Cell to be updated                         //
8 4745: c7,74,12,30          stb   [R74+12],R30       [Coltbu] = R30;      
8 4749: 11,a6                clrb  Ra6                [Nrmces] = 0;        
8 474b: c4,a7,30             stb   Ra7,R30            Ra7 = R30;           
8 474e: a1,08,00,30          ldw   R30,8              R30 = 8;             
8 4752: c7,74,13,30          stb   [R74+13],R30       [Rowtbu] = R30;      
8 4756: c4,a9,30             stb   Ra9,R30            Ra9 = R30;           
8 4759: 11,a8                clrb  Ra8                [Nrmrld] = 0;        
8 475b: 20,4f                sjmp  47ac               goto 47ac;           

8 475d: a3,72,d2,38          ldw   R38,[R72+d2]       R38 = [Rannum];      
8 4761: 6d,03,01,38          ml2w  R38,103            R38 *= 103;          
8 4765: c3,72,d2,38          stw   [R72+d2],R38       [Rannum] = R38;      
//  ECC Load Scaling - emission load scaling                                          //
8 4769: 45,b2,00,f0,32       ad3w  R32,Rf0,b2         R32 = Emm_lscale;    
//  engine load (VE? )                                                                //
8 476e: a3,74,de,34          ldw   R34,[R74+de]       R34 = [Load];        
8 4772: ef,97,ee             call  360c               UUWordLu();          
8 4775: a0,38,a8             ldw   Ra8,R38            [Nrmrld] = R38;      
8 4778: 65,80,00,38          ad2w  R38,80             R38 += 80;           
8 477c: bf,72,d2,3a          ldsbw R3a,[R72+d2]       R3a = (sig)[Rannum]; 
8 4780: 64,3a,38             ad2w  R38,R3a            R38 += R3a;          
8 4783: c7,74,13,39          stb   [R74+13],R39       [Rowtbu] = R39;      
8 4787: c4,30,39             stb   R30,R39            R30 = R39;           
//  Table  spark RPM scaling                                                          //
8 478a: 45,de,00,f0,32       ad3w  R32,Rf0,de         R32 = Rpmscale;      
8 478f: a0,ae,34             ldw   R34,Rae            R34 = [Rpmx4];       
8 4792: ef,77,ee             call  360c               UUWordLu();          
8 4795: a0,38,a6             ldw   Ra6,R38            [Nrmces] = R38;      
8 4798: 65,80,00,38          ad2w  R38,80             R38 += 80;           
8 479c: bf,72,d3,3a          ldsbw R3a,[R72+d3]       R3a = (sig)[153];    
8 47a0: 64,3a,38             ad2w  R38,R3a            R38 += R3a;          
//  Adaptive Learning Cell to be updated                                              //
8 47a3: c7,74,12,39          stb   [R74+12],R39       [Coltbu] = R39;      
8 47a7: 99,08,30             cmpb  R30,8                                   
8 47aa: db,63                jc    480f               if ((uns) R30 >= 8) goto 480f;
8 47ac: 7d,0a,30             ml2b  R30,a              R30 *= a;            
//  Adaptive Learning Cell to be updated                                              //
8 47af: 77,74,12,30          ad2b  R30,[R74+12]       R30 += [Coltbu];     
8 47b3: 45,82,03,fc,38       ad3w  R38,Rfc,382        R38 = Lcellindx;     
8 47b8: 64,30,38             ad2w  R38,R30            R38 += R30;          
8 47bb: b2,38,38             ldb   R38,[R38]          R38 = [R38];         
8 47be: 98,38,00             cmpb  0,R38                                   
8 47c1: d2,1e                jgt   47e1               if ((sig) 0 > R38) goto 47e1;
8 47c3: 4b,74,0e,a8,38       sb3w  R38,Ra8,[R74+e]    R38 = [Nrmrld] - [Lstrow];
8 47c8: db,02                jc    47cc               if (R38 >= 0) goto 47cc;
8 47ca: 03,38                negw  R38                R38 = -R38;          
8 47cc: 8b,fc,6c,38          cmpw  R38,[Rfc+6c]                            
8 47d0: d9,0f                jgtu  47e1               if ((uns) R38 > [Sc0141]) goto 47e1;
8 47d2: 4b,74,10,a6,38       sb3w  R38,Ra6,[R74+10]   R38 = [Nrmces] - [Lstcol];
8 47d7: db,02                jc    47db               if (R38 >= 0) goto 47db;
8 47d9: 03,38                negw  R38                R38 = -R38;          
8 47db: 8b,fc,6e,38          cmpw  R38,[Rfc+6e]                            
8 47df: d1,0a                jleu  47eb               if ((uns) R38 <= [Sc0142]) goto 47eb;
8 47e1: c3,74,0e,a8          stw   [R74+e],Ra8        [Lstrow] = [Nrmrld]; 
8 47e5: c3,74,10,a6          stw   [R74+10],Ra6       [Lstcol] = [Nrmces]; 
8 47e9: 20,24                sjmp  480f               goto 480f;           

8 47eb: a3,72,0c,38          ldw   R38,[R72+c]        R38 = [Aefuel];      
8 47ef: 8b,fc,72,38          cmpw  R38,[Rfc+72]                            
8 47f3: d9,1a                jgtu  480f               if ((uns) R38 > [Sc0143]) goto 480f;
8 47f5: a0,9e,38             ldw   R38,R9e            R38 = [Eftr];        
8 47f8: 37,39,02             jnb   B7,R39,47fd        if (!B7_R39) goto 47fd;
8 47fb: 03,38                negw  R38                R38 = -R38;          
8 47fd: 8b,fc,76,38          cmpw  R38,[Rfc+76]                            
8 4801: db,0c                jc    480f               if ((uns) R38 >= [Sc0144]) goto 480f;
//  min act for adaptive control                                                      //
8 4803: 9b,fc,66,b1          cmpb  Rb1,[Rfc+66]                            
8 4807: da,06                jle   480f               if ((sig) [ACT] <= [Minact_adp]) goto 480f;
//  max act for adaptive control                                                      //
8 4809: 9b,fc,67,b1          cmpb  Rb1,[Rfc+67]                            
8 480d: de,11                jlt   4820               if ((sig) [ACT] < [Maxact_adp]) goto 4820;
8 480f: c3,01,b8,07,00       stw   [7b8],0            [KLpct1L] = 0;       
8 4814: c3,01,ba,07,00       stw   [7ba],0            [KLpct1R] = 0;       
8 4819: c3,01,b2,07,00       stw   [7b2],0            [KEgoct1] = 0;       
8 481e: 20,76                sjmp  4896               goto 4896;           

8 4820: 33,27,0c             jnb   B3,R27,482f        if (!B3_[Flags_27]) goto 482f;
8 4823: b3,01,b2,07,36       ldb   R36,[7b2]          R36 = [KEgoct1];     
8 4828: 17,36                incb  R36                R36++;               
8 482a: c7,01,b2,07,36       stb   [7b2],R36          [KEgoct1] = R36;     
8 482f: 30,27,0c             jnb   B0,R27,483e        if (!B0_[Flags_27]) goto 483e;
8 4832: b3,01,b3,07,36       ldb   R36,[7b3]          R36 = [KEgoct2];     
8 4837: 17,36                incb  R36                R36++;               
8 4839: c7,01,b3,07,36       stb   [7b3],R36          [KEgoct2] = R36;     

483e - Sub 8 483e:
8 483e: bf,72,14,38          ldsbw R38,[R72+14]       R38 = (sig)[Bias];   
8 4842: fe,6d,10,00,38       sml2w  R38,10            R38 *= (sig)10;      
8 4847: 65,00,80,38          ad2w  R38,8000           R38 += 8000;         
8 484b: a3,fc,6a,3a          ldw   R3a,[Rfc+6a]       R3a = [Sc0140];      
8 484f: b3,01,e0,07,14       ldb   R14,[7e0]          R14 = [Kwuctr];      
8 4854: 9b,fc,7a,14          cmpb  R14,[Rfc+7a]                            
8 4858: db,06                jc    4860               if ((uns) R14 >= [Sc0147]) goto 4860;
8 485a: b3,fc,79,14          ldb   R14,[Rfc+79]       R14 = [Sc0146];      
8 485e: 20,04                sjmp  4864               goto 4864;           

8 4860: b3,fc,78,14          ldb   R14,[Rfc+78]       R14 = [Sc0145];      
8 4864: 9b,01,b2,07,14       cmpb  R14,[7b2]                               
8 4869: db,0f                jc    487a               if ((uns) R14 >= [KEgoct1]) goto 487a;
8 486b: 01,32                clrw  R32                R32 = 0;             
//  KAM index = 0                                                                     //
8 486d: 01,3e                clrw  R3e                R3e = 0;             
8 486f: a1,04,07,40          ldw   R40,704            R40 = 704;           
8 4873: 51,80,ea,36          an3b  R36,Rea,80         R36 = [Flags_ea] & 80;
//  KAM Table[R3E] write something?                                                   //
8 4877: ef,1d,00             call  4897               Sub0265();           
8 487a: 9b,01,b3,07,14       cmpb  R14,[7b3]                               
8 487f: db,15                jc    4896               if ((uns) R14 >= [KEgoct2]) goto 4896;
8 4881: ad,02,32             ldzbw R32,2              R32 = (uns)2;        
//  KAM index = 1                                                                     //
8 4884: ad,01,3e             ldzbw R3e,1              R3e = (uns)1;        
8 4887: a1,5a,07,40          ldw   R40,75a            R40 = 75a;           
8 488b: 51,40,ea,36          an3b  R36,Rea,40         R36 = [Flags_ea] & 40;
8 488f: a3,fc,6a,3a          ldw   R3a,[Rfc+6a]       R3a = [Sc0140];      
//  KAM Table[R3E] write something?                                                   //
8 4893: ef,01,00             call  4897               Sub0265();           
8 4896: f0                   ret                      return;              

Sub0265:
8 4897: 64,30,40             ad2w  R40,R30            R40 += R30;          
8 489a: 98,00,36             cmpb  R36,0                                   
8 489d: df,49                je    48e8               if (R36 == 0) goto 48e8;
8 489f: 64,38,3a             ad2w  R3a,R38            R3a += R38;          
//  20A - LAMBSE1( )[divide by 32768]                                                 //
8 48a2: a3,33,0a,02,42       ldw   R42,[R32+20a]      R42 = [R32+Lambse1]; 
8 48a7: 88,3a,42             cmpw  R42,R3a                                 
8 48aa: d3,3b                jnc   48e7               if ((uns) R42 < R3a) goto 48e7;
//  KAM - read value from KAM Table                                                   //
8 48ac: b3,3f,ba,07,3c       ldb   R3c,[R3e+7ba]      R3c = [R3e+KLpct1R]; 
8 48b1: 17,3c                incb  R3c                R3c++;               
//  KAM - write value back to KAM Table                                               //
8 48b3: c7,3f,ba,07,3c       stb   [R3e+7ba],R3c      [R3e+KLpct1R] = R3c; 
//  9E00 - read index ROM Table value                                                 //
8 48b8: 45,82,03,fc,34       ad3w  R34,Rfc,382        R34 = Lcellindx;     
8 48bd: 64,30,34             ad2w  R34,R30            R34 += R30;          
8 48c0: b2,34,3d             ldb   R3d,[R34]          R3d = [R34];         
8 48c3: 19,01,3d             shlb  R3d,1              R3d = R3d * 2;       
8 48c6: 98,3d,3c             cmpb  R3c,R3d                                 
8 48c9: d1,1c                jleu  48e7               if ((uns) R3c <= R3d) goto 48e7;
8 48cb: b2,40,36             ldb   R36,[R40]          R36 = [R40];         
//  ROM adaptive control min                                                          //
8 48ce: 9b,fc,70,36          cmpb  R36,[Rfc+70]                            
8 48d2: d1,13                jleu  48e7               if ((uns) R36 <= [Adp_ctl_min]) goto 48e7;
8 48d4: 15,36                decb  R36                R36--;               
8 48d6: c6,40,36             stb   [R40],R36          [R40] = R36;         
//  KAM Table store                                                                   //
8 48d9: c7,3f,ba,07,00       stb   [R3e+7ba],0        [R3e+KLpct1R] = 0;   
//  KAM checksum                                                                      //
8 48de: a3,01,02,07,36       ldw   R36,[702]          R36 = [KCsuml];      
//  update KAM cksum and return                                                       //
8 48e3: 05,36                decw  R36                R36--;               
8 48e5: 20,49                sjmp  4930               goto 4930;           

8 48e7: f0                   ret                      return;              

8 48e8: 03,3a                negw  R3a                R3a = -R3a;          
8 48ea: 64,38,3a             ad2w  R3a,R38            R3a += R38;          
//  20A - LAMBSE1( )[divide by 32768]                                                 //
8 48ed: a3,33,0a,02,42       ldw   R42,[R32+20a]      R42 = [R32+Lambse1]; 
8 48f2: 88,3a,42             cmpw  R42,R3a                                 
//  return                                                                            //
8 48f5: d9,43                jgtu  493a               if ((uns) R42 > R3a) goto 493a;
//  KAM - read indexed KAM value                                                      //
8 48f7: b3,3f,b8,07,3c       ldb   R3c,[R3e+7b8]      R3c = [R3e+KLpct1L]; 
//  incr value                                                                        //
8 48fc: 17,3c                incb  R3c                R3c++;               
//  KAM - store back into KAM loc                                                     //
8 48fe: c7,3f,b8,07,3c       stb   [R3e+7b8],R3c      [R3e+KLpct1L] = R3c; 
//  9E00                                                                              //
8 4903: 45,82,03,fc,34       ad3w  R34,Rfc,382        R34 = Lcellindx;     
8 4908: 64,30,34             ad2w  R34,R30            R34 += R30;          
//  pull value from ROM Table                                                         //
8 490b: b2,34,3d             ldb   R3d,[R34]          R3d = [R34];         
//  byte << 1 (times 2)                                                               //
8 490e: 19,01,3d             shlb  R3d,1              R3d = R3d * 2;       
8 4911: 98,3d,3c             cmpb  R3c,R3d                                 
8 4914: d1,24                jleu  493a               if ((uns) R3c <= R3d) goto 493a;
8 4916: b2,40,36             ldb   R36,[R40]          R36 = [R40];         
//  adaptive control max                                                              //
8 4919: 9b,fc,71,36          cmpb  R36,[Rfc+71]                            
8 491d: db,1b                jc    493a               if ((uns) R36 >= [Adp_ctl_max]) goto 493a;
8 491f: 17,36                incb  R36                R36++;               
8 4921: c6,40,36             stb   [R40],R36          [R40] = R36;         
//  KAM - store value into same loc as above                                          //
8 4924: c7,3f,b8,07,00       stb   [R3e+7b8],0        [R3e+KLpct1L] = 0;   
//  KAM checksum                                                                      //
8 4929: a3,01,02,07,36       ldw   R36,[702]          R36 = [KCsuml];      
//  incr cksum to match incr to value                                                 //
8 492e: 07,36                incw  R36                R36++;               

4930 - Sub 8 4930:
8 4930: c3,01,02,07,36       stw   [702],R36          [KCsuml] = R36;      
8 4935: c7,3f,b2,07,00       stb   [R3e+7b2],0        [R3e+KEgoct1] = 0;   
8 493a: f0                   ret                      return;              

Sub0267:
8 493b: ad,80,3a             ldzbw R3a,80             R3a = (uns)80;       
8 493e: ad,80,40             ldzbw R40,80             R40 = (uns)80;       
8 4941: 3f,a1,25             jb    B7,Ra1,4969        if (B7_[a1_Flags]) goto 4969;
8 4944: 31,ed,03             jnb   B1,Red,494a        if (!B1_[Flags_ed]) goto 494a;
8 4947: 38,ed,1f             jb    B0,Red,4969        if (B0_[Flags_ed]) goto 4969;
8 494a: 33,ec,1e             jnb   B3,Rec,496b        if (!B3_[Flag_ec]) goto 496b;
8 494d: 37,26,06             jnb   B7,R26,4956        if (!B7_[Flags_26]) goto 4956;
8 4950: 9b,fc,7c,00          cmpb  0,[Rfc+7c]                              
8 4954: d7,15                jne   496b               if (0 != [Sc0148]) goto 496b;
8 4956: af,72,eb,30          ldzbw R30,[R72+eb]       R30 = (uns)[Isflag]; 
8 495a: 75,50,30             ad2b  R30,50             R30 += 50;           
8 495d: 29,28                scall 4a87               Sub0269();           
//  KAM Table 1 Lo byte of ?                                                          //
8 495f: af,33,04,07,3a       ldzbw R3a,[R32+704]      R3a = (uns)[R32+Ktmtb100];
//  KAM Table 2 Hi byte of ?                                                          //
8 4964: af,33,5a,07,40       ldzbw R40,[R32+75a]      R40 = (uns)[R32+Ktmtb200];
8 4969: 20,90                sjmp  49fb               goto 49fb;           

496b - Sub 8 496b:
8 496b: 45,de,00,f0,32       ad3w  R32,Rf0,de         R32 = Rpmscale;      
8 4970: a0,ae,34             ldw   R34,Rae            R34 = [Rpmx4];       
8 4973: ef,96,ec             call  360c               UUWordLu();          
8 4976: a0,38,a6             ldw   Ra6,R38            [Nrmces] = R38;      
//  ECC Load Scaling - emission load scaling                                          //
8 4979: 45,b2,00,f0,32       ad3w  R32,Rf0,b2         R32 = Emm_lscale;    
//  engine load (VE? )                                                                //
8 497e: a3,74,de,34          ldw   R34,[R74+de]       R34 = [Load];        
8 4982: ef,87,ec             call  360c               UUWordLu();          
8 4985: a0,38,a8             ldw   Ra8,R38            [Nrmrld] = R38;      
8 4988: b0,a9,30             ldb   R30,Ra9            R30 = Ra9;           
8 498b: 7d,0a,30             ml2b  R30,a              R30 *= a;            
8 498e: 74,a7,30             ad2b  R30,Ra7            R30 += Ra7;          
8 4991: 28,f4                scall 4a87               Sub0269();           
//  KAM Table 1 Lo byte of ?                                                          //
8 4993: b3,33,04,07,3c       ldb   R3c,[R32+704]      R3c = [R32+Ktmtb100];
//  KAM Table 2 Hi byte of ?                                                          //
8 4998: b3,33,5a,07,40       ldb   R40,[R32+75a]      R40 = [R32+Ktmtb200];
8 499d: 07,30                incw  R30                R30++;               
8 499f: 28,e6                scall 4a87               Sub0269();           
//  KAM Table 1 Lo byte of ?                                                          //
8 49a1: b3,33,04,07,3d       ldb   R3d,[R32+704]      R3d = [R32+Ktmtb100];
//  KAM Table 2 Hi byte of ?                                                          //
8 49a6: b3,33,5a,07,41       ldb   R41,[R32+75a]      R41 = [R32+Ktmtb200];
8 49ab: 99,07,a9             cmpb  Ra9,7                                   
8 49ae: d3,08                jnc   49b8               if ((uns) Ra9 < 7) goto 49b8;
8 49b0: a0,3c,3e             ldw   R3e,R3c            R3e = R3c;           
8 49b3: a0,40,42             ldw   R42,R40            R42 = R40;           
8 49b6: 20,1d                sjmp  49d5               goto 49d5;           

8 49b8: 75,09,30             ad2b  R30,9              R30 += 9;            
8 49bb: 28,ca                scall 4a87               Sub0269();           
//  KAM Table 1 Lo byte of ?                                                          //
8 49bd: b3,33,04,07,3e       ldb   R3e,[R32+704]      R3e = [R32+Ktmtb100];
//  KAM Table 2 Hi byte of ?                                                          //
8 49c2: b3,33,5a,07,42       ldb   R42,[R32+75a]      R42 = [R32+Ktmtb200];
8 49c7: 07,30                incw  R30                R30++;               
8 49c9: 28,bc                scall 4a87               Sub0269();           
//  KAM Table 1 Lo byte of ?                                                          //
8 49cb: b3,33,04,07,3f       ldb   R3f,[R32+704]      R3f = [R32+Ktmtb100];
//  KAM Table 2 Hi byte of ?                                                          //
8 49d0: b3,33,5a,07,43       ldb   R43,[R32+75a]      R43 = [R32+Ktmtb200];
8 49d5: ac,a6,30             ldzbw R30,Ra6            R30 = (uns)[Nrmces]; 
8 49d8: ac,a8,32             ldzbw R32,Ra8            R32 = (uns)[Nrmrld]; 
8 49db: ad,02,34             ldzbw R34,2              R34 = (uns)2;        
8 49de: a1,40,00,38          ldw   R38,40             R38 = 40;            
8 49e2: ef,05,ed             call  36ea               UTabLookUp();        
8 49e5: ac,3b,40             ldzbw R40,R3b            R40 = (uns)R3b;      
8 49e8: ac,a6,30             ldzbw R30,Ra6            R30 = (uns)[Nrmces]; 
8 49eb: ac,a8,32             ldzbw R32,Ra8            R32 = (uns)[Nrmrld]; 
8 49ee: ad,02,34             ldzbw R34,2              R34 = (uns)2;        
8 49f1: a1,3c,00,38          ldw   R38,3c             R38 = 3c;            
8 49f5: ef,f2,ec             call  36ea               UTabLookUp();        
8 49f8: ac,3b,3a             ldzbw R3a,R3b            R3a = (uns)R3b;      
8 49fb: 65,80,00,3a          ad2w  R3a,80             R3a += 80;           
8 49ff: 65,80,00,40          ad2w  R40,80             R40 += 80;           
8 4a03: c3,01,b4,07,3a       stw   [7b4],R3a          [Kamrf1] = R3a;      
8 4a08: c3,01,b6,07,40       stw   [7b6],R40          [Kamrf2] = R40;      
8 4a0d: 38,ed,09             jb    B0,Red,4a19        if (B0_[Flags_ed]) goto 4a19;
8 4a10: b3,fe,16,30          ldb   R30,[Rfe+16]       R30 = [No_hegos];    
8 4a14: 99,01,30             cmpb  R30,1                                   
//  jmp if the no of HEGOs != 1                                                       //
8 4a17: d7,0c                jne   4a25               if (R30 != 1) goto 4a25;
8 4a19: a3,01,b4,07,30       ldw   R30,[7b4]          R30 = [Kamrf1];      
8 4a1e: c3,01,b6,07,30       stw   [7b6],R30          [Kamrf2] = R30;      
8 4a23: 20,0d                sjmp  4a32               goto 4a32;           

8 4a25: 31,ed,0a             jnb   B1,Red,4a32        if (!B1_[Flags_ed]) goto 4a32;
8 4a28: a3,01,b6,07,30       ldw   R30,[7b6]          R30 = [Kamrf2];      
8 4a2d: c3,01,b4,07,30       stw   [7b4],R30          [Kamrf1] = R30;      
8 4a32: 45,18,00,f0,32       ad3w  R32,Rf0,18         R32 = Fc001;         
8 4a37: b0,b0,34             ldb   R34,Rb0            R34 = [ECT];         
8 4a3a: ef,6f,eb             call  35ac               subyteLU();          
8 4a3d: 9b,72,c7,38          cmpb  R38,[R72+c7]                            
8 4a41: d9,1a                jgtu  4a5d               if ((uns) R38 > [Multmr]) goto 4a5d;
8 4a43: a3,72,e8,30          ldw   R30,[R72+e8]       R30 = [Lammul];      
8 4a47: 89,00,01,30          cmpw  R30,100                                 
8 4a4b: df,10                je    4a5d               if (R30 == 100) goto 4a5d;
8 4a4d: d9,04                jgtu  4a53               if ((uns) R30 > 100) goto 4a53;
8 4a4f: 07,30                incw  R30                R30++;               
8 4a51: 20,02                sjmp  4a55               goto 4a55;           

8 4a53: 05,30                decw  R30                R30--;               
8 4a55: c3,72,e8,30          stw   [R72+e8],R30       [Lammul] = R30;      
8 4a59: c7,72,c7,00          stb   [R72+c7],0         [Multmr] = 0;        
8 4a5d: b3,fe,02,32          ldb   R32,[Rfe+2]        R32 = [TRLOAD];      
8 4a61: 99,04,32             cmpb  R32,4                                   
8 4a64: d3,20                jnc   4a86               if ((uns) R32 < 4) goto 4a86;
8 4a66: 32,ee,1d             jnb   B2,Ree,4a86        if (!B2_[Flags_ee]) goto 4a86;
8 4a69: 3e,26,05             jb    B6,R26,4a71        if (B6_[Flags_26]) goto 4a71;
8 4a6c: 91,02,ec             orrb  Rec,2              [Flag_ec] |= 2;      
8 4a6f: 20,15                sjmp  4a86               goto 4a86;           

8 4a71: 31,ec,12             jnb   B1,Rec,4a86        if (!B1_[Flag_ec]) goto 4a86;
8 4a74: 71,fd,ec             an2b  Rec,fd             [Flag_ec] &= fd;     
8 4a77: 45,4a,02,fc,32       ad3w  R32,Rfc,24a        R32 = Fc045;         
8 4a7c: bc,b0,34             ldsbw R34,Rb0            R34 = (sig)[ECT];    
8 4a7f: ef,7f,eb             call  3601               SUWordLU();          
8 4a82: c3,72,e8,38          stw   [R72+e8],R38       [Lammul] = R38;      
8 4a86: f0                   ret                      return;              

Sub0269:
8 4a87: a0,30,32             ldw   R32,R30            R32 = R30;           
8 4a8a: 45,82,03,fc,34       ad3w  R34,Rfc,382        R34 = Lcellindx;     
8 4a8f: 64,30,34             ad2w  R34,R30            R34 += R30;          
8 4a92: be,34,34             ldsbw R34,[R34]          R34 = (sig)[R34];    
8 4a95: 37,35,05             jnb   B7,R35,4a9d        if (!B7_R35) goto 4a9d;
8 4a98: 03,34                negw  R34                R34 = -R34;          
8 4a9a: a0,34,32             ldw   R32,R34            R32 = R34;           
8 4a9d: f0                   ret                      return;              

Sub0270:
8 4a9e: a3,fc,2e,30          ldw   R30,[Rfc+2e]       R30 = [Sc0117];      
8 4aa2: 09,01,30             shlw  R30,1              R30 = R30 * 2;       
8 4aa5: 99,02,31             cmpb  R31,2                                   
8 4aa8: d1,04                jleu  4aae               if ((uns) R31 <= 2) goto 4aae;
8 4aaa: a1,00,02,30          ldw   R30,200            R30 = 200;           
8 4aae: 09,06,30             shlw  R30,6              R30 = R30 * 40;      
8 4ab1: b3,fc,31,34          ldb   R34,[Rfc+31]       R34 = [InJPP];       
//  no of cyls (8)                                                                    //
8 4ab5: 7f,fc,32,34          ml2b  R34,[Rfc+32]       R34 *= [Cyl_wrap];   
8 4ab9: 7f,fe,07,34          ml2b  R34,[Rfe+7]        R34 *= [PIPsC];      
8 4abd: 6c,ae,34             ml2w  R34,Rae            R34 *= [Rpmx4];      
8 4ac0: 0c,05,34             shrdw R34,5              R34L = R34L / 20;    
8 4ac3: 88,00,36             cmpw  R36,0                                   
8 4ac6: df,03                je    4acb               if (R36 == 0) goto 4acb;
8 4ac8: bd,ff,34             ldsbw R34,ff             R34 = (sig)ff;       
8 4acb: 6c,3c,30             ml2w  R30,R3c            R30 *= R3c;          
8 4ace: 8c,34,30             divw  R30,R34            R30 = R30L / R34;    
8 4ad1: d5,03                jnv   4ad6               if (!OV) goto 4ad6;  
8 4ad3: bd,ff,30             ldsbw R30,ff             R30 = (sig)ff;       
8 4ad6: f0                   ret                      return;              

Calc_Fuel:
8 4ad7: 01,3e                clrw  R3e                R3e = 0;             
8 4ad9: 37,a1,51             jnb   B7,Ra1,4b2d        if (!B7_[a1_Flags]) goto 4b2d;
8 4adc: 38,24,30             jb    B0,R24,4b0f        if (B0_[Flags_24]) goto 4b0f;
//  Cranking Fuel Pulse Width vs ECT                                                  //
8 4adf: 45,d2,00,fa,32       ad3w  R32,Rfa,d2         R32 = Crnk_pw_ect;   
8 4ae4: bc,b0,34             ldsbw R34,Rb0            R34 = (sig)[ECT];    
8 4ae7: ef,17,eb             call  3601               SUWordLU();          
//  barometric pressure                                                               //
8 4aea: af,74,80,36          ldzbw R36,[R74+80]       R36 = (uns)RBp;      
8 4aee: 6c,36,38             ml2w  R38,R36            R38 *= R36;          
8 4af1: 8d,ef,00,38          divw  R38,ef             R38 = R38L / ef;     
8 4af5: d5,03                jnv   4afa               if (!OV) goto 4afa;  
8 4af7: bd,ff,38             ldsbw R38,ff             R38 = (sig)ff;       

4afa - Sub 8 4afa:
8 4afa: c0,42,38             stw   R42,R38            R42 = R38;           
//  fuel crank pw multiply time                                                       //
8 4afd: 45,ba,00,fa,32       ad3w  R32,Rfa,ba         R32 = Crnk_pw_time;  
8 4b02: af,72,cf,34          ldzbw R34,[R72+cf]       R34 = (uns)[Crktmr]; 
8 4b06: ef,03,eb             call  360c               UUWordLu();          
8 4b09: 4c,42,38,3c          ml3w  R3c,R38,R42        R3c = R38 * R42;     
//  R3CL * 4 and clamped                                                              //
8 4b0d: 29,ae                scall 4cbd               Sub0282();           

4b0f - Sub 8 4b0f:
8 4b0f: a3,f4,46,22          ldw   R22,[Rf4+46]       R22 = [Low_slope];   
8 4b13: c3,76,1a,3e          stw   [R76+1a],R3e       [Bgful1] = R3e;      
8 4b17: c3,76,1c,3e          stw   [R76+1c],R3e       [Bgful2] = R3e;      
8 4b1b: 4c,22,3e,3c          ml3w  R3c,R3e,R22        R3c = R3e * R22;     
//  R3CL * 4 and clamped                                                              //
8 4b1f: 29,9c                scall 4cbd               Sub0282();           
8 4b21: c3,72,16,3e          stw   [R72+16],R3e       [Lbmf_inj1] = R3e;   
8 4b25: c3,72,18,3e          stw   [R72+18],R3e       [Lbmf_inj2] = R3e;   
8 4b29: 71,df,e7             an2b  Re7,df             [Flag_e7] &= df;     
8 4b2c: f0                   ret                      return;              

8 4b2d: 3b,2f,df             jb    B3,R2f,4b0f        if (B3_[Flags_2F]) goto 4b0f;
8 4b30: 32,ee,05             jnb   B2,Ree,4b38        if (!B2_[Flags_ee]) goto 4b38;
8 4b33: ef,f6,f9             call  452c               Sub0256();           
8 4b36: 20,03                sjmp  4b3b               goto 4b3b;           

8 4b38: ef,8b,f7             call  42c6               Calc_Fuel_ratio();   

4b3b - Sub 8 4b3b:
8 4b3b: a3,74,8c,38          ldw   R38,[R74+8c]       R38 = [Lambse1];     
8 4b3f: 69,00,80,38          sb2w  R38,8000           R38 -= 8000;         
8 4b43: c3,74,84,38          stw   [R74+84],R38       [Dslmbs1] = R38;     
//  Desired fuel ratio for the right bank                                             //
8 4b47: a3,74,8e,38          ldw   R38,[R74+8e]       R38 = [Lambse2];     
8 4b4b: 69,00,80,38          sb2w  R38,8000           R38 -= 8000;         
8 4b4f: c3,74,86,38          stw   [R74+86],R38       [Dslmbs2] = R38;     
8 4b53: 2d,e6                scall 493b               Sub0267();           
8 4b55: ef,35,04             call  4f8d               Sub0294();           
8 4b58: ef,a2,01             call  4cfd               Sub0284();           

Sub0275:
8 4b5b: 01,16                clrw  R16                R16 = 0;             
8 4b5d: 28,26                scall 4b85               Sub0276();           
8 4b5f: af,fe,16,16          ldzbw R16,[Rfe+16]       R16 = (uns)[No_hegos];
8 4b63: 31,16,02             jnb   B1,R16,4b68        if (!B1_R16) goto 4b68;
8 4b66: 28,1d                scall 4b85               Sub0276();           
8 4b68: 9b,f2,02,00          cmpb  0,[Rf2+2]                               
8 4b6c: d7,13                jne   4b81               if (0 != [Bfulsw]) goto 4b81;
//  MAF input range error?                                                            //
8 4b6e: 38,26,10             jb    B0,R26,4b81        if (B0_[Flags_26]) goto 4b81;
8 4b71: 3b,c5,0d             jb    B3,Rc5,4b81        if (B3_[Fmem_flags]) goto 4b81;
8 4b74: 38,e7,0a             jb    B0,Re7,4b81        if (B0_[Flag_e7]) goto 4b81;
8 4b77: 3a,e7,07             jb    B2,Re7,4b81        if (B2_[Flag_e7]) goto 4b81;
8 4b7a: 3b,25,04             jb    B3,R25,4b81        if (B3_[Flags_25]) goto 4b81;
8 4b7d: 91,20,e7             orrb  Re7,20             [Flag_e7] |= 20;     
8 4b80: f0                   ret                      return;              

8 4b81: 71,df,e7             an2b  Re7,df             [Flag_e7] &= df;     
8 4b84: f0                   ret                      return;              

Sub0276:
8 4b85: ef,02,02             call  4d8a               Sub0286();           
8 4b88: b1,40,38             ldb   R38,40             R38 = 40;            
8 4b8b: 32,a1,0b             jnb   B2,Ra1,4b99        if (!B2_[a1_Flags]) goto 4b99;
//  Table 989E                                                                        //
8 4b8e: 45,f6,00,fa,32       ad3w  R32,Rfa,f6         R32 = Fc027;         
8 4b93: b0,b0,34             ldb   R34,Rb0            R34 = [ECT];         
8 4b96: ef,13,ea             call  35ac               subyteLU();          
8 4b99: 5c,38,40,14          ml3b  R14,R40,R38        R14 = R40 * R38;     
8 4b9d: a0,a2,40             ldw   R40,Ra2            R40 = RAM;           
8 4ba0: 28,c6                scall 4c68               Sub0277();           
8 4ba2: c3,17,82,01,42       stw   [R16+182],R42      [R16+Baseff1] = R42; 
8 4ba7: 28,d6                scall 4c7f               Sub0278();           
8 4ba9: d6,03                jge   4bae               if ((sig) R42 >= 0) goto 4bae;
8 4bab: 6c,00,40             ml2w  R40,0              R40 *= 0;            
8 4bae: 28,d8                scall 4c88               Sub0279();           
//  set flags effecting 7XXX ad reads ?                                               //
8 4bb0: c3,17,34,02,42       stw   [R16+234],R42      [R16+Fuelflow1] = R42;
8 4bb5: a0,42,1e             ldw   R1e,R42            R1e = R42;           
8 4bb8: 01,1c                clrw  R1c                R1c = 0;             
8 4bba: 0c,04,1c             shrdw R1c,4              R1cL = R1cL / 10;    
8 4bbd: af,fe,07,18          ldzbw R18,[Rfe+7]        R18 = (uns)[PIPsC];  
8 4bc1: 6c,ae,18             ml2w  R18,Rae            R18 *= [Rpmx4];      
8 4bc4: 0c,03,18             shrdw R18,3              R18L = R18L / 8;     
8 4bc7: 8c,18,1c             divw  R1c,R18            R1c = R1cL / R18;    
8 4bca: d5,03                jnv   4bcf               if (!OV) goto 4bcf;  
8 4bcc: bd,ff,1c             ldsbw R1c,ff             R1c = (sig)ff;       
8 4bcf: c3,17,96,01,1c       stw   [R16+196],R1c      [R16+Lbmf_inj1] = R1c;
//  Table 922C                                                                        //
8 4bd4: 45,56,02,f4,32       ad3w  R32,Rf4,256        R32 = Fc005;         
//  Battery Voltage Level * 16                                                        //
8 4bd9: af,74,93,34          ldzbw R34,[R74+93]       R34 = (uns)[Vbat];   
8 4bdd: ef,2c,ea             call  360c               UUWordLu();          
8 4be0: 6c,ae,38             ml2w  R38,Rae            R38 *= [Rpmx4];      
8 4be3: 0c,01,38             shrdw R38,1              R38L = R38L / 2;     
8 4be6: 6c,00,1c             ml2w  R1c,0              R1c *= 0;            
//  injector slope low                                                                //
8 4be9: a3,f4,46,22          ldw   R22,[Rf4+46]       R22 = [Low_slope];   
8 4bed: 88,3a,42             cmpw  R42,R3a                                 
8 4bf0: d1,15                jleu  4c07               if ((uns) R42 <= R3a) goto 4c07;
8 4bf2: 28,b2                scall 4ca6               Sub0280();           
8 4bf4: a0,30,1c             ldw   R1c,R30            R1c = R30;           
//  injector slope high                                                               //
8 4bf7: a3,f4,48,22          ldw   R22,[Rf4+48]       R22 = [Hi_slope];    
8 4bfb: 28,a9                scall 4ca6               Sub0280();           
8 4bfd: 48,30,1c,1e          sb3w  R1e,R1c,R30        R1e = R1c - R30;     
8 4c01: 68,3a,42             sb2w  R42,R3a            R42 -= R3a;          
8 4c04: a8,38,40             sbbw  R40,R38            R40 -= R38 - CY;     
8 4c07: 28,a5                scall 4cae               Sub0281();           
8 4c09: 64,1c,30             ad2w  R30,R1c            R30 += R1c;          
8 4c0c: d3,03                jnc   4c11               if (R30 <= ffff) goto 4c11;
8 4c0e: bd,ff,30             ldsbw R30,ff             R30 = (sig)ff;       
8 4c11: c3,17,94,03,30       stw   [R16+394],R30      [R16+Bgful1] = R30;  
8 4c16: 6c,00,40             ml2w  R40,0              R40 *= 0;            
8 4c19: 11,14                clrb  R14                R14 = 0;             
8 4c1b: 28,62                scall 4c7f               Sub0278();           
8 4c1d: d6,09                jge   4c28               if ((sig) R42 >= 0) goto 4c28;
8 4c1f: 17,14                incb  R14                R14++;               
8 4c21: 02,42                cplw  R42                R42 = ~R42;          
8 4c23: 03,40                negw  R40                R40 = -R40;          
8 4c25: a4,00,42             adcw  R42,0              R42 += 0 + CY;       
8 4c28: 28,5e                scall 4c88               Sub0279();           
8 4c2a: 28,82                scall 4cae               Sub0281();           
8 4c2c: a1,ff,7f,32          ldw   R32,7fff           R32 = 7fff;          
8 4c30: 88,32,30             cmpw  R30,R32                                 
8 4c33: d1,03                jleu  4c38               if ((uns) R30 <= R32) goto 4c38;
8 4c35: a0,32,30             ldw   R30,R32            R30 = R32;           
8 4c38: 30,14,02             jnb   B0,R14,4c3d        if (!B0_R14) goto 4c3d;
8 4c3b: 03,30                negw  R30                R30 = -R30;          
8 4c3d: 64,1e,30             ad2w  R30,R1e            R30 += R1e;          
8 4c40: d5,07                jnv   4c49               if (!OV) goto 4c49;  
8 4c42: a0,32,30             ldw   R30,R32            R30 = R32;           
8 4c45: d6,02                jge   4c49               if ((sig) R30 >= R34) goto 4c49;
8 4c47: 03,30                negw  R30                R30 = -R30;          
8 4c49: c3,17,9c,03,30       stw   [R16+39c],R30      [R16+Ffulc1] = R30;  
8 4c4e: a0,a2,40             ldw   R40,Ra2            R40 = RAM;           
8 4c51: 28,15                scall 4c68               Sub0277();           
8 4c53: 28,33                scall 4c88               Sub0279();           
8 4c55: 28,57                scall 4cae               Sub0281();           
8 4c57: a3,74,d4,32          ldw   R32,[R74+d4]       R32 = [Archg];       
8 4c5b: fa                   di                       disable ints;        
8 4c5c: ff                   ff                                            
8 4c5d: c3,17,98,03,30       stw   [R16+398],R30      [R16+Ffulm1] = R30;  
8 4c62: c3,76,26,32          stw   [R76+26],R32       [Archg_bg] = R32;    
8 4c66: fb                   ei                       enable ints;         
8 4c67: f0                   ret                      return;              

Sub0277:
8 4c68: 6d,7c,11,40          ml2w  R40,117c           R40 *= 117c;         
8 4c6c: 8f,17,0a,02,40       divw  R40,[R16+20a]      R40 = R40L / [R16+Lambse1];
8 4c71: d5,03                jnv   4c76               if (!OV) goto 4c76;  
8 4c73: bd,ff,40             ldsbw R40,ff             R40 = (sig)ff;       
8 4c76: 6f,17,b4,07,40       ml2w  R40,[R16+7b4]      R40 *= [R16+Kamrf1]; 
8 4c7b: 0d,05,40             shldw R40,5              R40L = R40L * 20;    
8 4c7e: f0                   ret                      return;              

Sub0278:
8 4c7f: 67,76,2a,40          ad2w  R40,[R76+2a]       R40 += [Aeftrffl];   
8 4c83: a7,76,28,42          adcw  R42,[R76+28]       R42 +=[Aeftrff] + CY;
8 4c87: f0                   ret                      return;              

Sub0279:
8 4c88: 99,07,43             cmpb  R43,7                                   
8 4c8b: d1,05                jleu  4c92               if ((uns) R43 <= 7) goto 4c92;
8 4c8d: bd,ff,42             ldsbw R42,ff             R42 = (sig)ff;       
8 4c90: 20,03                sjmp  4c95               goto 4c95;           

8 4c92: 0d,05,40             shldw R40,5              R40L = R40L * 20;    
8 4c95: 4c,14,42,40          ml3w  R40,R42,R14        R40 = R42 * R14;     
8 4c99: 99,1f,43             cmpb  R43,1f                                  
8 4c9c: d1,04                jleu  4ca2               if ((uns) R43 <= 1f) goto 4ca2;
8 4c9e: bd,ff,42             ldsbw R42,ff             R42 = (sig)ff;       
8 4ca1: f0                   ret                      return;              

8 4ca2: 0d,03,40             shldw R40,3              R40L = R40L * 8;     
8 4ca5: f0                   ret                      return;              

Sub0280:
8 4ca6: a0,38,3c             ldw   R3c,R38            R3c = R38;           
8 4ca9: a0,3a,3e             ldw   R3e,R3a            R3e = R3a;           
8 4cac: 20,06                sjmp  4cb4               goto 4cb4;           

Sub0281:
8 4cae: a0,40,3c             ldw   R3c,R40            R3c = R40;           
8 4cb1: a0,42,3e             ldw   R3e,R42            R3e = R42;           
8 4cb4: 0c,04,3c             shrdw R3c,4              R3cL = R3cL / 10;    
8 4cb7: 8c,22,3c             divw  R3c,R22            R3c = R3cL / R22;    
8 4cba: 2d,e2                scall 4a9e               Sub0270();           
8 4cbc: f0                   ret                      return;              

Sub0282:
8 4cbd: 99,3f,3f             cmpb  R3f,3f                                  
8 4cc0: d1,04                jleu  4cc6               if ((uns) R3f <= 3f) goto 4cc6;
8 4cc2: a1,ff,3f,3e          ldw   R3e,3fff           R3e = 3fff;          
8 4cc6: 0d,02,3c             shldw R3c,2              R3cL = R3cL * 4;     
8 4cc9: f0                   ret                      return;              

Update_flDOL:
8 4cca: 9b,74,ce,00          cmpb  0,[R74+ce]                              
8 4cce: d2,2c                jgt   4cfc               if ((sig) 0 > [Fuel_sum_h]) goto 4cfc;
//  No of injectors fired by each output port.                                        //
8 4cd0: af,fc,31,14          ldzbw R14,[Rfc+31]       R14 = (uns)[InJPP];  
8 4cd4: 6d,7c,1e,14          ml2w  R14,1e7c           R14 *= 1e7c;         
8 4cd8: 01,18                clrw  R18                R18 = 0;             
8 4cda: a1,00,02,1a          ldw   R1a,200            R1a = 200;           
8 4cde: 8c,14,18             divw  R18,R14            R18 = R18L / R14;    
8 4ce1: fa                   di                       disable ints;        
8 4ce2: a3,74,cc,14          ldw   R14,[R74+cc]       R14 = [Fuel_sum_l];  
8 4ce6: af,74,ce,16          ldzbw R16,[R74+ce]       R16 = (uns)[Fuel_sum_h];
8 4cea: 8c,18,14             divw  R14,R18            R14 = R14L / R18;    
8 4ced: c3,74,cc,16          stw   [R74+cc],R16       [Fuel_sum_l] = R16;  
8 4cf1: c7,74,ce,00          stb   [R74+ce],0         [Fuel_sum_h] = 0;    
8 4cf5: 09,01,14             shlw  R14,1              R14 = R14 * 2;       
//  add to Data Output Link Count                                                     //
8 4cf8: 64,14,c6             ad2w  Rc6,R14            [Dol_count] += R14;  
8 4cfb: fb                   ei                       enable ints;         
8 4cfc: f0                   ret                      return;              

Sub0284:
8 4cfd: 11,3e                clrb  R3e                R3e = 0;             
8 4cff: 3e,26,16             jb    B6,R26,4d18        if (B6_[Flags_26]) goto 4d18;
8 4d02: 9b,f4,08,00          cmpb  0,[Rf4+8]                               
8 4d06: df,10                je    4d18               if (0 == [Cintsw]) goto 4d18;
//  9ABD - NITMR3 - ATMR1 timed delay to enter Closed Loop fuel after Hot start, sec. Range of 0 to 255 sec., accuracy 1 sec.  //
8 4d08: 45,3f,00,fc,30       ad3w  R30,Rfc,3f         R30 = St0006;        
8 4d0d: ef,3f,ea             call  374f               Check_Timers();      
8 4d10: db,06                jc    4d18               if (R30 > ffff) goto 4d18;
8 4d12: b3,f4,09,3f          ldb   R3f,[Rf4+9]        R3f = [Cintv];       
8 4d16: 20,64                sjmp  4d7c               goto 4d7c;           

8 4d18: 33,ef,0c             jnb   B3,Ref,4d27        if (!B3_[Flags_ef]) goto 4d27;
8 4d1b: 9b,fc,3e,00          cmpb  0,[Rfc+3e]                              
8 4d1f: df,06                je    4d27               if (0 == [Sc0126]) goto 4d27;
8 4d21: b3,fc,3d,3f          ldb   R3f,[Rfc+3d]       R3f = [Sc0125];      
8 4d25: 20,55                sjmp  4d7c               goto 4d7c;           

8 4d27: 30,ec,06             jnb   B0,Rec,4d30        if (!B0_[Flag_ec]) goto 4d30;
8 4d2a: b3,fc,3c,3f          ldb   R3f,[Rfc+3c]       R3f = [Sc0124];      
8 4d2e: 20,4c                sjmp  4d7c               goto 4d7c;           

4d30 - Sub 8 4d30:
8 4d30: 45,de,00,f0,32       ad3w  R32,Rf0,de         R32 = Rpmscale;      
8 4d35: a0,ae,34             ldw   R34,Rae            R34 = [Rpmx4];       
8 4d38: ef,d1,e8             call  360c               UUWordLu();          
8 4d3b: 08,04,38             shrw  R38,4              R38 = R38 / 10;      
8 4d3e: b0,38,30             ldb   R30,R38            R30 = R38;           
//  injector time load scaling                                                        //
8 4d41: 45,72,01,f4,32       ad3w  R32,Rf4,172        R32 = Inj_lt_scl;    
//  engine load (VE? )                                                                //
8 4d46: a3,74,de,34          ldw   R34,[R74+de]       R34 = [Load];        
8 4d4a: ef,bf,e8             call  360c               UUWordLu();          
8 4d4d: b0,38,32             ldb   R32,R38            R32 = R38;           
8 4d50: ad,0a,34             ldzbw R34,a              R34 = (uns)a;        
//  Injector Timing (crank degrees)(RPM vs Load)                                      //
8 4d53: 45,8a,01,f4,38       ad3w  R38,Rf4,18a        R38 = Inj_time;      
8 4d58: ef,80,e9             call  36db               UTabLu16();          
8 4d5b: 11,3c                clrb  R3c                R3c = 0;             
8 4d5d: b0,3b,3d             ldb   R3d,R3b            R3d = R3b;           
8 4d60: 08,01,3c             shrw  R3c,1              R3c = R3c / 2;       
8 4d63: 6f,f4,26,3c          ml2w  R3c,[Rf4+26]       R3c *= [Idkmul];     
//  injector delay global = 0                                                         //
8 4d67: 67,f4,28,3e          ad2w  R3e,[Rf4+28]       R3e += [Inj_dly];    
8 4d6b: d6,02                jge   4d6f               if ((sig) R3e >= 0) goto 4d6f;
8 4d6d: 01,3e                clrw  R3e                R3e = 0;             
8 4d6f: 89,00,2d,3e          cmpw  R3e,2d00                                
8 4d73: d1,04                jleu  4d79               if ((uns) R3e <= 2d00) goto 4d79;
8 4d75: a1,00,2d,3e          ldw   R3e,2d00           R3e = 2d00;          
8 4d79: 09,02,3e             shlw  R3e,2              R3e = R3e * 4;       
8 4d7c: ef,d5,e8             call  3654               Srolav3T([Injdly],R3e,[d058]);
8 4d7f: 80,01,3e,00,58,d0                             #args                
//  Save filtered sensor output                                                       //
8 4d85: c3,72,00,3e          stw   [R72],R3e          [Injdly] = R3e;      
8 4d89: f0                   ret                      return;              

Sub0286:
8 4d8a: a3,fc,46,1a          ldw   R1a,[Rfc+46]       R1a = [Sc0128];      
//  engine load (VE? )                                                                //
8 4d8e: 8b,74,de,1a          cmpw  R1a,[R74+de]                            
8 4d92: d1,05                jleu  4d99               if ((uns) R1a <= [Load]) goto 4d99;
8 4d94: 91,80,e8             orrb  Re8,80             [Flags_e8] |= 80;    
8 4d97: 20,12                sjmp  4dab               goto 4dab;           

8 4d99: 67,fc,48,1a          ad2w  R1a,[Rfc+48]       R1a += [Sc0129];     
8 4d9d: d3,03                jnc   4da2               if (R1a <= ffff) goto 4da2;
8 4d9f: bd,ff,1a             ldsbw R1a,ff             R1a = (sig)ff;       

4da2 - Sub 8 4da2:
8 4da2: 8b,74,de,1a          cmpw  R1a,[R74+de]                            
8 4da6: db,03                jc    4dab               if ((uns) R1a >= [Load]) goto 4dab;
8 4da8: 71,7f,e8             an2b  Re8,7f             [Flags_e8] &= 7f;    
8 4dab: b3,fe,02,20          ldb   R20,[Rfe+2]        R20 = [TRLOAD];      
8 4daf: 99,02,20             cmpb  R20,2                                   
8 4db2: d3,03                jnc   4db7               if ((uns) R20 < 2) goto 4db7;
8 4db4: 37,e7,05             jnb   B7,Re7,4dbc        if (!B7_[Flag_e7]) goto 4dbc;
8 4db7: 91,40,e8             orrb  Re8,40             [Flags_e8] |= 40;    
8 4dba: 20,0e                sjmp  4dca               goto 4dca;           

8 4dbc: 99,04,20             cmpb  R20,4                                   
8 4dbf: db,06                jc    4dc7               if ((uns) R20 >= 4) goto 4dc7;
8 4dc1: 9b,fc,4e,cc          cmpb  Rcc,[Rfc+4e]                            
8 4dc5: d3,03                jnc   4dca               if ((uns) [Nddtim] < [Sc0131]) goto 4dca;
8 4dc7: 71,bf,e8             an2b  Re8,bf             [Flags_e8] &= bf;    
8 4dca: 9b,fc,52,cd          cmpb  Rcd,[Rfc+52]                            
8 4dce: d1,05                jleu  4dd5               if ((uns) [Nactmr] <= [Sc0135]) goto 4dd5;
8 4dd0: 91,20,e8             orrb  Re8,20             [Flags_e8] |= 20;    
8 4dd3: 20,08                sjmp  4ddd               goto 4ddd;           

8 4dd5: 98,00,cd             cmpb  Rcd,0                                   
8 4dd8: df,03                je    4ddd               if ([Nactmr] == 0) goto 4ddd;
8 4dda: 71,df,e8             an2b  Re8,df             [Flags_e8] &= df;    
8 4ddd: 11,18                clrb  R18                R18 = 0;             
8 4ddf: b3,72,e6,19          ldb   R19,[R72+e6]       R19 = [Dsdrpm];      
8 4de3: 08,02,18             shrw  R18,2              R18 = R18 / 4;       
8 4de6: 48,18,ae,18          sb3w  R18,Rae,R18        R18 = [Rpmx4] - R18; 
8 4dea: 8b,fc,56,18          cmpw  R18,[Rfc+56]                            
8 4dee: da,05                jle   4df5               if ((sig) R18 <= [SHFRPM]) goto 4df5;
8 4df0: 91,10,e8             orrb  Re8,10             [Flags_e8] |= 10;    
8 4df3: 20,10                sjmp  4e05               goto 4e05;           

8 4df5: a3,fc,56,1a          ldw   R1a,[Rfc+56]       R1a = [SHFRPM];      
8 4df9: 6b,fc,58,1a          sb2w  R1a,[Rfc+58]       R1a -= [SHMRPMH];    
8 4dfd: 88,18,1a             cmpw  R1a,R18                                 
8 4e00: de,03                jlt   4e05               if ((sig) R1a < R18) goto 4e05;
8 4e02: 71,ef,e8             an2b  Re8,ef             [Flags_e8] &= ef;    
8 4e05: 8b,fc,4a,18          cmpw  R18,[Rfc+4a]                            
8 4e09: da,05                jle   4e10               if ((sig) R18 <= [Minrpm_shut]) goto 4e10;
8 4e0b: 91,08,e8             orrb  Re8,8              [Flags_e8] |= 8;     
8 4e0e: 20,10                sjmp  4e20               goto 4e20;           

4e10 - Sub 8 4e10:
8 4e10: a3,fc,4a,1a          ldw   R1a,[Rfc+4a]       R1a = [Minrpm_shut]; 
8 4e14: 6b,fc,4c,1a          sb2w  R1a,[Rfc+4c]       R1a -= [Sc0130];     
8 4e18: 88,18,1a             cmpw  R1a,R18                                 
8 4e1b: da,03                jle   4e20               if ((sig) R1a <= R18) goto 4e20;
8 4e1d: 71,f7,e8             an2b  Re8,f7             [Flags_e8] &= f7;    
8 4e20: b3,fc,5c,1a          ldb   R1a,[Rfc+5c]       R1a = [DFSVS];       
8 4e24: 9b,74,3f,1a          cmpb  R1a,[R74+3f]                            
8 4e28: d9,05                jgtu  4e2f               if ((uns) R1a > [Mph_FiltH]) goto 4e2f;
8 4e2a: 91,08,ca             orrb  Rca,8              [Flag_ca] |= 8;      
8 4e2d: 20,0f                sjmp  4e3e               goto 4e3e;           

8 4e2f: 7b,fc,5d,1a          sb2b  R1a,[Rfc+5d]       R1a -= [DFSVSH];     
8 4e33: d3,09                jnc   4e3e               if (R1a < 0) goto 4e3e;
8 4e35: 9b,74,3f,1a          cmpb  R1a,[R74+3f]                            
8 4e39: d1,03                jleu  4e3e               if ((uns) R1a <= [Mph_FiltH]) goto 4e3e;
8 4e3b: 71,f7,ca             an2b  Rca,f7             [Flag_ca] &= f7;     

4e3e - Sub 8 4e3e:
8 4e3e: a3,74,de,34          ldw   R34,[R74+de]       R34 = [Load];        
8 4e42: 8b,fc,5e,34          cmpw  R34,[Rfc+5e]                            
8 4e46: db,05                jc    4e4d               if ((uns) R34 >= [Sc0136]) goto 4e4d;
8 4e48: 91,04,ca             orrb  Rca,4              [Flag_ca] |= 4;      
8 4e4b: 20,09                sjmp  4e56               goto 4e56;           

8 4e4d: 8b,fc,60,34          cmpw  R34,[Rfc+60]                            
8 4e51: d1,03                jleu  4e56               if ((uns) R34 <= [Sc0137]) goto 4e56;
8 4e53: 71,fb,ca             an2b  Rca,fb             [Flag_ca] &= fb;     

4e56 - Sub 8 4e56:
8 4e56: 91,08,a1             orrb  Ra1,8              [a1_Flags] |= 8;     
8 4e59: 37,d0,03             jnb   B7,Rd0,4e5f        if (!B7_[Apt]) goto 4e5f;
8 4e5c: 3a,ca,07             jb    B2,Rca,4e66        if (B2_[Flag_ca]) goto 4e66;
8 4e5f: 71,f7,a1             an2b  Ra1,f7             [a1_Flags] &= f7;    
8 4e62: c7,72,d0,00          stb   [R72+d0],0         [Dltmr] = 0;         
8 4e66: 51,f8,c5,32          an3b  R32,Rc5,f8         R32 = [Fmem_flags] & f8;
8 4e6a: d7,74                jne   4ee0               if (R32 != 0) goto 4ee0;
//  Open Loop Fuel Multiplier vs RPM                                                  //
8 4e6c: 45,6a,03,fc,32       ad3w  R32,Rfc,36a        R32 = Ol_fuel_mult;  
8 4e71: a0,ae,34             ldw   R34,Rae            R34 = [Rpmx4];       
8 4e74: ef,95,e7             call  360c               UUWordLu();          
8 4e77: a0,38,40             ldw   R40,R38            R40 = R38;           
8 4e7a: 33,e8,63             jnb   B3,Re8,4ee0        if (!B3_[Flags_e8]) goto 4ee0;
8 4e7d: 38,ec,60             jb    B0,Rec,4ee0        if (B0_[Flag_ec]) goto 4ee0;
8 4e80: 3d,2a,5d             jb    B5,R2a,4ee0        if (B5_[VIP_flags]) goto 4ee0;
//  min ect decel fuel shutoff (140.0DegF)                                            //
8 4e83: 9b,fc,45,b0          cmpb  Rb0,[Rfc+45]                            
8 4e87: d6,06                jge   4e8f               if ((sig) [ECT] >= [Minect_shut]) goto 4e8f;
8 4e89: 9b,f4,0d,c8          cmpb  Rc8,[Rf4+d]                             
8 4e8d: d1,51                jleu  4ee0               if ((uns) [Atmr1] <= [Agb]) goto 4ee0;
8 4e8f: 33,a1,0a             jnb   B3,Ra1,4e9c        if (!B3_[a1_Flags]) goto 4e9c;
8 4e92: b3,72,d0,1a          ldb   R1a,[R72+d0]       R1a = [Dltmr];       
8 4e96: 9b,fc,62,1a          cmpb  R1a,[Rfc+62]                            
8 4e9a: d3,3c                jnc   4ed8               if ((uns) R1a < [Sc0138]) goto 4ed8;
8 4e9c: 37,d0,14             jnb   B7,Rd0,4eb3        if (!B7_[Apt]) goto 4eb3;
8 4e9f: 3f,e7,11             jb    B7,Re7,4eb3        if (B7_[Flag_e7]) goto 4eb3;
8 4ea2: 34,e8,0e             jnb   B4,Re8,4eb3        if (!B4_[Flags_e8]) goto 4eb3;
8 4ea5: 99,03,20             cmpb  R20,3                                   
8 4ea8: d9,09                jgtu  4eb3               if ((uns) R20 > 3) goto 4eb3;
8 4eaa: b3,fc,4f,1a          ldb   R1a,[Rfc+4f]       R1a = [Sc0132];      
8 4eae: 98,cc,1a             cmpb  R1a,Rcc                                 
8 4eb1: d9,25                jgtu  4ed8               if ((uns) R1a > [Nddtim]) goto 4ed8;
8 4eb3: 37,e8,2a             jnb   B7,Re8,4ee0        if (!B7_[Flags_e8]) goto 4ee0;
8 4eb6: 36,e8,27             jnb   B6,Re8,4ee0        if (!B6_[Flags_e8]) goto 4ee0;
8 4eb9: 33,ca,24             jnb   B3,Rca,4ee0        if (!B3_[Flag_ca]) goto 4ee0;
8 4ebc: 9b,fc,63,00          cmpb  0,[Rfc+63]                              
8 4ec0: d7,16                jne   4ed8               if (0 != [Sc0139]) goto 4ed8;
8 4ec2: 37,d0,1b             jnb   B7,Rd0,4ee0        if (!B7_[Apt]) goto 4ee0;
8 4ec5: b3,72,aa,1a          ldb   R1a,[R72+aa]       R1a = [Cttmr];       
8 4ec9: 9b,fc,50,1a          cmpb  R1a,[Rfc+50]                            
8 4ecd: d3,11                jnc   4ee0               if ((uns) R1a < [Sc0133]) goto 4ee0;
8 4ecf: 3d,e8,06             jb    B5,Re8,4ed8        if (B5_[Flags_e8]) goto 4ed8;
8 4ed2: 9b,fc,51,1a          cmpb  R1a,[Rfc+51]                            
8 4ed6: d1,08                jleu  4ee0               if ((uns) R1a <= [Sc0134]) goto 4ee0;
8 4ed8: 91,02,ca             orrb  Rca,2              [Flag_ca] |= 2;      
8 4edb: b1,01,b3             ldb   Rb3,1              [Ppctr] = 1;         
8 4ede: 20,07                sjmp  4ee7               goto 4ee7;           

8 4ee0: a1,80,00,40          ldw   R40,80             R40 = 80;            
8 4ee4: 71,fd,ca             an2b  Rca,fd             [Flag_ca] &= fd;     
8 4ee7: 71,fd,27             an2b  R27,fd             [Flags_27] &= fd;    
8 4eea: 89,00,00,40          cmpw  R40,0                                   
8 4eee: d7,03                jne   4ef3               if (R40 != 0) goto 4ef3;
8 4ef0: 91,02,27             orrb  R27,2              [Flags_27] |= 2;     
8 4ef3: f0                   ret                      return;              

Do_accelpump:
8 4ef4: 01,38                clrw  R38                R38 = 0;             
8 4ef6: 37,a1,02             jnb   B7,Ra1,4efb        if (!B7_[a1_Flags]) goto 4efb;
8 4ef9: 20,89                sjmp  4f84               goto 4f84;           

4efb - Sub 8 4efb:
8 4efb: b3,74,20,30          ldb   R30,[R74+20]       R30 = [Tar];         
8 4eff: 9b,f4,34,30          cmpb  R30,[Rf4+34]                            
8 4f03: d1,f4                jleu  4ef9               if ((uns) R30 <= [Aetar]) goto 4ef9;
8 4f05: 35,29,10             jnb   B5,R29,4f18        if (!B5_[Flags_29]) goto 4f18;
//  engine load (VE? )                                                                //
8 4f08: a3,74,de,42          ldw   R42,[R74+de]       R42 = [Load];        
8 4f0c: 6b,74,9e,42          sb2w  R42,[R74+9e]       R42 -= [Aeload];     
8 4f10: d3,06                jnc   4f18               if (R42 < 0) goto 4f18;
8 4f12: 8b,f4,32,42          cmpw  R42,[Rf4+32]                            
8 4f16: d1,6c                jleu  4f84               if ((uns) R42 <= [Aeacld]) goto 4f84;

4f18 - Sub 8 4f18:
8 4f18: 45,9e,00,f0,32       ad3w  R32,Rf0,9e         R32 = Fn019B;        
//  scale and translated TAR                                                          //
8 4f1d: b3,74,20,34          ldb   R34,[R74+20]       R34 = [Tar];         
8 4f21: ef,93,e6             call  35b7               UUbyteLu();          
8 4f24: b0,38,30             ldb   R30,R38            R30 = R38;           
//  Table 8CA8 fuel XX scaling (what is XX?)                                          //
8 4f27: 45,a8,00,f0,32       ad3w  R32,Rf0,a8         R32 = Fn020B;        
8 4f2c: b3,f4,35,36          ldb   R36,[Rf4+35]       R36 = [Frctae];      
8 4f30: ef,b5,f7             call  46e8               Sub0262();           
8 4f33: 0a,07,34             asrw  R34,7              R34 = R34 / 80;      
8 4f36: ef,73,e6             call  35ac               subyteLU();          
8 4f39: b0,38,32             ldb   R32,R38            R32 = R38;           
8 4f3c: ad,08,34             ldzbw R34,8              R34 = (uns)8;        
//  accel pump rate - (Deg/sec vs ECT)                                                //
8 4f3f: 45,f5,01,f4,38       ad3w  R38,Rf4,1f5        R38 = Accelrich;     
8 4f44: ef,94,e7             call  36db               UTabLu16();          
8 4f47: ac,3b,3c             ldzbw R3c,R3b            R3c = (uns)R3b;      
//  Accelerator Enrichment Multiplier vs TP                                           //
8 4f4a: 45,eb,01,f4,32       ad3w  R32,Rf4,1eb        R32 = Tpsaclrich;    
//  RAA is Throttle position - 126 - RATCH=Closed TP                                  //
8 4f4f: 4b,72,a6,aa,34       sb3w  R34,Raa,[R72+a6]   R34 = RTP - [TPS_Min__#_was__TPS_Ratch];
8 4f54: db,02                jc    4f58               if (R34 >= 0) goto 4f58;
8 4f56: 01,34                clrw  R34                R34 = 0;             
8 4f58: 08,08,34             shrw  R34,8              R34 = R34 / 100;     
8 4f5b: ef,59,e6             call  35b7               UUbyteLu();          
8 4f5e: 6c,38,3c             ml2w  R3c,R38            R3c *= R38;          
//  BP - barometric pressure                                                          //
8 4f61: b3,74,80,34          ldb   R34,[R74+80]       R34 = RBp;           
//  Table 90A6                                                                        //
8 4f65: 45,a6,01,f0,32       ad3w  R32,Rf0,1a6        R32 = Fn378;         
8 4f6a: ef,4a,e6             call  35b7               UUbyteLu();          
8 4f6d: 11,39                clrb  R39                R39 = 0;             
8 4f6f: 6c,38,3c             ml2w  R3c,R38            R3c *= R38;          
8 4f72: 0d,03,3c             shldw R3c,3              R3cL = R3cL * 8;     
//  accel pump multiplier                                                             //
8 4f75: a3,f4,2c,38          ldw   R38,[Rf4+2c]       R38 = [Gaclmult];    
8 4f79: 6c,3e,38             ml2w  R38,R3e            R38 *= R3e;          
8 4f7c: 98,00,3a             cmpb  R3a,0                                   
8 4f7f: df,03                je    4f84               if (R3a == 0) goto 4f84;
8 4f81: bd,ff,38             ldsbw R38,ff             R38 = (sig)ff;       
8 4f84: 6d,22,02,38          ml2w  R38,222            R38 *= 222;          
8 4f88: c3,72,0c,3a          stw   [R72+c],R3a        [Aefuel] = R3a;      
8 4f8c: f0                   ret                      return;              

Sub0294:
8 4f8d: b3,f4,3e,18          ldb   R18,[Rf4+3e]       R18 = [Meftra];      
8 4f91: 3f,a1,09             jb    B7,Ra1,4f9d        if (B7_[a1_Flags]) goto 4f9d;
8 4f94: 3a,a1,06             jb    B2,Ra1,4f9d        if (B2_[a1_Flags]) goto 4f9d;
8 4f97: 9b,f4,3a,c8          cmpb  Rc8,[Rf4+3a]                            
8 4f9b: db,07                jc    4fa4               if ((uns) [Atmr1] >= [Tfctm]) goto 4fa4;
8 4f9d: 71,f7,28             an2b  R28,f7             [Flags_28] &= f7;    
8 4fa0: 01,38                clrw  R38                R38 = 0;             
8 4fa2: 21,23                sjmp  50c7               goto 50c7;           

4fa4 - Sub 8 4fa4:
8 4fa4: 45,d2,00,f0,32       ad3w  R32,Rf0,d2         R32 = Ectflscale;    
8 4fa9: b3,f4,2a,36          ldb   R36,[Rf4+2a]       R36 = [Alpha];       
8 4fad: ef,38,f7             call  46e8               Sub0262();           
8 4fb0: 0a,07,34             asrw  R34,7              R34 = R34 / 80;      
8 4fb3: ef,f6,e5             call  35ac               subyteLU();          
8 4fb6: ac,38,a6             ldzbw Ra6,R38            [Nrmces] = (uns)R38; 
//  Table 8CFA load scaling                                                           //
8 4fb9: 45,fa,00,f0,32       ad3w  R32,Rf0,fa         R32 = Ldscale;       
//  engine load (VE? )                                                                //
8 4fbe: a3,74,de,34          ldw   R34,[R74+de]       R34 = [Load];        
8 4fc2: ef,47,e6             call  360c               UUWordLu();          
8 4fc5: 08,04,38             shrw  R38,4              R38 = R38 / 10;      
8 4fc8: a0,38,a8             ldw   Ra8,R38            [Nrmrld] = R38;      
8 4fcb: a0,a6,30             ldw   R30,Ra6            R30 = [Nrmces];      
8 4fce: a0,a8,32             ldw   R32,Ra8            R32 = [Nrmrld];      
8 4fd1: ad,0a,34             ldzbw R34,a              R34 = (uns)a;        
//  Table 9D38                                                                        //
8 4fd4: 45,ba,02,fc,38       ad3w  R38,Rfc,2ba        R38 = ECT_fuel;      
8 4fd9: ef,ff,e6             call  36db               UTabLu16();          
8 4fdc: 5f,f4,3c,3b,40       ml3b  R40,R3b,[Rf4+3c]   R40 = R3b * [Mteftc];
8 4fe1: a0,a6,30             ldw   R30,Ra6            R30 = [Nrmces];      
8 4fe4: a0,a8,32             ldw   R32,Ra8            R32 = [Nrmrld];      
8 4fe7: ad,0a,34             ldzbw R34,a              R34 = (uns)a;        
//  Table 9CE8                                                                        //
8 4fea: 45,6a,02,fc,38       ad3w  R38,Rfc,26a        R38 = Tb010;         
8 4fef: ef,e9,e6             call  36db               UTabLu16();          
8 4ff2: 5f,f4,3b,3b,3a       ml3b  R3a,R3b,[Rf4+3b]   R3a = R3b * [Mteisf];
8 4ff7: 08,01,3a             shrw  R3a,1              R3a = R3a / 2;       
8 4ffa: 33,28,14             jnb   B3,R28,5011        if (!B3_[Flags_28]) goto 5011;
8 4ffd: 31,27,29             jnb   B1,R27,5029        if (!B1_[Flags_27]) goto 5029;
8 5000: af,fc,44,38          ldzbw R38,[Rfc+44]       R38 = (uns)[Sc0127]; 
8 5004: 6c,3a,38             ml2w  R38,R3a            R38 *= R3a;          
8 5007: 0d,09,38             shldw R38,9              R38L = R38L * 200;   
8 500a: d3,0e                jnc   501a               if (R38 * 200 <= ffff) goto 501a;
8 500c: bd,ff,3a             ldsbw R3a,ff             R3a = (sig)ff;       
8 500f: 20,09                sjmp  501a               goto 501a;           

8 5011: b3,f4,3d,14          ldb   R14,[Rf4+3d]       R14 = [Tfcisw];      
8 5015: 38,14,02             jb    B0,R14,501a        if (B0_R14) goto 501a;
8 5018: 01,3a                clrw  R3a                R3a = 0;             
8 501a: c3,74,14,00          stw   [R74+14],0         [Aisfl] = 0;         
8 501e: c3,74,16,3a          stw   [R74+16],R3a       [Aisf] = R3a;        
8 5022: 01,38                clrw  R38                R38 = 0;             
8 5024: 91,08,28             orrb  R28,8              [Flags_28] |= 8;     
8 5027: 20,9e                sjmp  50c7               goto 50c7;           

8 5029: 4b,74,18,06,34       sb3w  R34,R06,[R74+18]   R34 = IO_TIMER - [Deltim];
8 502e: c3,74,18,06          stw   [R74+18],R06       [Deltim] = IO_TIMER; 
8 5032: 6d,44,28,34          ml2w  R34,2844           R34 *= 2844;         
8 5036: a0,36,34             ldw   R34,R36            R34 = R36;           
8 5039: fe,6c,9e,34          sml2w  R34,R9e           R34 *= (sig)[Eftr];  
8 503d: 67,74,14,34          ad2w  R34,[R74+14]       R34 += [Aisfl];      
8 5041: a7,74,16,36          adcw  R36,[R74+16]       R36 +=[Aisf] + CY;   
8 5045: c3,74,14,34          stw   [R74+14],R34       [Aisfl] = R34;       
8 5049: c3,74,16,36          stw   [R74+16],R36       [Aisf] = R36;        
8 504d: 11,18                clrb  R18                R18 = 0;             
8 504f: 3b,ec,4e             jb    B3,Rec,50a0        if (B3_[Flag_ec]) goto 50a0;
8 5052: 9b,72,d7,00          cmpb  0,[R72+d7]                              
8 5056: de,48                jlt   50a0               if ((sig) 0 < [Iscflg]) goto 50a0;
8 5058: df,11                je    506b               if (0 == [Iscflg]) goto 506b;
8 505a: af,72,e6,30          ldzbw R30,[R72+e6]       R30 = (uns)[Dsdrpm]; 
8 505e: 09,06,30             shlw  R30,6              R30 = R30 * 40;      
8 5061: 48,30,ae,30          sb3w  R30,Rae,R30        R30 = [Rpmx4] - R30; 
8 5065: 8b,f4,38,30          cmpw  R30,[Rf4+38]                            
8 5069: de,35                jlt   50a0               if ((sig) R30 < [Tfsmn]) goto 50a0;
8 506b: 8b,74,16,3a          cmpw  R3a,[R74+16]                            
8 506f: df,2f                je    50a0               if (R3a == [Aisf]) goto 50a0;
8 5071: 4b,74,16,3a,34       sb3w  R34,R3a,[R74+16]   R34 = R3a - [Aisf];  
8 5076: d9,02                jgtu  507a               if ((uns) R34 > 0) goto 507a;
8 5078: 03,34                negw  R34                R34 = -R34;          
8 507a: 01,36                clrw  R36                R36 = 0;             
8 507c: 0d,08,34             shldw R34,8              R34L = R34L * 100;   
8 507f: 88,00,3a             cmpw  R3a,0                                   
8 5082: d7,05                jne   5089               if (R3a != 0) goto 5089;
8 5084: a0,36,34             ldw   R34,R36            R34 = R36;           
8 5087: 20,03                sjmp  508c               goto 508c;           

8 5089: 8c,3a,34             divw  R34,R3a            R34 = R34L / R3a;    
8 508c: 8b,f4,40,34          cmpw  R34,[Rf4+40]                            
8 5090: d1,0e                jleu  50a0               if ((uns) R34 <= [Tfcded]) goto 50a0;
8 5092: b3,f4,3e,18          ldb   R18,[Rf4+3e]       R18 = [Meftra];      
8 5096: 8b,74,16,3a          cmpw  R3a,[R74+16]                            
8 509a: db,04                jc    50a0               if ((uns) R3a >= [Aisf]) goto 50a0;
8 509c: b3,f4,3f,18          ldb   R18,[Rf4+3f]       R18 = [Meftrd];      
8 50a0: 11,42                clrb  R42                R42 = 0;             
8 50a2: 6b,74,16,3a          sb2w  R3a,[R74+16]       R3a -= [Aisf];       
8 50a6: db,04                jc    50ac               if (R3a >= 0) goto 50ac;
8 50a8: 17,42                incb  R42                R42++;               
8 50aa: 03,3a                negw  R3a                R3a = -R3a;          
8 50ac: af,f4,36,38          ldzbw R38,[Rf4+36]       R38 = (uns)[Kft];    
8 50b0: 6c,3a,38             ml2w  R38,R3a            R38 *= R3a;          
8 50b3: 0d,01,38             shldw R38,1              R38L = R38L * 2;     
8 50b6: 8c,40,38             divw  R38,R40            R38 = R38L / R40;    
8 50b9: dd,03                jv    50be               if (OV) goto 50be;   
8 50bb: 37,39,04             jnb   B7,R39,50c2        if (!B7_R39) goto 50c2;
8 50be: a1,ff,7f,38          ldw   R38,7fff           R38 = 7fff;          
8 50c2: 30,42,02             jnb   B0,R42,50c7        if (!B0_R42) goto 50c7;
8 50c5: 03,38                negw  R38                R38 = -R38;          
8 50c7: c0,9e,38             stw   R9e,R38            [Eftr] = R38;        
8 50ca: 7d,78,18             ml2b  R18,78             R18 *= 78;           
8 50cd: fe,6c,18,38          sml2w  R38,R18           R38 *= (sig)R18;     
8 50d1: 0d,01,38             shldw R38,1              R38L = R38L * 2;     
8 50d4: c3,72,08,3a          stw   [R72+8],R3a        [Eftrff] = R3a;      
8 50d8: 0e,01,38             asrdw R38,1              R38L = R38L / 2;     
8 50db: a3,72,0c,18          ldw   R18,[R72+c]        R18 = [Aefuel];      
8 50df: 08,01,18             shrw  R18,1              R18 = R18 / 2;       
8 50e2: 64,18,3a             ad2w  R3a,R18            R3a += R18;          
8 50e5: c3,76,28,3a          stw   [R76+28],R3a       [Aeftrff] = R3a;     
8 50e9: c3,76,2a,38          stw   [R76+2a],R38       [Aeftrffl] = R38;    
8 50ed: f0                   ret                      return;              

Update_fpump:
8 50ee: 38,d9,11             jb    B0,Rd9,5102        if (B0_[Vip_flags4]) goto 5102;
8 50f1: a3,72,be,14          ldw   R14,[R72+be]       R14 = [Tslpip];      
8 50f5: 89,00,04,14          cmpw  R14,400                                 
//  1024 = 1 second                                                                   //
8 50f9: d3,04                jnc   50ff               if ((uns) R14 < 400) goto 50ff;
8 50fb: 71,7f,46             an2b  R46,7f             [IO_Port_State] &= 7f;
8 50fe: f0                   ret                      return;              

8 50ff: 91,80,46             orrb  R46,80             [IO_Port_State] |= 80;
8 5102: f0                   ret                      return;              

Sub0297:
8 5103: 3f,a1,28             jb    B7,Ra1,512e        if (B7_[a1_Flags]) goto 512e;
8 5106: 51,fa,c5,38          an3b  R38,Rc5,fa         R38 = [Fmem_flags] & fa;
8 510a: d7,22                jne   512e               if (R38 != 0) goto 512e;
//  Table 97C7                                                                        //
8 510c: 45,1f,00,fa,30       ad3w  R30,Rfa,1f         R30 = St0005;        
8 5111: ef,3b,e6             call  374f               Check_Timers();      
8 5114: db,18                jc    512e               if (R30 > ffff) goto 512e;
//  WOT flag                                                                          //
8 5116: 38,d0,15             jb    B0,Rd0,512e        if (B0_[Apt]) goto 512e;
8 5119: 3e,e6,16             jb    B6,Re6,5132        if (B6_[Flags_e6]) goto 5132;
8 511c: a3,72,a8,38          ldw   R38,[R72+a8]       R38 = [EVP_Def];     
8 5120: 6b,fa,28,38          sb2w  R38,[Rfa+28]       R38 -= [EGRDB];      
8 5124: db,02                jc    5128               if (R38 >= 0) goto 5128;
8 5126: 01,38                clrw  R38                R38 = 0;             

5128 - Sub 8 5128:
8 5128: 8b,72,96,38          cmpw  R38,[R72+96]                            
8 512c: d3,04                jnc   5132               if ((uns) R38 < [EVP_Raw]) goto 5132;
8 512e: 71,fe,28             an2b  R28,fe             [Flags_28] &= fe;    
8 5131: f0                   ret                      return;              

8 5132: 91,01,28             orrb  R28,1              [Flags_28] |= 1;     
8 5135: f0                   ret                      return;              

Calc_EVP:
8 5136: b3,fa,31,14          ldb   R14,[Rfa+31]       R14 = [Egr_type];    
//  jmp if sonic or no EGR                                                            //
8 513a: 30,14,03             jnb   B0,R14,5140        if (!B0_R14) goto 5140;
//  PFEHP FLG - sonic h/w present from calibration data                               //
8 513d: 91,40,e6             orrb  Re6,40             [Flags_e6] |= 40;    

5140 - Sub 8 5140:
8 5140: 31,14,0c             jnb   B1,R14,514f        if (!B1_R14) goto 514f;
//  BG POINT                                                                          //
8 5143: 75,02,9a             ad2b  R9a,2              [Bg_point] += 2;     
//  288 EM - EGR Mass Flow = zero                                                     //
8 5146: c7,74,0a,00          stb   [R74+a],0          REm = 0;             
//  16E - EGRACT - Actual EGR percent = 100*EM/AMPEM.                                 //
8 514a: c7,72,ee,00          stb   [R72+ee],0         [Egract] = 0;        
8 514e: f0                   ret                      return;              

8 514f: 37,a1,03             jnb   B7,Ra1,5155        if (!B7_[a1_Flags]) goto 5155;
8 5152: e7,0d,01             jump  5262               goto Sub0312;        

5155 - Sub 8 5155:
8 5155: 3e,e6,03             jb    B6,Re6,515b        if (B6_[Flags_e6]) goto 515b;
8 5158: e7,99,00             jump  51f4               goto Sub0306;        

515b - Sub 8 515b:
8 515b: 45,08,01,fa,32       ad3w  R32,Rfa,108        R32 = Fc028;         
//  BP - barometric pressure                                                          //
8 5160: b3,74,80,34          ldb   R34,[R74+80]       R34 = RBp;           
8 5164: ef,50,e4             call  35b7               UUbyteLu();          
//  1FF - BPCOR - BP corrected                                                        //
8 5167: c7,74,81,38          stb   [R74+81],R38       [Bpcor] = R38;       
//  KAMRF1 - Adaptive Fuel strategy correction factor. It is composed of the value LTMTB1rc + .5  //
8 516b: a3,01,b4,07,34       ldw   R34,[7b4]          R34 = [Kamrf1];      
//  RA2 = AM -> Air mass flow, (lb/min)                                               //
8 5170: 6c,a2,34             ml2w  R34,Ra2            R34 *= RAM;          
8 5173: 0c,07,34             shrdw R34,7              R34L = R34L / 80;    
8 5176: 88,00,36             cmpw  R36,0                                   
8 5179: df,03                je    517e               if (R36 == 0) goto 517e;
8 517b: bd,ff,34             ldsbw R34,ff             R34 = (sig)ff;       

517e - Sub 8 517e:
8 517e: 45,12,01,fa,32       ad3w  R32,Rfa,112        R32 = Fc029;         
8 5183: ef,86,e4             call  360c               UUWordLu();          
8 5186: 6d,00,ef,38          ml2w  R38,ef00           R38 *= ef00;         
//  1FF - BPCOR - BP corrected                                                        //
8 518a: b3,74,81,37          ldb   R37,[R74+81]       R37 = [Bpcor];       
8 518e: 11,36                clrb  R36                R36 = 0;             
8 5190: 08,01,36             shrw  R36,1              R36 = R36 / 2;       
8 5193: 8c,36,38             divw  R38,R36            R38 = R38L / R36;    
8 5196: d5,03                jnv   519b               if (!OV) goto 519b;  
8 5198: bd,ff,38             ldsbw R38,ff             R38 = (sig)ff;       
8 519b: c0,40,38             stw   R40,R38            R40 = R38;           
//  104 - EPTBAR - Rolling average of the synchronously sampled EPT sensor (time constant = TCEPT), secs  //
8 519e: a3,72,84,30          ldw   R30,[R72+84]       R30 = [EPT_Filt];    
8 51a2: 08,01,30             shrw  R30,1              R30 = R30 / 2;       
//  filtered EVP saved in KAM                                                         //
8 51a5: a3,01,ee,07,32       ldw   R32,[7ee]          R32 = [KEptzer];     
8 51aa: 08,01,32             shrw  R32,1              R32 = R32 / 2;       
8 51ad: 68,32,30             sb2w  R30,R32            R30 -= R32;          
//  97D4 - XFREPT - Transfer function of EPT sensor, " H20/counts                     //
8 51b0: a3,fa,2c,32          ldw   R32,[Rfa+2c]       R32 = [XFREPT];      
8 51b4: fe,6c,32,30          sml2w  R30,R32           R30 *= (sig)R32;     
8 51b8: 28,d9                scall 5293               Sub0315();           
8 51ba: 48,32,40,34          sb3w  R34,R40,R32        R34 = R40 - R32;     
8 51be: 3f,33,06             jb    B7,R33,51c7        if (B7_R33) goto 51c7;
8 51c1: db,09                jc    51cc               if ((uns) R34 >= ff) goto 51cc;
8 51c3: 01,34                clrw  R34                R34 = 0;             
8 51c5: 20,05                sjmp  51cc               goto 51cc;           

8 51c7: d3,03                jnc   51cc               if (R34 < 0) goto 51cc;
8 51c9: bd,ff,34             ldsbw R34,ff             R34 = (sig)ff;       

51cc - Sub 8 51cc:
8 51cc: c3,72,f6,34          stw   [R72+f6],R34       [Delpr] = R34;       
//  Table 995E - EGR mass flow as a function of DELPR, lb/min.                        //
8 51d0: 45,b6,01,fa,32       ad3w  R32,Rfa,1b6        R32 = Fc037;         
8 51d5: ef,34,e4             call  360c               UUWordLu();          
//  BP - barometric pressure                                                          //
8 51d8: b3,74,80,34          ldb   R34,[R74+80]       R34 = RBp;           
8 51dc: 7d,4b,34             ml2b  R34,4b             R34 *= 4b;           
8 51df: 65,75,3a,34          ad2w  R34,3a75           R34 += 3a75;         
8 51e3: 6c,34,38             ml2w  R38,R34            R38 *= R34;          
8 51e6: 09,01,3a             shlw  R3a,1              R3a = R3a * 2;       
8 51e9: d3,03                jnc   51ee               if (R3a * 2 <= ffff) goto 51ee;
8 51eb: b1,ff,3b             ldb   R3b,ff             R3b = ff;            

51ee - Sub 8 51ee:
8 51ee: c7,74,0a,3b          stb   [R74+a],R3b        REm = R3b;           
8 51f2: 20,3e                sjmp  5232               goto 5232;           

Sub0306:
8 51f4: 11,38                clrb  R38                R38 = 0;             
8 51f6: 51,f8,c5,34          an3b  R34,Rc5,f8         R34 = [Fmem_flags] & f8;
8 51fa: d7,32                jne   522e               if (R34 != 0) goto 522e;
//  157 - ISCFLG - ISC MODE Flag (1 = RPM CONTROL Mode)                               //
8 51fc: b3,72,d7,34          ldb   R34,[R72+d7]       R34 = [Iscflg];      
8 5200: 99,01,34             cmpb  R34,1                                   
8 5203: de,06                jlt   520b               if ((sig) R34 < 1) goto 520b;
//  20E - DELOPT - Filtered desired EGR valve position.                               //
8 5205: 8b,74,90,00          cmpw  0,[R74+90]                              
8 5209: df,23                je    522e               if (0 == [Delopt]) goto 522e;

520b - Sub 8 520b:
8 520b: a3,72,f0,34          ldw   R34,[R72+f0]       R34 = [Evp];         
//  128 - EOFF - The EGR valve reading when the valve is fully closed in A/D counts   //
8 520f: 6b,72,a8,34          sb2w  R34,[R72+a8]       R34 -= [EVP_Def];    
8 5213: db,02                jc    5217               if (R34 >= 0) goto 5217;
8 5215: 01,34                clrw  R34                R34 = 0;             

5217 - Sub 8 5217:
8 5217: 45,5c,01,fa,32       ad3w  R32,Rfa,15c        R32 = Fc033;         
8 521c: 08,08,34             shrw  R34,8              R34 = R34 / 100;     
8 521f: ef,ea,e3             call  360c               UUWordLu();          
//  BP - barometric pressure                                                          //
8 5222: 7f,74,80,38          ml2b  R38,[R74+80]       R38 *= RBp;          
8 5226: 9d,ef,38             divb  R38,ef             R38 = R38W / ef;     
8 5229: d5,03                jnv   522e               if (!OV) goto 522e;  
8 522b: b1,ff,38             ldb   R38,ff             R38 = ff;            

522e - Sub 8 522e:
8 522e: c7,74,0a,38          stb   [R74+a],R38        REm = R38;           

5232 - Sub 8 5232:
8 5232: b3,74,0a,34          ldb   R34,[R74+a]        R34 = REm;           
8 5236: 7d,c8,34             ml2b  R34,c8             R34 *= c8;           
8 5239: 01,36                clrw  R36                R36 = 0;             
8 523b: 0d,04,34             shldw R34,4              R34L = R34L * 10;    
8 523e: 8c,a4,34             divw  R34,Ra4            R34 = R34L / [Ampem];
8 5241: dd,06                jv    5249               if (OV) goto 5249;   
8 5243: 89,ff,00,34          cmpw  R34,ff                                  
8 5247: d1,03                jleu  524c               if ((uns) R34 <= ff) goto 524c;
8 5249: b1,ff,34             ldb   R34,ff             R34 = ff;            

524c - Sub 8 524c:
8 524c: af,72,ee,32          ldzbw R32,[R72+ee]       R32 = (uns)[Egract]; 
//  save new over old value 16E - EGRACT - Actual EGR percent = 100*EM/AMPEM.         //
8 5250: c7,72,ee,34          stb   [R72+ee],R34       [Egract] = R34;      
8 5254: 11,35                clrb  R35                R35 = 0;             
//  PFEHP FLG - sonic h/w present from calibration data                               //
8 5256: 36,e6,09             jnb   B6,Re6,5262        if (!B6_[Flags_e6]) goto Sub0312;
8 5259: ef,02,e4             call  365e               Srolav1T([d046]);    
8 525c: 46,d0                                         #args                
//  filtered sensor output - EGRACT - Actual EGR percent = 100*EM/AMPEM.              //
8 525e: c7,72,ee,3e          stb   [R72+ee],R3e       [Egract] = R3e;      

Sub0312:
8 5262: 2e,9f                scall 5103               Sub0297();           
8 5264: 71,7f,24             an2b  R24,7f             [Flags_24] &= 7f;    
//  EGRMPT - Calibration time delay to ramp EGR in, secs.                             //
8 5267: b3,fa,2a,38          ldb   R38,[Rfa+2a]       R38 = [egrmpt];      
//  9E5F - CTLOW - Temperature of Engine Coolant at Cold Startup, deg F.              //
8 526b: 9b,fe,05,ad          cmpb  Rad,[Rfe+5]                             
8 526f: d2,0f                jgt   5280               if ((sig) [Tcstrt] > [CtLow]) goto 5280;
8 5271: 30,28,10             jnb   B0,R28,5284        if (!B0_[Flags_28]) goto 5284;
//  set TSEGRE FLG -                                                                  //
8 5274: 91,80,24             orrb  R24,80             [Flags_24] |= 80;    
//  264 timer TSEGRE - Accumulated time EGR is enabled.                               //
8 5277: 9b,74,e6,38          cmpb  R38,[R74+e6]                            
8 527b: d9,07                jgtu  5284               if ((uns) R38 > [Tsegre]) goto 5284;
//  clr TSEGRE FLG -                                                                  //
8 527d: 71,7f,24             an2b  R24,7f             [Flags_24] &= 7f;    

5280 - Sub 8 5280:
8 5280: c7,74,e6,38          stb   [R74+e6],R38       [Tsegre] = R38;      

5284 - Sub 8 5284:
8 5284: 3e,e6,25             jb    B6,Re6,52ac        if (B6_[Flags_e6]) goto 52ac;
//  EGREN - Flag which indicates EGR enabled                                          //
8 5287: 38,28,22             jb    B0,R28,52ac        if (B0_[Flags_28]) goto 52ac;
//  16F - EGRATE - Desired EGR rate in percent                                        //
8 528a: c7,72,ef,00          stb   [R72+ef],0         [Egrate] = 0;        
//  20E - DELOPT - Filtered desired EGR valve position.                               //
8 528e: c3,74,90,00          stw   [R74+90],0         [Delopt] = 0;        
8 5292: f0                   ret                      return;              

Sub0315:
8 5293: 89,00,e7,32          cmpw  R32,e700                                
8 5297: d6,05                jge   529e               if ((sig) R32 >= e700) goto 529e;
8 5299: a1,00,9c,32          ldw   R32,9c00           R32 = 9c00;          
8 529d: f0                   ret                      return;              

8 529e: 89,80,0c,32          cmpw  R32,c80                                 
8 52a2: da,04                jle   52a8               if ((sig) R32 <= c80) goto 52a8;
8 52a4: a1,80,0c,32          ldw   R32,c80            R32 = c80;           
8 52a8: 09,02,32             shlw  R32,2              R32 = R32 * 4;       
8 52ab: f0                   ret                      return;              

52ac - Sub 8 52ac:
8 52ac: 45,de,00,f0,32       ad3w  R32,Rf0,de         R32 = Rpmscale;      
8 52b1: a0,ae,34             ldw   R34,Rae            R34 = [Rpmx4];       
8 52b4: ef,55,e3             call  360c               UUWordLu();          
8 52b7: a0,38,a6             ldw   Ra6,R38            [Nrmces] = R38;      
//  Input = LOAD and Output = Normalized load                                         //
8 52ba: 45,fa,00,f0,32       ad3w  R32,Rf0,fa         R32 = Ldscale;       
//  engine load (VE? )                                                                //
8 52bf: a3,74,de,34          ldw   R34,[R74+de]       R34 = [Load];        
8 52c3: ef,46,e3             call  360c               UUWordLu();          
8 52c6: a0,38,a8             ldw   Ra8,R38            [Nrmrld] = R38;      
8 52c9: a0,a6,30             ldw   R30,Ra6            R30 = [Nrmces];      
8 52cc: a0,a8,32             ldw   R32,Ra8            R32 = [Nrmrld];      
8 52cf: ad,0a,34             ldzbw R34,a              R34 = (uns)a;        
//  Table 99AE - Sea level EGR Table.                                                 //
8 52d2: 45,06,02,fa,38       ad3w  R38,Rfa,206        R38 = Sea_l_EGR;     
8 52d7: ef,10,e4             call  36ea               UTabLookUp();        
8 52da: ac,3b,3c             ldzbw R3c,R3b            R3c = (uns)R3b;      
//  201 - MULT BP212A - ?                                                             //
8 52dd: af,74,83,38          ldzbw R38,[R74+83]       R38 = (uns)[Mult_bp212A];
8 52e1: ef,66,05             call  584a               Scale_R3c();         
8 52e4: a0,3c,42             ldw   R42,R3c            R42 = R3c;           
8 52e7: a0,a6,30             ldw   R30,Ra6            R30 = [Nrmces];      
8 52ea: a0,a8,32             ldw   R32,Ra8            R32 = [Nrmrld];      
8 52ed: ad,0a,34             ldzbw R34,a              R34 = (uns)a;        
//  Table 99FE - Altitude EGR Table.                                                  //
8 52f0: 45,56,02,fa,38       ad3w  R38,Rfa,256        R38 = alt_EGR;       
8 52f5: ef,f2,e3             call  36ea               UTabLookUp();        
8 52f8: ac,3b,3c             ldzbw R3c,R3b            R3c = (uns)R3b;      
//  Table 98F8 - EGRALT multiplier as a function of Barometric Pressure BP.           //
8 52fb: 45,50,01,fa,32       ad3w  R32,Rfa,150        R32 = Fc032;         
//  BP - barometric pressure                                                          //
8 5300: b3,74,80,34          ldb   R34,[R74+80]       R34 = RBp;           
8 5304: ef,b0,e2             call  35b7               UUbyteLu();          
8 5307: 11,39                clrb  R39                R39 = 0;             
8 5309: ef,3e,05             call  584a               Scale_R3c();         
8 530c: 64,42,3c             ad2w  R3c,R42            R3c += R42;          
//  Table 98E2 - Multiplier as a function of ECT.                                     //
8 530f: 45,3a,01,fa,32       ad3w  R32,Rfa,13a        R32 = Fc030;         
8 5314: b0,b0,34             ldb   R34,Rb0            R34 = [ECT];         
8 5317: ef,97,e2             call  35b1               SSByteLU();          
8 531a: b0,38,3a             ldb   R3a,R38            R3a = R38;           
//  Table 991C - Multiplier as a function of Air Charge Temperature ACT.              //
8 531d: 45,74,01,fa,32       ad3w  R32,Rfa,174        R32 = Fc034;         
//  RB1 = ACT (ACT = RB1 * 4)                                                         //
8 5322: b0,b1,34             ldb   R34,Rb1            R34 = [ACT];         
8 5325: ef,84,e2             call  35ac               subyteLU();          
8 5328: 7c,3a,38             ml2b  R38,R3a            R38 *= R3a;          
8 532b: 6c,3c,38             ml2w  R38,R3c            R38 *= R3c;          
8 532e: 0d,03,38             shldw R38,3              R38L = R38L * 8;     
8 5331: 11,38                clrb  R38                R38 = 0;             
//  97CD X EGR Table multplier.                                                       //
8 5333: b3,fa,25,39          ldb   R39,[Rfa+25]       R39 = [Egr_mult];    
8 5337: 6c,3a,38             ml2w  R38,R3a            R38 *= R3a;          
//  264 TSEGRE - Accumulated time EGR is enabled (sec)                                //
8 533a: b3,74,e6,39          ldb   R39,[R74+e6]       R39 = [Tsegre];      
8 533e: 11,38                clrb  R38                R38 = 0;             
//  97D2 - EGRMPT - Calibration time delay to ramp EGR in, sec.                       //
8 5340: 9f,fa,2a,38          divb  R38,[Rfa+2a]       R38 = R38W / [egrmpt];
8 5344: dd,08                jv    534e               if (OV) goto 534e;   
8 5346: 11,39                clrb  R39                R39 = 0;             
8 5348: 6c,3a,38             ml2w  R38,R3a            R38 *= R3a;          
8 534b: 0d,08,38             shldw R38,8              R38L = R38L * 100;   

534e - Sub 8 534e:
8 534e: 30,ec,4e             jnb   B0,Rec,539f        if (!B0_[Flag_ec]) goto 539f;
8 5351: a0,3a,3c             ldw   R3c,R3a            R3c = R3a;           
//  generates Table entry point. Input = N and Output = Normalized N.                 //
8 5354: 45,46,01,f0,32       ad3w  R32,Rf0,146        R32 = Fn083;         
8 5359: a0,ae,34             ldw   R34,Rae            R34 = [Rpmx4];       
8 535c: ef,ad,e2             call  360c               UUWordLu();          
8 535f: a0,38,30             ldw   R30,R38            R30 = R38;           
//  generates Table entry point. Input = LOAD and Output = Normalized Load.           //
8 5362: 45,32,01,f0,32       ad3w  R32,Rf0,132        R32 = Fn082;         
//  engine load (VE? )                                                                //
8 5367: a3,74,de,34          ldw   R34,[R74+de]       R34 = [Load];        
8 536b: ef,9e,e2             call  360c               UUWordLu();          
8 536e: a0,38,32             ldw   R32,R38            R32 = R38;           
8 5371: ad,04,34             ldzbw R34,4              R34 = (uns)4;        
//  Table 9A4E - Managed fuel Air EGR Table. X -input = FN083 - Normalized Engine Speed, RPM Y -input = FN082 - Normalized load. Output = Multiplier.  //
8 5374: 45,a6,02,fa,38       ad3w  R38,Rfa,2a6        R38 = Tb006;         
8 5379: ef,6e,e3             call  36ea               UTabLookUp();        
8 537c: b3,74,82,38          ldb   R38,[R74+82]       R38 = [Mult_bp311];  
8 5380: 7c,3b,38             ml2b  R38,R3b            R38 *= R3b;          
8 5383: 5f,74,f4,39,38       ml3b  R38,R39,[R74+f4]   R38 = R39 * [Mfamul];
8 5388: 03,38                negw  R38                R38 = -R38;          
8 538a: 65,00,20,38          ad2w  R38,2000           R38 += 2000;         
8 538e: 37,39,02             jnb   B7,R39,5393        if (!B7_R39) goto 5393;
8 5391: 01,38                clrw  R38                R38 = 0;             
8 5393: 6c,3c,38             ml2w  R38,R3c            R38 *= R3c;          
8 5396: 0d,03,38             shldw R38,3              R38L = R38L * 8;     
8 5399: d3,04                jnc   539f               if (R38 * 8 <= ffff) goto 539f;
8 539b: a1,ff,ff,3a          ldw   R3a,ffff           R3a = ffff;          
8 539f: 77,fa,24,3a          ad2b  R3a,[Rfa+24]       R3a += [Sc0097];     
8 53a3: b4,00,3b             adcb  R3b,0              R3b += 0 + CY;       
8 53a6: 98,00,3b             cmpb  R3b,0                                   
8 53a9: df,03                je    53ae               if (R3b == 0) goto 53ae;
8 53ab: b1,ff,3a             ldb   R3a,ff             R3a = ff;            
8 53ae: c7,72,ef,3a          stb   [R72+ef],R3a       [Egrate] = R3a;      
8 53b2: 3e,e6,63             jb    B6,Re6,5418        if (B6_[Flags_e6]) goto 5418;
8 53b5: 98,00,3a             cmpb  R3a,0                                   
8 53b8: d7,06                jne   53c0               if (R3a != 0) goto 53c0;
8 53ba: c3,74,90,00          stw   [R74+90],0         [Delopt] = 0;        
8 53be: 20,57                sjmp  5417               goto 5417;           

8 53c0: 5d,a4,3a,38          ml3b  R38,R3a,a4         R38 = R3a * a4;      
8 53c4: 6c,a4,38             ml2w  R38,Ra4            R38 *= [Ampem];      
8 53c7: 0c,05,38             shrdw R38,5              R38L = R38L / 20;    
8 53ca: a0,3a,38             ldw   R38,R3a            R38 = R3a;           
8 53cd: 6d,bc,03,38          ml2w  R38,3bc            R38 *= 3bc;          
//  BP - barometric pressure                                                          //
8 53d1: af,74,80,34          ldzbw R34,[R74+80]       R34 = (uns)RBp;      
8 53d5: 8c,34,38             divw  R38,R34            R38 = R38L / R34;    
8 53d8: dd,15                jv    53ef               if (OV) goto 53ef;   
//  Table 9926                                                                        //
8 53da: 45,7e,01,fa,32       ad3w  R32,Rfa,17e        R32 = Fc035;         
8 53df: a0,38,34             ldw   R34,R38            R34 = R38;           
8 53e2: ef,27,e2             call  360c               UUWordLu();          
8 53e5: 09,08,38             shlw  R38,8              R38 = R38 * 100;     
8 53e8: 47,72,a8,38,34       ad3w  R34,R38,[R72+a8]   R34 = R38 + [EVP_Def];
8 53ed: d3,03                jnc   53f2               if (R34 <= ffff) goto 53f2;
8 53ef: bd,c0,34             ldsbw R34,c0             R34 = (sig)c0;       
8 53f2: a3,72,a8,42          ldw   R42,[R72+a8]       R42 = [EVP_Def];     
8 53f6: 8b,74,90,42          cmpw  R42,[R74+90]                            
8 53fa: d3,04                jnc   5400               if ((uns) R42 < [Delopt]) goto 5400;
8 53fc: c3,74,90,42          stw   [R74+90],R42       [Delopt] = R42;      

5400 - Sub 8 5400:
8 5400: ef,51,e2             call  3654               Srolav3T([Delopt],R34,[d040]);
8 5403: 0e,02,34,00,40,d0                             #args                
//  check result                                                                      //
8 5409: 89,80,e6,3e          cmpw  R3e,e680                                
8 540d: d1,04                jleu  5413               if ((uns) R3e <= e680) goto 5413;
//  clamp value if nec.                                                               //
8 540f: a1,80,e6,3e          ldw   R3e,e680           R3e = e680;          

5413 - Sub 8 5413:
8 5413: c3,74,90,3e          stw   [R74+90],R3e       [Delopt] = R3e;      
8 5417: f0                   ret                      return;              

8 5418: 7d,a4,3a             ml2b  R3a,a4             R3a *= a4;           
8 541b: a0,a4,38             ldw   R38,Ra4            R38 = [Ampem];       
8 541e: 6c,3a,38             ml2w  R38,R3a            R38 *= R3a;          
8 5421: c0,3c,3a             stw   R3c,R3a            R3c = R3a;           
8 5424: 99,07,3b             cmpb  R3b,7                                   
8 5427: d1,05                jleu  542e               if ((uns) R3b <= 7) goto 542e;
8 5429: bd,ff,3a             ldsbw R3a,ff             R3a = (sig)ff;       
8 542c: 20,03                sjmp  5431               goto 5431;           

8 542e: 0d,05,38             shldw R38,5              R38L = R38L * 20;    
8 5431: c7,72,fe,3b          stb   [R72+fe],R3b       [Desem] = R3b;       
8 5435: a3,fa,36,32          ldw   R32,[Rfa+36]       R32 = [Sc0102];      
8 5439: 67,fa,38,32          ad2w  R32,[Rfa+38]       R32 += [Sc0103];     
8 543d: 88,32,3c             cmpw  R3c,R32                                 
8 5440: d3,03                jnc   5445               if ((uns) R3c < R32) goto 5445;
8 5442: 91,10,a1             orrb  Ra1,10             [a1_Flags] |= 10;    
8 5445: 8b,fa,36,3c          cmpw  R3c,[Rfa+36]                            
8 5449: db,03                jc    544e               if ((uns) R3c >= [Sc0102]) goto 544e;
8 544b: 71,ef,a1             an2b  Ra1,ef             [a1_Flags] &= ef;    
8 544e: 38,28,02             jb    B0,R28,5453        if (B0_[Flags_28]) goto 5453;
8 5451: 20,69                sjmp  54bc               goto 54bc;           

8 5453: 3c,a1,02             jb    B4,Ra1,5458        if (B4_[a1_Flags]) goto 5458;
8 5456: 20,70                sjmp  54c8               goto 54c8;           

8 5458: a0,3a,34             ldw   R34,R3a            R34 = R3a;           
//  Table 9986                                                                        //
8 545b: 45,de,01,fa,32       ad3w  R32,Rfa,1de        R32 = Fc038;         
8 5460: ef,a9,e1             call  360c               UUWordLu();          
8 5463: 6d,00,ef,38          ml2w  R38,ef00           R38 *= ef00;         
//  BP - barometric pressure                                                          //
8 5467: b3,74,80,37          ldb   R37,[R74+80]       R37 = RBp;           
8 546b: 11,36                clrb  R36                R36 = 0;             
8 546d: 8c,36,38             divw  R38,R36            R38 = R38L / R36;    
8 5470: d5,03                jnv   5475               if (!OV) goto 5475;  
8 5472: bd,ff,38             ldsbw R38,ff             R38 = (sig)ff;       
8 5475: 08,02,38             shrw  R38,2              R38 = R38 / 4;       
8 5478: 08,02,40             shrw  R40,2              R40 = R40 / 4;       
8 547b: 48,38,40,32          sb3w  R32,R40,R38        R32 = R40 - R38;     
8 547f: 2e,12                scall 5293               Sub0315();           
8 5481: c0,34,32             stw   R34,R32            R34 = R32;           
//  orig value                                                                        //
8 5484: a3,72,f4,32          ldw   R32,[R72+f4]       R32 = [Desdp];       
8 5488: a3,fa,42,36          ldw   R36,[Rfa+42]       R36 = [Sc0107];      
8 548c: ef,db,e1             call  366a               FilterX();           
//  filtered value                                                                    //
8 548f: c3,72,f4,3e          stw   [R72+f4],R3e       [Desdp] = R3e;       
8 5493: a3,fa,2e,38          ldw   R38,[Rfa+2e]       R38 = [Sc0098];      
8 5497: fe,6c,3e,38          sml2w  R38,R3e           R38 *= (sig)R3e;     
8 549b: 0d,02,38             shldw R38,2              R38L = R38L * 4;     
//  filtered EVP saved in KAM                                                         //
8 549e: a3,01,ee,07,36       ldw   R36,[7ee]          R36 = [KEptzer];     
8 54a3: 08,01,36             shrw  R36,1              R36 = R36 / 2;       
8 54a6: 64,36,3a             ad2w  R3a,R36            R3a += R36;          
8 54a9: d5,05                jnv   54b0               if (!OV) goto 54b0;  
8 54ab: bd,ff,3a             ldsbw R3a,ff             R3a = (sig)ff;       
8 54ae: 20,07                sjmp  54b7               goto 54b7;           

8 54b0: d6,02                jge   54b4               if ((sig) R3a >= 0) goto 54b4;
8 54b2: 01,3a                clrw  R3a                R3a = 0;             
8 54b4: 09,01,3a             shlw  R3a,1              R3a = R3a * 2;       
8 54b7: c3,72,fc,3a          stw   [R72+fc],R3a       [Conpr] = R3a;       
8 54bb: f0                   ret                      return;              

54bc - Sub 8 54bc:
8 54bc: c7,74,0a,00          stb   [R74+a],0          REm = 0;             
8 54c0: c7,72,ee,00          stb   [R72+ee],0         [Egract] = 0;        
8 54c4: c7,72,ef,00          stb   [R72+ef],0         [Egrate] = 0;        
8 54c8: c7,72,fe,00          stb   [R72+fe],0         [Desem] = 0;         
//  104 - EPTBAR                                                                      //
8 54cc: a3,72,84,30          ldw   R30,[R72+84]       R30 = [EPT_Filt];    
//  17C - CONPR                                                                       //
8 54d0: c3,72,fc,30          stw   [R72+fc],R30       [Conpr] = R30;       
//  174 - DESDP                                                                       //
8 54d4: c3,72,f4,40          stw   [R72+f4],R40       [Desdp] = R40;       
8 54d8: f0                   ret                      return;              

Calc_EGR:
8 54d9: 3e,e6,63             jb    B6,Re6,553f        if (B6_[Flags_e6]) goto 553f;
//  20E - DELOPT                                                                      //
8 54dc: 8b,74,90,00          cmpw  0,[R74+90]                              
8 54e0: db,52                jc    5534               if ((uns) 0 >= [Delopt]) goto 5534;
//  97D0 - EGRDED                                                                     //
8 54e2: a3,fa,28,30          ldw   R30,[Rfa+28]       R30 = [EGRDB];       
//  128 - EOFF                                                                        //
8 54e6: 67,72,a8,30          ad2w  R30,[R72+a8]       R30 += [EVP_Def];    
8 54ea: d3,03                jnc   54ef               if (R30 <= ffff) goto 54ef;
8 54ec: bd,c0,30             ldsbw R30,c0             R30 = (sig)c0;       

54ef - Sub 8 54ef:
8 54ef: 8b,72,f0,30          cmpw  R30,[R72+f0]                            
8 54f3: d3,0c                jnc   5501               if ((uns) R30 < [Evp]) goto 5501;
//  jmp if EGRFLG                                                                     //
8 54f5: 3f,29,0c             jb    B7,R29,5504        if (B7_[Flags_29]) goto 5504;
//  97CE - DCOFF                                                                      //
8 54f8: a3,fa,26,d2          ldw   Rd2,[Rfa+26]       [Egrdc] = [EGRDCOFF];
8 54fc: 91,80,29             orrb  R29,80             [Flags_29] |= 80;    
8 54ff: 20,03                sjmp  5504               goto 5504;           

8 5501: 71,7f,29             an2b  R29,7f             [Flags_29] &= 7f;    
8 5504: a3,74,90,34          ldw   R34,[R74+90]       R34 = [Delopt];      
8 5508: 08,01,34             shrw  R34,1              R34 = R34 / 2;       
8 550b: a3,72,f0,32          ldw   R32,[R72+f0]       R32 = [Evp];         
8 550f: 08,01,32             shrw  R32,1              R32 = R32 / 2;       
8 5512: 68,32,34             sb2w  R34,R32            R34 -= R32;          
8 5515: c3,72,f2,34          stw   [R72+f2],R34       [Egrerr] = R34;      
//  Table 9942                                                                        //
8 5519: 45,9a,01,fa,32       ad3w  R32,Rfa,19a        R32 = Fc036;         
8 551e: ef,e5,e0             call  3606               SSWordLU();          
//  EGRDC                                                                             //
8 5521: 64,d2,38             ad2w  R38,Rd2            R38 += [Egrdc];      
8 5524: dd,08                jv    552e               if (OV) goto 552e;   
8 5526: da,0c                jle   5534               if ((sig) R38 <= 0) goto 5534;
8 5528: 89,33,73,38          cmpw  R38,7333                                
8 552c: d1,04                jleu  5532               if ((uns) R38 <= 7333) goto 5532;
8 552e: a1,33,73,38          ldw   R38,7333           R38 = 7333;          
8 5532: 20,05                sjmp  5539               goto 5539;           

8 5534: 01,38                clrw  R38                R38 = 0;             
//  clr EGRFLG                                                                        //
8 5536: 71,7f,29             an2b  R29,7f             [Flags_29] &= 7f;    
8 5539: a0,38,d2             ldw   Rd2,R38            [Egrdc] = R38;       
8 553c: e7,48,00             jump  5587               goto Update_EGR2;    

8 553f: 9b,72,fe,00          cmpb  0,[R72+fe]                              
8 5543: df,3a                je    557f               if (0 == [Desem]) goto 557f;
8 5545: 3f,29,07             jb    B7,R29,554f        if (B7_[Flags_29]) goto 554f;
8 5548: a3,fa,26,d2          ldw   Rd2,[Rfa+26]       [Egrdc] = [EGRDCOFF];
8 554c: 91,80,29             orrb  R29,80             [Flags_29] |= 80;    
8 554f: a3,72,fc,30          ldw   R30,[R72+fc]       R30 = [Conpr];       
8 5553: 08,01,30             shrw  R30,1              R30 = R30 / 2;       
8 5556: a3,72,84,34          ldw   R34,[R72+84]       R34 = [EPT_Filt];    
8 555a: 08,01,34             shrw  R34,1              R34 = R34 / 2;       
8 555d: 68,30,34             sb2w  R34,R30            R34 -= R30;          
8 5560: c3,72,fa,34          stw   [R72+fa],R34       [Preser] = R34;      
8 5564: 45,9a,01,fa,32       ad3w  R32,Rfa,19a        R32 = Fc036;         
8 5569: ef,9a,e0             call  3606               SSWordLU();          
8 556c: 64,d2,38             ad2w  R38,Rd2            R38 += [Egrdc];      
8 556f: dd,08                jv    5579               if (OV) goto 5579;   
8 5571: da,0f                jle   5582               if ((sig) R38 <= 0) goto 5582;
8 5573: 89,33,73,38          cmpw  R38,7333                                
8 5577: d1,0b                jleu  5584               if ((uns) R38 <= 7333) goto 5584;
8 5579: a1,33,73,38          ldw   R38,7333           R38 = 7333;          
8 557d: 20,05                sjmp  5584               goto 5584;           

8 557f: 71,7f,29             an2b  R29,7f             [Flags_29] &= 7f;    
8 5582: 01,38                clrw  R38                R38 = 0;             
8 5584: c0,d2,38             stw   Rd2,R38            [Egrdc] = R38;       

Update_EGR2:
8 5587: 98,00,d3             cmpb  Rd3,0                                   
8 558a: d7,0f                jne   559b               if (Rd3 != 0) goto 559b;
8 558c: c7,74,a3,00          stb   [R74+a3],0         [Egrcnt] = 0;        
8 5590: c7,74,a4,00          stb   [R74+a4],0         [Egrper] = 0;        
8 5594: f0                   ret                      return;              
        Inc   8 5594: ostruct   OSt8_010_5594 - Other Structure 8 010


OSt8_010 - Other Structure 8 010:
8 5595: 0a      ostruct    a
8 5596: 17      ostruct   17
8 5597: 2c      ostruct   2c
8 5598: 40      ostruct   40
8 5599: 58      ostruct   58
8 559a: 6e      ostruct   6e
8 559b: ad      ostruct   ad

8 559e: 9b,31,94,55,d3       cmpb  Rd3,[R30+5594]                          
8 55a3: d9,03                jgtu  55a8               if ((uns) Rd3 > [R30+OSt8_010_5594]) goto 55a8;
8 55a5: e0,30,f6             djnz  R30,559e           R30--; if (R30 !=  0) goto 559e;
8 55a8: 09,0b,30             shlw  R30,b              R30 = R30 * 800;     
8 55ab: c7,74,a3,31          stb   [R74+a3],R31       [Egrcnt] = R31;      
8 55af: 11,30                clrb  R30                R30 = 0;             
8 55b1: 9c,d3,30             divb  R30,Rd3            R30 = R30W / Rd3;    
8 55b4: dd,05                jv    55bb               if (OV) goto 55bb;   
8 55b6: 99,c0,30             cmpb  R30,c0                                  
8 55b9: d1,03                jleu  55be               if ((uns) R30 <= c0) goto 55be;
8 55bb: b1,c0,30             ldb   R30,c0             R30 = c0;            
8 55be: c7,74,a4,30          stb   [R74+a4],R30       [Egrper] = R30;      
8 55c2: f0                   ret                      return;              

Update_advance:
8 55c3: 3f,a1,03             jb    B7,Ra1,55c9        if (B7_[a1_Flags]) goto 55c9;
8 55c6: 32,a1,05             jnb   B2,Ra1,55ce        if (!B2_[a1_Flags]) goto 55ce;
8 55c9: b1,28,c2             ldb   Rc2,28             [Saf] = 28;          
8 55cc: 22,43                sjmp  5811               goto 5811;           

8 55ce: 3a,28,02             jb    B2,R28,55d3        if (B2_[Flags_28]) goto 55d3;
8 55d1: 22,3e                sjmp  5811               goto 5811;           

55d3 - Sub 8 55d3:
8 55d3: 45,de,00,f0,32       ad3w  R32,Rf0,de         R32 = Rpmscale;      
8 55d8: a0,ae,34             ldw   R34,Rae            R34 = [Rpmx4];       
8 55db: ef,2e,e0             call  360c               UUWordLu();          
8 55de: a0,38,a6             ldw   Ra6,R38            [Nrmces] = R38;      
//  Table 8CFA load scaling                                                           //
8 55e1: 45,fa,00,f0,32       ad3w  R32,Rf0,fa         R32 = Ldscale;       
//  engine load (VE? )                                                                //
8 55e6: a3,74,de,34          ldw   R34,[R74+de]       R34 = [Load];        
8 55ea: ef,1f,e0             call  360c               UUWordLu();          
8 55ed: a0,38,a8             ldw   Ra8,R38            [Nrmrld] = R38;      
8 55f0: 01,18                clrw  R18                R18 = 0;             
//  2BD - vehicle speed filtered(1) (MPH) 2BC is 8.8 format                           //
8 55f2: b3,74,3f,34          ldb   R34,[R74+3f]       R34 = [Mph_FiltH];   
8 55f6: 7f,f8,18,34          ml2b  R34,[Rf8+18]       R34 *= [Sc0079];     
8 55fa: a0,ae,36             ldw   R36,Rae            R36 = [Rpmx4];       
8 55fd: 08,03,36             shrw  R36,3              R36 = R36 / 8;       
8 5600: 88,36,34             cmpw  R34,R36                                 
8 5603: db,14                jc    5619               if ((uns) R34 >= R36) goto 5619;
8 5605: a0,a6,30             ldw   R30,Ra6            R30 = [Nrmces];      
8 5608: a0,a8,32             ldw   R32,Ra8            R32 = [Nrmrld];      
8 560b: ad,0a,34             ldzbw R34,a              R34 = (uns)a;        
//  Table 96C0 - Torque Reduction Table (auto trans protection)                       //
8 560e: 45,90,02,f8,38       ad3w  R38,Rf8,290        R38 = Tb004;         
8 5613: ef,d4,e0             call  36ea               UTabLookUp();        
8 5616: ac,3b,18             ldzbw R18,R3b            R18 = (uns)R3b;      
8 5619: 3f,d0,02             jb    B7,Rd0,561e        if (B7_[Apt]) goto 561e;
8 561c: 20,83                sjmp  56a1               goto 56a1;           

561e - Sub 8 561e:
8 561e: 45,90,00,f8,32       ad3w  R32,Rf8,90         R32 = Fc017;         
8 5623: b0,b0,34             ldb   R34,Rb0            R34 = [ECT];         
8 5626: ef,88,df             call  35b1               SSByteLU();          
8 5629: bc,38,42             ldsbw R42,R38            R42 = (sig)R38;      
//  Table 94AC - Closed Throttle Base spark advance (RPM->adv)                        //
8 562c: 45,7c,00,f8,32       ad3w  R32,Rf8,7c         R32 = Fc016;         
8 5631: a0,ae,34             ldw   R34,Rae            R34 = [Rpmx4];       
8 5634: ef,cf,df             call  3606               SSWordLU();          
8 5637: 64,38,42             ad2w  R42,R38            R42 += R38;          
//  9032 spark adder closed throttle                                                  //
8 563a: 67,f8,02,42          ad2w  R42,[Rf8+2]        R42 += [Cl_th_spkadd];
8 563e: a3,f8,06,38          ldw   R38,[Rf8+6]        R38 = [Sc0074];      
8 5642: 88,38,ae             cmpw  Rae,R38                                 
8 5645: d1,03                jleu  564a               if ((uns) [Rpmx4] <= R38) goto 564a;
8 5647: 91,10,ed             orrb  Red,10             [Flags_ed] |= 10;    
8 564a: 6b,f8,08,38          sb2w  R38,[Rf8+8]        R38 -= [Sc0075];     
8 564e: 88,38,ae             cmpw  Rae,R38                                 
8 5651: db,03                jc    5656               if ((uns) [Rpmx4] >= R38) goto 5656;
8 5653: 71,ef,ed             an2b  Red,ef             [Flags_ed] &= ef;    
8 5656: 34,ed,23             jnb   B4,Red,567c        if (!B4_[Flags_ed]) goto 567c;
//  Table 9568 Time since startup kicker time delay, sec. Input is TCSTRT, max repetition 6.  //
8 5659: 45,38,01,f8,32       ad3w  R32,Rf8,138        R32 = Fc022;         
8 565e: b0,ad,34             ldb   R34,Rad            R34 = [Tcstrt];      
8 5661: ef,48,df             call  35ac               subyteLU();          
8 5664: 98,38,c8             cmpb  Rc8,R38                                 
8 5667: db,13                jc    567c               if ((uns) [Atmr1] >= R38) goto 567c;
//  Table 94CE (BP is input)                                                          //
8 5669: 45,9e,00,f8,32       ad3w  R32,Rf8,9e         R32 = Fc018;         
//  BP - barometric pressure                                                          //
8 566e: b3,74,80,34          ldb   R34,[R74+80]       R34 = RBp;           
8 5672: ef,3f,df             call  35b4               USByteLU();          
8 5675: 16,38                sexb  R38                R38W = (int)R38;     
8 5677: 68,38,42             sb2w  R42,R38            R42 -= R38;          
8 567a: 20,16                sjmp  5692               goto 5692;           

8 567c: 32,26,13             jnb   B2,R26,5692        if (!B2_[Flags_26]) goto 5692;
8 567f: 67,f8,12,42          ad2w  R42,[Rf8+12]       R42 += [Sc0078];     
8 5683: b3,72,c4,34          ldb   R34,[R72+c4]       R34 = [Ctntmr];      
//  Table 954E Idle Spark subtractor, deg.                                            //
8 5687: 45,1e,01,f8,32       ad3w  R32,Rf8,11e        R32 = Fc020;         
8 568c: ef,28,df             call  35b7               UUbyteLu();          
8 568f: 68,38,42             sb2w  R42,R38            R42 -= R38;          
8 5692: 48,18,42,3c          sb3w  R3c,R42,R18        R3c = R42 - R18;     
8 5696: af,72,d6,38          ldzbw R38,[R72+d6]       R38 = (uns)[Spkmul]; 
8 569a: 29,ae                scall 584a               Scale_R3c();         
8 569c: a0,3c,42             ldw   R42,R3c            R42 = R3c;           
8 569f: 21,6a                sjmp  580b               goto 580b;           

56a1 - Sub 8 56a1:
8 56a1: 30,d0,48             jnb   B0,Rd0,56ec        if (!B0_[Apt]) goto 56ec;
//  Table 9504 - WOT spark advance vs RPM                                             //
8 56a4: 45,d4,00,f8,32       ad3w  R32,Rf8,d4         R32 = Wotadvrpm;     
8 56a9: a0,ae,34             ldw   R34,Rae            R34 = [Rpmx4];       
8 56ac: ef,5d,df             call  360c               UUWordLu();          
8 56af: a0,38,42             ldw   R42,R38            R42 = R38;           
//  Table 9528 - Spark Advance vs. BP                                                 //
8 56b2: 45,f8,00,f8,32       ad3w  R32,Rf8,f8         R32 = Wotadvbap;     
//  BP - barometric pressure                                                          //
8 56b7: b3,74,80,34          ldb   R34,[R74+80]       R34 = RBp;           
8 56bb: ef,f6,de             call  35b4               USByteLU();          
8 56be: 16,38                sexb  R38                R38W = (int)R38;     
8 56c0: 64,38,42             ad2w  R42,R38            R42 += R38;          
//  Table 9532 - WOT Spark Advance vs ECT                                             //
8 56c3: 45,02,01,f8,32       ad3w  R32,Rf8,102        R32 = Wotadvect;     
//  INPUT: Engine Coolant Temp                                                        //
8 56c8: b0,b0,34             ldb   R34,Rb0            R34 = [ECT];         
8 56cb: ef,e3,de             call  35b1               SSByteLU();          
//  OUTPUT: ECT advance increment                                                     //
8 56ce: 16,38                sexb  R38                R38W = (int)R38;     
8 56d0: 64,38,42             ad2w  R42,R38            R42 += R38;          
//  Table 9540 - WOT Spark Advance vs ACT                                             //
8 56d3: 45,10,01,f8,32       ad3w  R32,Rf8,110        R32 = Wotadvact;     
//  RB1 = ACT (ACT = RB1 * 4)                                                         //
8 56d8: b0,b1,34             ldb   R34,Rb1            R34 = [ACT];         
8 56db: ef,d3,de             call  35b1               SSByteLU();          
8 56de: 16,38                sexb  R38                R38W = (int)R38;     
8 56e0: 64,38,42             ad2w  R42,R38            R42 += R38;          
//  943A spark adder WOT                                                              //
8 56e3: 67,f8,0a,42          ad2w  R42,[Rf8+a]        R42 += [Wotspkad];   
8 56e7: 68,18,42             sb2w  R42,R18            R42 -= R18;          
//  done                                                                              //
8 56ea: 21,0d                sjmp  57f9               goto 57f9;           

8 56ec: a0,a6,30             ldw   R30,Ra6            R30 = [Nrmces];      
8 56ef: a0,a8,32             ldw   R32,Ra8            R32 = [Nrmrld];      
8 56f2: ad,0a,34             ldzbw R34,a              R34 = (uns)a;        
//  Table 95C4 - Altitude Base spark (RPM vs LOAD)                                    //
8 56f5: 45,94,01,f8,38       ad3w  R38,Rf8,194        R38 = Sealspk;       
8 56fa: ef,ed,df             call  36ea               UTabLookUp();        
8 56fd: ac,3b,3c             ldzbw R3c,R3b            R3c = (uns)R3b;      
8 5700: af,74,83,38          ldzbw R38,[R74+83]       R38 = (uns)[Mult_bp212A];
8 5704: 29,44                scall 584a               Scale_R3c();         
8 5706: a0,3c,42             ldw   R42,R3c            R42 = R3c;           
8 5709: a0,a6,30             ldw   R30,Ra6            R30 = [Nrmces];      
8 570c: a0,a8,32             ldw   R32,Ra8            R32 = [Nrmrld];      
8 570f: ad,0a,34             ldzbw R34,a              R34 = (uns)a;        
//  Table 9614 - limp mode spark timing Table (Deg BTDC)(RPM vs LOAD)                 //
8 5712: 45,e4,01,f8,38       ad3w  R38,Rf8,1e4        R38 = Atlospk;       
8 5717: ef,d0,df             call  36ea               UTabLookUp();        
8 571a: ac,3b,3c             ldzbw R3c,R3b            R3c = (uns)R3b;      
//  Table 94F8 LOMALT Table multiplier as a function of Barometric Pressure, BP.(0 at sea level 1.0 at 'high' altitude  //
8 571d: 45,c8,00,f8,32       ad3w  R32,Rf8,c8         R32 = Fc019;         
//  BP - barometric pressure                                                          //
8 5722: b3,74,80,34          ldb   R34,[R74+80]       R34 = RBp;           
8 5726: ef,8e,de             call  35b7               UUbyteLu();          
8 5729: 11,39                clrb  R39                R39 = 0;             
8 572b: 29,1d                scall 584a               Scale_R3c();         
8 572d: 64,3c,42             ad2w  R42,R3c            R42 += R3c;          
8 5730: a0,a6,30             ldw   R30,Ra6            R30 = [Nrmces];      
8 5733: a0,a8,32             ldw   R32,Ra8            R32 = [Nrmrld];      
8 5736: ad,0a,34             ldzbw R34,a              R34 = (uns)a;        
//  Table 9574 - base spark timing Table (Deg BTDC)(RPM vs LOAD)                      //
8 5739: 45,44,01,f8,38       ad3w  R38,Rf8,144        R38 = Basespk;       
8 573e: ef,a9,df             call  36ea               UTabLookUp();        
8 5741: ac,3b,34             ldzbw R34,R3b            R34 = (uns)R3b;      
8 5744: 48,34,42,3c          sb3w  R3c,R42,R34        R3c = R42 - R34;     
8 5748: 01,3a                clrw  R3a                R3a = 0;             
8 574a: b3,72,c5,39          ldb   R39,[R72+c5]       R39 = [Lugtmr];      
8 574e: 11,38                clrb  R38                R38 = 0;             
8 5750: af,f8,0f,36          ldzbw R36,[Rf8+f]        R36 = (uns)[LUGTIM]; 
8 5754: 8c,36,38             divw  R38,R36            R38 = R38L / R36;    
8 5757: 08,01,38             shrw  R38,1              R38 = R38 / 2;       
8 575a: 28,ee                scall 584a               Scale_R3c();         
8 575c: 44,34,3c,42          ad3w  R42,R3c,R34        R42 = R3c + R34;     
8 5760: a0,a6,30             ldw   R30,Ra6            R30 = [Nrmces];      
8 5763: a0,a8,32             ldw   R32,Ra8            R32 = [Nrmrld];      
8 5766: ad,0a,34             ldzbw R34,a              R34 = (uns)a;        
//  X -input = Normalized engine speed on RPM - FN070, Y -input = Normalized LOAD - FN071, Output = Spark advance adder for EGR, deg per 1 percent EGR.  //
8 5769: 45,34,02,f8,38       ad3w  R38,Rf8,234        R38 = Tb002;         
8 576e: ef,79,df             call  36ea               UTabLookUp();        
8 5771: ac,3b,38             ldzbw R38,R3b            R38 = (uns)R3b;      
8 5774: 7f,72,ee,38          ml2b  R38,[R72+ee]       R38 *= [Egract];     
8 5778: 08,06,38             shrw  R38,6              R38 = R38 / 40;      
8 577b: 64,38,42             ad2w  R42,R38            R42 += R38;          
//  generates Table entry point. Input = N and Output = Normalized N.                 //
8 577e: 45,46,01,f0,32       ad3w  R32,Rf0,146        R32 = Fn083;         
8 5783: a0,ae,34             ldw   R34,Rae            R34 = [Rpmx4];       
8 5786: ef,83,de             call  360c               UUWordLu();          
8 5789: a0,38,30             ldw   R30,R38            R30 = R38;           
//  generates Table entry point. Input = LOAD and Output = Normalized Load.           //
8 578c: 45,32,01,f0,32       ad3w  R32,Rf0,132        R32 = Fn082;         
//  engine load (VE? )                                                                //
8 5791: a3,74,de,34          ldw   R34,[R74+de]       R34 = [Load];        
8 5795: ef,74,de             call  360c               UUWordLu();          
8 5798: a0,38,32             ldw   R32,R38            R32 = R38;           
8 579b: ad,04,34             ldzbw R34,4              R34 = (uns)4;        
//  Table 96B4 - Spark adv from engine speed N and LOAD.                              //
8 579e: 45,84,02,f8,38       ad3w  R38,Rf8,284        R38 = Tb003;         
8 57a3: ef,44,df             call  36ea               UTabLookUp();        
8 57a6: bc,3b,3c             ldsbw R3c,R3b            R3c = (sig)R3b;      
8 57a9: af,74,82,38          ldzbw R38,[R74+82]       R38 = (uns)[Mult_bp311];
8 57ad: 28,9b                scall 584a               Scale_R3c();         
8 57af: af,74,f4,38          ldzbw R38,[R74+f4]       R38 = (uns)[Mfamul]; 
8 57b3: 28,95                scall 584a               Scale_R3c();         
8 57b5: 64,3c,42             ad2w  R42,R3c            R42 += R3c;          
//  Table 9488 ECT normalizing function.                                              //
8 57b8: 45,58,00,f8,32       ad3w  R32,Rf8,58         R32 = Fc015;         
8 57bd: bc,b0,34             ldsbw R34,Rb0            R34 = (sig)[ECT];    
8 57c0: ef,3e,de             call  3601               SUWordLU();          
8 57c3: a0,38,30             ldw   R30,R38            R30 = R38;           
8 57c6: a0,a8,32             ldw   R32,Ra8            R32 = [Nrmrld];      
8 57c9: ad,07,34             ldzbw R34,7              R34 = (uns)7;        
//  Table 9710 (ECT,LOAD) = Part throttle spark modifier Table. X -input = Normalized ECT (FN033) Y -input = Normalized LOAD (FN071).  //
8 57cc: 45,e0,02,f8,38       ad3w  R38,Rf8,2e0        R38 = Tb005;         
8 57d1: ef,13,df             call  36e7               STabLookup();        
8 57d4: bc,3b,3a             ldsbw R3a,R3b            R3a = (sig)R3b;      
8 57d7: 64,3a,42             ad2w  R42,R3a            R42 += R3a;          
//  Spark advance                                                                     //
8 57da: 45,be,00,f8,32       ad3w  R32,Rf8,be         R32 = Ptadvact;      
//  RB1 = ACT (ACT = RB1 * 4)                                                         //
8 57df: b0,b1,34             ldb   R34,Rb1            R34 = [ACT];         
8 57e2: ef,cc,dd             call  35b1               SSByteLU();          
8 57e5: 16,38                sexb  R38                R38W = (int)R38;     
8 57e7: 44,38,42,3c          ad3w  R3c,R42,R38        R3c = R42 + R38;     
8 57eb: 68,18,3c             sb2w  R3c,R18            R3c -= R18;          
8 57ee: af,f8,0e,38          ldzbw R38,[Rf8+e]        R38 = (uns)[Sc0076]; 
8 57f2: 28,56                scall 584a               Scale_R3c();         
//  9434 spark adder for part throttle                                                //
8 57f4: 47,f8,04,3c,42       ad3w  R42,R3c,[Rf8+4]    R42 = R3c + [Ptspkad];

57f9 - Sub 8 57f9:
8 57f9: 32,e7,0f             jnb   B2,Re7,580b        if (!B2_[Flag_e7]) goto 580b;
//  Table 980D High Speed Spark retard, mph.                                          //
8 57fc: 45,65,00,fa,32       ad3w  R32,Rfa,65         R32 = HSS_retard;    
//  2BD - vehicle speed filtered(1) (MPH) 2BC is 8.8 format                           //
8 5801: b3,74,3f,34          ldb   R34,[R74+3f]       R34 = [Mph_FiltH];   
8 5805: ef,af,dd             call  35b7               UUbyteLu();          
//  retard spark                                                                      //
8 5808: 68,38,42             sb2w  R42,R38            R42 -= R38;          
8 580b: a0,42,c2             ldw   Rc2,R42            [Saf] = R42;         
8 580e: 71,fb,28             an2b  R28,fb             [Flags_28] &= fb;    
8 5811: 91,80,ed             orrb  Red,80             [Flags_ed] |= 80;    
8 5814: 71,bf,ed             an2b  Red,bf             [Flags_ed] &= bf;    
8 5817: b3,72,c5,38          ldb   R38,[R72+c5]       R38 = [Lugtmr];      
8 581b: 9b,f8,0f,38          cmpb  R38,[Rf8+f]                             
8 581f: d3,03                jnc   5824               if ((uns) R38 < [LUGTIM]) goto 5824;
8 5821: 71,7f,ed             an2b  Red,7f             [Flags_ed] &= 7f;    
8 5824: 38,24,22             jb    B0,R24,5849        if (B0_[Flags_24]) goto 5849;
//  Table 94DA LOM Load function to activate LOM spark strategy. Input: RPM and Output: load.  //
8 5827: 45,aa,00,f8,32       ad3w  R32,Rf8,aa         R32 = LOM_spark;     
8 582c: a0,ae,34             ldw   R34,Rae            R34 = [Rpmx4];       
8 582f: ef,da,dd             call  360c               UUWordLu();          
8 5832: 8b,74,de,38          cmpw  R38,[R74+de]                            
8 5836: d3,11                jnc   5849               if ((uns) R38 < [Load]) goto 5849;
8 5838: b3,f8,10,38          ldb   R38,[Rf8+10]       R38 = [Sc0077];      
8 583c: 30,38,04             jnb   B0,R38,5843        if (!B0_R38) goto 5843;
8 583f: c7,72,c5,00          stb   [R72+c5],0         [Lugtmr] = 0;        
8 5843: 71,7f,ed             an2b  Red,7f             [Flags_ed] &= 7f;    
8 5846: 91,40,ed             orrb  Red,40             [Flags_ed] |= 40;    
8 5849: f0                   ret                      return;              

Scale_R3c:
8 584a: fe,6c,38,3c          sml2w  R3c,R38           R3c *= (sig)R38;     
8 584e: 0e,07,3c             asrdw R3c,7              R3cL = R3cL / 80;    
8 5851: f0                   ret                      return;              

Update_dwell:
8 5852: 9b,f8,1a,00          cmpb  0,[Rf8+1a]                              
8 5856: df,57                je    58af               if (0 == [Tfi_dwell]) goto 58af;
//  Weighting factor for ECT and ACT on Base Dwell                                    //
8 5858: b3,f8,2a,36          ldb   R36,[Rf8+2a]       R36 = [DWLWF];       
8 585c: ef,89,ee             call  46e8               Sub0262();           
8 585f: 0a,07,34             asrw  R34,7              R34 = R34 / 80;      
//  Min low speed dwell                                                               //
8 5862: 45,18,03,f8,32       ad3w  R32,Rf8,318        R32 = Min_Low_dwell; 
8 5867: 9b,f8,2b,34          cmpb  R34,[Rf8+2b]                            
8 586b: da,05                jle   5872               if ((sig) R34 <= [Sc0082]) goto 5872;
//  Min high speed dwell                                                              //
8 586d: 45,30,03,f8,32       ad3w  R32,Rf8,330        R32 = Min_Hi_dwell;  

5872 - Sub 8 5872:
8 5872: af,74,93,34          ldzbw R34,[R74+93]       R34 = (uns)[Vbat];   
8 5876: ef,93,dd             call  360c               UUWordLu();          
//  Base amount of DWELL                                                              //
8 5879: c3,74,c0,38          stw   [R74+c0],R38       [Dwlbse] = R38;      
//  convert to IOtime ticks ?                                                         //
8 587d: 6d,73,cb,38          ml2w  R38,cb73           R38 *= cb73;         
8 5881: c3,74,bc,3a          stw   [R74+bc],R3a       [Dwlbst] = R3a;      
8 5885: a3,74,be,38          ldw   R38,[R74+be]       R38 = [Dwell];       
8 5889: 6d,49,9d,38          ml2w  R38,9d49           R38 *= 9d49;         
8 588d: c3,74,c2,3a          stw   [R74+c2],R3a       [Dwellms] = R3a;     
8 5891: af,fe,07,32          ldzbw R32,[Rfe+7]        R32 = (uns)[PIPsC];  
8 5895: 01,3a                clrw  R3a                R3a = 0;             
8 5897: a3,f8,1c,38          ldw   R38,[Rf8+1c]       R38 = [Sc0080];      
8 589b: 8c,32,38             divw  R38,R32            R38 = R38L / R32;    
8 589e: c3,74,c6,38          stw   [R74+c6],R38       [Ppereng] = R38;     
8 58a2: 01,3a                clrw  R3a                R3a = 0;             
8 58a4: a3,f8,1e,38          ldw   R38,[Rf8+1e]       R38 = [Sc0081];      
8 58a8: 8c,32,38             divw  R38,R32            R38 = R38L / R32;    
8 58ab: c3,74,c8,38          stw   [R74+c8],R38       [Poffeng] = R38;     
8 58af: f0                   ret                      return;              

Update_Idle:
8 58b0: 34,2b,01             jnb   B4,R2b,58b4        if (!B4_[Flags_2B]) goto 58b4;
8 58b3: f0                   ret                      return;              

8 58b4: b3,f2,48,42          ldb   R42,[Rf2+48]       R42 = [Dasmph];      
//  Dashpot hysteresis                                                                //
8 58b8: 57,f2,49,42,40       ad3b  R40,R42,[Rf2+49]   R40 = R42 + [Dasmhyst];
8 58bd: d3,03                jnc   58c2               if (R40 <= ff) goto 58c2;
//  clamp value to max of FF                                                          //
8 58bf: b1,ff,40             ldb   R40,ff             R40 = ff;            
8 58c2: 9b,74,3f,40          cmpb  R40,[R74+3f]                            
8 58c6: d1,0b                jleu  58d3               if ((uns) R40 <= [Mph_FiltH]) goto 58d3;
8 58c8: 9b,74,3f,42          cmpb  R42,[R74+3f]                            
8 58cc: d3,08                jnc   58d6               if ((uns) R42 < [Mph_FiltH]) goto 58d6;
8 58ce: 71,f7,e7             an2b  Re7,f7             [Flag_e7] &= f7;     
8 58d1: 20,03                sjmp  58d6               goto 58d6;           

8 58d3: 91,08,e7             orrb  Re7,8              [Flag_e7] |= 8;      
8 58d6: 37,a1,2f             jnb   B7,Ra1,5908        if (!B7_[a1_Flags]) goto 5908;
8 58d9: a3,72,a6,3a          ldw   R3a,[R72+a6]       R3a = [TPS_Min__#_was__TPS_Ratch];
8 58dd: c3,72,da,3a          stw   [R72+da],R3a       [Dstpbr] = R3a;      
8 58e1: 01,14                clrw  R14                R14 = 0;             
//  time since last PIP recieved                                                      //
8 58e3: a3,72,be,3a          ldw   R3a,[R72+be]       R3a = [Tslpip];      
//  8 seconds                                                                         //
8 58e7: 89,00,08,3a          cmpw  R3a,800                                 
8 58eb: db,0e                jc    58fb               if ((uns) R3a >= 800) goto 58fb;
//  isc duty cycle during crank                                                       //
8 58ed: 45,84,03,f4,32       ad3w  R32,Rf4,384        R32 = Crankisc;      
8 58f2: b0,ad,34             ldb   R34,Rad            R34 = [Tcstrt];      
8 58f5: ef,b4,dc             call  35ac               subyteLU();          
8 58f8: b0,38,15             ldb   R15,R38            R15 = R38;           
8 58fb: c0,b8,14             stw   Rb8,R14            [Iscdty] = R14;      
8 58fe: a3,fe,26,3a          ldw   R3a,[Rfe+26]       R3a = [IFAM];        
8 5902: c3,72,de,3a          stw   [R72+de],R3a       [Fam] = R3a;         
8 5906: 20,12                sjmp  591a               goto 591a;           

8 5908: 33,c5,17             jnb   B3,Rc5,5922        if (!B3_[Fmem_flags]) goto 5922;
8 590b: 34,c5,14             jnb   B4,Rc5,5922        if (!B4_[Fmem_flags]) goto 5922;
//  ISCDTY - ROM 9AFA FCAMSW                                                          //
8 590e: a3,f6,7c,b8          ldw   Rb8,[Rf6+7c]       [Iscdty] = [Sc0066]; 
8 5912: b3,f6,7e,42          ldb   R42,[Rf6+7e]       R42 = [Sc0067];      
8 5916: c7,72,e6,42          stb   [R72+e6],R42       [Dsdrpm] = R42;      
8 591a: b1,7f,3a             ldb   R3a,7f             R3a = 7f;            
8 591d: c7,72,d6,3a          stb   [R72+d6],R3a       [Spkmul] = R3a;      
8 5921: f0                   ret                      return;              

8 5922: a3,fa,3e,1c          ldw   R1c,[Rfa+3e]       R1c = [Sc0106];      
//  jump if normal strategy - not self test mode                                      //
8 5926: 35,2a,16             jnb   B5,R2a,593f        if (!B5_[VIP_flags]) goto 593f;
8 5929: a3,72,6e,40          ldw   R40,[R72+6e]       R40 = [Rviprpm];     
//  Idle Speed in neutral = 672rpm                                                    //
8 592d: 6b,f4,74,40          sb2w  R40,[Rf4+74]       R40 -= [Nubase];     
8 5931: 8b,f3,90,00,00       cmpw  0,[Rf2+90]                              
8 5936: df,77                je    59af               if (0 == [Vtcdsn]) goto 59af;
8 5938: a3,f3,90,00,1c       ldw   R1c,[Rf2+90]       R1c = [Vtcdsn];      
8 593d: 20,70                sjmp  59af               goto 59af;           

593f - Sub 8 593f:
8 593f: 45,c4,01,f0,32       ad3w  R32,Rf0,1c4        R32 = Fn825A;        
8 5944: b0,b0,34             ldb   R34,Rb0            R34 = [ECT];         
8 5947: ef,62,dc             call  35ac               subyteLU();          
8 594a: a0,38,40             ldw   R40,R38            R40 = R38;           
//  Table 90D4                                                                        //
8 594d: 45,d4,01,f0,32       ad3w  R32,Rf0,1d4        R32 = Fn825B;        
//  RB1 = ACT (ACT = RB1 * 4)                                                         //
8 5952: b0,b1,34             ldb   R34,Rb1            R34 = [ACT];         
8 5955: ef,54,dc             call  35ac               subyteLU();          
8 5958: 64,38,40             ad2w  R40,R38            R40 += R38;          
8 595b: 32,e8,0f             jnb   B2,Re8,596d        if (!B2_[Flags_e8]) goto 596d;
8 595e: b3,72,c4,34          ldb   R34,[R72+c4]       R34 = [Ctntmr];      
//  Table 955A                                                                        //
8 5962: 45,2a,01,f8,32       ad3w  R32,Rf8,12a        R32 = Fc021;         
8 5967: ef,4d,dc             call  35b7               UUbyteLu();          
8 596a: 64,38,40             ad2w  R40,R38            R40 += R38;          
8 596d: 9b,f5,91,00,c8       cmpb  Rc8,[Rf4+91]                            
8 5972: db,06                jc    597a               if ((uns) [Atmr1] >= [Bzztm]) goto 597a;
8 5974: 67,f4,78,40          ad2w  R40,[Rf4+78]       R40 += [Bzzrpm];     
8 5978: 20,03                sjmp  597d               goto 597d;           

8 597a: 3c,2f,15             jb    B4,R2f,5992        if (B4_[Flags_2F]) goto 5992;
8 597d: 9b,f5,90,00,c8       cmpb  Rc8,[Rf4+90]                            
8 5982: db,0e                jc    5992               if ((uns) [Atmr1] >= [Tkdtm]) goto 5992;
//  Table 92C0                                                                        //
8 5984: 45,ea,02,f4,32       ad3w  R32,Rf4,2ea        R32 = Fc010;         
8 5989: b0,ad,34             ldb   R34,Rad            R34 = [Tcstrt];      
8 598c: ef,1d,dc             call  35ac               subyteLU();          
8 598f: 64,38,40             ad2w  R40,R38            R40 += R38;          

5992 - Sub 8 5992:
8 5992: 31,e6,1a             jnb   B1,Re6,59af        if (!B1_[Flags_e6]) goto 59af;
8 5995: 30,e6,17             jnb   B0,Re6,59af        if (!B0_[Flags_e6]) goto 59af;
8 5998: 3e,26,14             jb    B6,R26,59af        if (B6_[Flags_26]) goto 59af;
8 599b: a3,f0,04,30          ldw   R30,[Rf0+4]        R30 = [Sc0003];      
//  Idle Speed in neutral = 672rpm                                                    //
8 599f: 6b,f4,74,30          sb2w  R30,[Rf4+74]       R30 -= [Nubase];     
8 59a3: db,02                jc    59a7               if (R30 >= 0) goto 59a7;
8 59a5: 01,30                clrw  R30                R30 = 0;             
8 59a7: 88,30,40             cmpw  R40,R30                                 
8 59aa: db,03                jc    59af               if ((uns) R40 >= R30) goto 59af;
8 59ac: a0,30,40             ldw   R40,R30            R40 = R30;           
8 59af: 08,01,40             shrw  R40,1              R40 = R40 / 2;       
8 59b2: 98,00,41             cmpb  R41,0                                   
8 59b5: df,03                je    59ba               if (R41 == 0) goto 59ba;
8 59b7: ad,ff,40             ldzbw R40,ff             R40 = (uns)ff;       
8 59ba: b0,40,35             ldb   R35,R40            R35 = R40;           
8 59bd: 11,34                clrb  R34                R34 = 0;             
8 59bf: 8b,72,e4,34          cmpw  R34,[R72+e4]                            
8 59c3: db,15                jc    59da               if ((uns) R34 >= [Desnlo]) goto 59da;
8 59c5: a3,72,e4,32          ldw   R32,[R72+e4]       R32 = [Desnlo];      
8 59c9: ef,92,dc             call  365e               Srolav1T(R1c);       
8 59cc: 1c,00                                         #args                
//  filtered DESNLO                                                                   //
8 59ce: c3,72,e4,3e          stw   [R72+e4],R3e       [Desnlo] = R3e;      
8 59d2: c0,40,3e             stw   R40,R3e            R40 = R3e;           
8 59d5: 08,07,40             shrw  R40,7              R40 = R40 / 80;      
8 59d8: 20,07                sjmp  59e1               goto 59e1;           

8 59da: c3,72,e4,34          stw   [R72+e4],R34       [Desnlo] = R34;      
8 59de: 09,01,40             shlw  R40,1              R40 = R40 * 2;       
8 59e1: 91,80,26             orrb  R26,80             [Flags_26] |= 80;    
8 59e4: 88,00,40             cmpw  R40,0                                   
8 59e7: d7,03                jne   59ec               if (R40 != 0) goto 59ec;
8 59e9: 71,7f,26             an2b  R26,7f             [Flags_26] &= 7f;    
8 59ec: b3,72,eb,14          ldb   R14,[R72+eb]       R14 = [Isflag];      
8 59f0: c7,72,ec,14          stb   [R72+ec],R14       [Islast] = R14;      
8 59f4: 01,3e                clrw  R3e                R3e = 0;             
8 59f6: a3,72,de,16          ldw   R16,[R72+de]       R16 = [Fam];         
8 59fa: 36,26,09             jnb   B6,R26,5a06        if (!B6_[Flags_26]) goto 5a06;
8 59fd: b3,fe,02,30          ldb   R30,[Rfe+2]        R30 = [TRLOAD];      
//  check if in neutral or in gear ( in ROM! = 3 )Maybe this is manual vs automatic   //
8 5a01: 99,03,30             cmpb  R30,3                                   
8 5a04: d9,09                jgtu  5a0f               if ((uns) R30 > 3) goto 5a0f;
8 5a06: 91,02,3e             orrb  R3e,2              R3e |= 2;            
//  F4 = 8FD6 so 74+8FD6 = 904A = Idle Speed in neutral (0054H = 84 and 84 * 8 = 672rpm  //
8 5a09: 67,f4,74,40          ad2w  R40,[Rf4+74]       R40 += [Nubase];     
8 5a0d: 20,04                sjmp  5a13               goto 5a13;           

8 5a0f: 67,f4,76,40          ad2w  R40,[Rf4+76]       R40 += [Neu_rpm];    
8 5a13: 3b,ea,03             jb    B3,Rea,5a19        if (B3_[Flags_ea]) goto 5a19;
8 5a16: 32,ea,03             jnb   B2,Rea,5a1c        if (!B2_[Flags_ea]) goto 5a1c;
8 5a19: 91,01,3e             orrb  R3e,1              R3e |= 1;            
8 5a1c: 38,3e,0b             jb    B0,R3e,5a2a        if (B0_R3e) goto 5a2a;
8 5a1f: a3,f5,8c,00,30       ldw   R30,[Rf4+8c]       R30 = [Dactm];       
8 5a24: 8b,74,98,30          cmpw  R30,[R74+98]                            
8 5a28: d1,04                jleu  5a2e               if ((uns) R30 <= [Acctmr]) goto 5a2e;
8 5a2a: 67,f4,7a,40          ad2w  R40,[Rf4+7a]       R40 += [Dnac];       
8 5a2e: 34,27,12             jnb   B4,R27,5a43        if (!B4_[Flags_27]) goto 5a43;
8 5a31: 57,f6,14,00,30       ad3b  R30,0,[Rf6+14]     R30 = 0 + [Pspshp];  
8 5a36: df,0b                je    5a43               if (R30 == 0) goto 5a43;
8 5a38: 67,f5,8e,00,40       ad2w  R40,[Rf4+8e]       R40 += [Dnpows];     
8 5a3d: 91,80,26             orrb  R26,80             [Flags_26] |= 80;    
8 5a40: 91,01,3f             orrb  R3f,1              R3f |= 1;            
8 5a43: 39,3e,14             jb    B1,R3e,5a5a        if (B1_R3e) goto 5a5a;
//  time since entering 'running' mode                                                //
8 5a46: b3,72,cd,30          ldb   R30,[R72+cd]       R30 = [Atmr3];       
8 5a4a: 9b,fa,1e,30          cmpb  R30,[Rfa+1e]                            
8 5a4e: d1,0a                jleu  5a5a               if ((uns) R30 <= [Sc0096]) goto 5a5a;
8 5a50: 8b,f4,7c,40          cmpw  R40,[Rf4+7c]                            
8 5a54: d1,04                jleu  5a5a               if ((uns) R40 <= [Isclpd]) goto 5a5a;
8 5a56: a3,f4,7c,40          ldw   R40,[Rf4+7c]       R40 = [Isclpd];      
8 5a5a: 31,3e,07             jnb   B1,R3e,5a64        if (!B1_R3e) goto 5a64;
8 5a5d: 45,c6,03,f4,32       ad3w  R32,Rf4,3c6        R32 = Neu_aflw;      
8 5a62: 20,05                sjmp  5a69               goto 5a69;           

8 5a64: 45,ba,03,f4,32       ad3w  R32,Rf4,3ba        R32 = Drv_aflw;      
8 5a69: a0,40,34             ldw   R34,R40            R34 = R40;           
8 5a6c: 08,01,34             shrw  R34,1              R34 = R34 / 2;       
8 5a6f: 99,00,35             cmpb  R35,0                                   
8 5a72: d1,03                jleu  5a77               if ((uns) R35 <= 0) goto 5a77;
8 5a74: b1,ff,34             ldb   R34,ff             R34 = ff;            
8 5a77: ef,3d,db             call  35b7               UUbyteLu();          
8 5a7a: a0,38,20             ldw   R20,R38            R20 = R38;           
8 5a7d: 45,76,02,f4,32       ad3w  R32,Rf4,276        R32 = ISC_ECT_SC;    
8 5a82: b0,b0,34             ldb   R34,Rb0            R34 = [ECT];         
8 5a85: ef,24,db             call  35ac               subyteLU();          
8 5a88: ac,38,30             ldzbw R30,R38            R30 = (uns)R38;      
8 5a8b: 09,04,30             shlw  R30,4              R30 = R30 * 10;      
//  Table 9AFC                                                                        //
8 5a8e: 45,7e,00,fc,32       ad3w  R32,Rfc,7e         R32 = HCAMSW;        
//   time since entering 'running' mode                                               //
8 5a93: af,72,cd,34          ldzbw R34,[R72+cd]       R34 = (uns)[Atmr3];  
8 5a97: ef,72,db             call  360c               UUWordLu();          
8 5a9a: a0,38,32             ldw   R32,R38            R32 = R38;           
8 5a9d: ad,07,34             ldzbw R34,7              R34 = (uns)7;        
//  Table 9366 - (ECT,ATMR3) = Airflow multiplier vs. ECT and ATMR3                   //
8 5aa0: 45,90,03,f4,38       ad3w  R38,Rf4,390        R38 = ECT_AM_Mult;   
8 5aa5: ef,42,dc             call  36ea               UTabLookUp();        
8 5aa8: 7c,3b,20             ml2b  R20,R3b            R20 *= R3b;          
8 5aab: 08,02,20             shrw  R20,2              R20 = R20 / 4;       
8 5aae: 30,3e,05             jnb   B0,R3e,5ab6        if (!B0_R3e) goto 5ab6;
8 5ab1: 67,f5,86,00,20       ad2w  R20,[Rf4+86]       R20 += [Acppm];      
8 5ab6: 30,3f,05             jnb   B0,R3f,5abe        if (!B0_R3f) goto 5abe;
8 5ab9: 67,f5,8a,00,20       ad2w  R20,[Rf4+8a]       R20 += [Psppm];      
8 5abe: 31,14,0a             jnb   B1,R14,5acb        if (!B1_R14) goto 5acb;
8 5ac1: 39,3e,14             jb    B1,R3e,5ad8        if (B1_R3e) goto 5ad8;
8 5ac4: 67,f5,82,00,16       ad2w  R16,[Rf4+82]       R16 += [Ndppm];      
8 5ac9: 20,0d                sjmp  5ad8               goto 5ad8;           

8 5acb: 31,3e,0a             jnb   B1,R3e,5ad8        if (!B1_R3e) goto 5ad8;
8 5ace: 6b,f5,84,00,16       sb2w  R16,[Rf4+84]       R16 -= [Dnppm];      
8 5ad3: db,03                jc    5ad8               if (R16 >= 0) goto 5ad8;
8 5ad5: a0,00,16             ldw   R16,0              R16 = 0;             
8 5ad8: 30,14,0f             jnb   B0,R14,5aea        if (!B0_R14) goto 5aea;
8 5adb: 38,3e,14             jb    B0,R3e,5af2        if (B0_R3e) goto 5af2;
8 5ade: 6b,f5,88,00,16       sb2w  R16,[Rf4+88]       R16 -= [Dacppm];     
8 5ae3: db,0d                jc    5af2               if (R16 >= 0) goto 5af2;
8 5ae5: a0,00,16             ldw   R16,0              R16 = 0;             
8 5ae8: 20,08                sjmp  5af2               goto 5af2;           

8 5aea: 30,3e,05             jnb   B0,R3e,5af2        if (!B0_R3e) goto 5af2;
8 5aed: 67,f5,86,00,16       ad2w  R16,[Rf4+86]       R16 += [Acppm];      
8 5af2: 30,3f,15             jnb   B0,R3f,5b0a        if (!B0_R3f) goto 5b0a;
8 5af5: 3a,ec,15             jb    B2,Rec,5b0d        if (B2_[Flag_ec]) goto 5b0d;
8 5af8: 67,f5,8a,00,16       ad2w  R16,[Rf4+8a]       R16 += [Psppm];      
8 5afd: 91,04,ec             orrb  Rec,4              [Flag_ec] |= 4;      
8 5b00: c3,72,e0,00          stw   [R72+e0],0         [Ibgpsi] = 0;        
8 5b04: c7,72,ea,00          stb   [R72+ea],0         [Bgcnt] = 0;         
8 5b08: 20,03                sjmp  5b0d               goto 5b0d;           

8 5b0a: 71,fb,ec             an2b  Rec,fb             [Flag_ec] &= fb;     
8 5b0d: 31,e6,0a             jnb   B1,Re6,5b1a        if (!B1_[Flags_e6]) goto 5b1a;
8 5b10: 30,e6,07             jnb   B0,Re6,5b1a        if (!B0_[Flags_e6]) goto 5b1a;
8 5b13: 3e,26,04             jb    B6,R26,5b1a        if (B6_[Flags_26]) goto 5b1a;
8 5b16: 67,f6,0c,20          ad2w  R20,[Rf6+c]        R20 += [Sc0017];     
8 5b1a: c7,72,eb,3e          stb   [R72+eb],R3e       [Isflag] = R3e;      
8 5b1e: c3,72,de,16          stw   [R72+de],R16       [Fam] = R16;         
8 5b22: 08,01,40             shrw  R40,1              R40 = R40 / 2;       
8 5b25: 98,00,41             cmpb  R41,0                                   
8 5b28: df,03                je    5b2d               if (R41 == 0) goto 5b2d;
8 5b2a: ad,ff,40             ldzbw R40,ff             R40 = (uns)ff;       
8 5b2d: c7,72,e6,40          stb   [R72+e6],R40       [Dsdrpm] = R40;      
8 5b31: 09,06,40             shlw  R40,6              R40 = R40 * 40;      
8 5b34: a3,72,da,32          ldw   R32,[R72+da]       R32 = [Dstpbr];      
//  RAA is Throttle position                                                          //
8 5b38: a0,aa,34             ldw   R34,Raa            R34 = RTP;           
8 5b3b: a3,fa,3c,36          ldw   R36,[Rfa+3c]       R36 = [Sc0105];      
8 5b3f: 88,32,34             cmpw  R34,R32                                 
8 5b42: d9,04                jgtu  5b48               if ((uns) R34 > R32) goto 5b48;
8 5b44: a3,fa,3a,36          ldw   R36,[Rfa+3a]       R36 = [Sc0104];      
8 5b48: ef,18,db             call  3663               Urolav();            
8 5b4b: c3,72,da,3e          stw   [R72+da],R3e       [Dstpbr] = R3e;      
8 5b4f: 37,d0,24             jnb   B7,Rd0,5b76        if (!B7_[Apt]) goto 5b76;
//  dashpot decrement rate (dashpot decrement step at given flow(Kg/Hr(flow),Kg/Hr(Step))  //
8 5b52: 45,54,03,f4,32       ad3w  R32,Rf4,354        R32 = Dash_dec;      
8 5b57: a3,72,dc,34          ldw   R34,[R72+dc]       R34 = [Daspot];      
8 5b5b: 33,e7,09             jnb   B3,Re7,5b67        if (!B3_[Flag_e7]) goto 5b67;
8 5b5e: a3,f2,4a,3e          ldw   R3e,[Rf2+4a]       R3e = [Dasmin];      
8 5b62: 88,3e,34             cmpw  R34,R3e                                 
8 5b65: d1,49                jleu  5bb0               if ((uns) R34 <= R3e) goto 5bb0;
8 5b67: a0,34,3e             ldw   R3e,R34            R3e = R34;           
8 5b6a: ef,9f,da             call  360c               UUWordLu();          
8 5b6d: 68,38,3e             sb2w  R3e,R38            R3e -= R38;          
8 5b70: db,3e                jc    5bb0               if (R3e >= 0) goto 5bb0;
8 5b72: 01,3e                clrw  R3e                R3e = 0;             
8 5b74: 20,3a                sjmp  5bb0               goto 5bb0;           

8 5b76: a3,f4,60,42          ldw   R42,[Rf4+60]       R42 = [Delhys];      
//  126 - RATCH=Closed TP                                                             //
8 5b7a: 67,72,a6,42          ad2w  R42,[R72+a6]       R42 += [TPS_Min__#_was__TPS_Ratch];
8 5b7e: d3,03                jnc   5b83               if (R42 <= ffff) goto 5b83;
8 5b80: bd,c0,42             ldsbw R42,c0             R42 = (sig)c0;       
8 5b83: 68,42,3e             sb2w  R3e,R42            R3e -= R42;          
8 5b86: db,02                jc    5b8a               if (R3e >= 0) goto 5b8a;
8 5b88: 01,3e                clrw  R3e                R3e = 0;             
8 5b8a: a3,f4,5c,3c          ldw   R3c,[Rf4+5c]       R3c = [Dasptk];      
8 5b8e: 6c,3e,3c             ml2w  R3c,R3e            R3c *= R3e;          
//  Table 9346 Max Dashpot clip Dashpot clip(lbs/min) vs RPM                          //
8 5b91: 45,70,03,f4,32       ad3w  R32,Rf4,370        R32 = Dash_max;      
8 5b96: a0,ae,34             ldw   R34,Rae            R34 = [Rpmx4];       
8 5b99: ef,70,da             call  360c               UUWordLu();          
8 5b9c: 99,20,3f             cmpb  R3f,20                                  
8 5b9f: db,0c                jc    5bad               if ((uns) R3f >= 20) goto 5bad;
8 5ba1: 0d,02,3c             shldw R3c,2              R3cL = R3cL * 4;     
8 5ba4: 67,f4,5e,3e          ad2w  R3e,[Rf4+5e]       R3e += [Daspto];     
8 5ba8: 88,38,3e             cmpw  R3e,R38                                 
8 5bab: d1,03                jleu  5bb0               if ((uns) R3e <= R38) goto 5bb0;
8 5bad: a0,38,3e             ldw   R3e,R38            R3e = R38;           
8 5bb0: c3,72,dc,3e          stw   [R72+dc],R3e       [Daspot] = R3e;      
8 5bb4: c0,1c,3e             stw   R1c,R3e            R1c = R3e;           
8 5bb7: 3f,d0,13             jb    B7,Rd0,5bcd        if (B7_[Apt]) goto 5bcd;
8 5bba: c3,72,e2,ae          stw   [R72+e2],Rae       [Nlast] = [Rpmx4];   
8 5bbe: 11,3a                clrb  R3a                R3a = 0;             
8 5bc0: c7,72,c6,00          stb   [R72+c6],0         [Isctmr] = 0;        
8 5bc4: b1,7f,3c             ldb   R3c,7f             R3c = 7f;            
8 5bc7: c7,72,d6,3c          stb   [R72+d6],R3c       [Spkmul] = R3c;      
8 5bcb: 20,a1                sjmp  5c6e               goto 5c6e;           

8 5bcd: b1,01,3a             ldb   R3a,1              R3a = 1;             
//  jump if normal strategy - not self test mode                                      //
8 5bd0: 35,2a,07             jnb   B5,R2a,5bda        if (!B5_[VIP_flags]) goto 5bda;
8 5bd3: 88,1c,00             cmpw  0,R1c                                   
8 5bd6: d7,02                jne   5bda               if (0 != R1c) goto 5bda;
8 5bd8: 20,94                sjmp  5c6e               goto 5c6e;           

5bda - Sub 8 5bda:
8 5bda: b3,fe,02,16          ldb   R16,[Rfe+2]        R16 = [TRLOAD];      
8 5bde: 99,03,16             cmpb  R16,3                                   
8 5be1: d7,03                jne   5be6               if (R16 != 3) goto 5be6;
8 5be3: 3e,26,42             jb    B6,R26,5c28        if (B6_[Flags_26]) goto 5c28;
8 5be6: b3,f4,66,30          ldb   R30,[Rf4+66]       R30 = [Minmph];      
//  2BD - vehicle speed filtered(1) (MPH) 2BC is 8.8 format                           //
8 5bea: 9b,74,3f,30          cmpb  R30,[R74+3f]                            
8 5bee: d3,38                jnc   5c28               if ((uns) R30 < [Mph_FiltH]) goto 5c28;
8 5bf0: 88,00,1c             cmpw  R1c,0                                   
8 5bf3: d7,33                jne   5c28               if (R1c != 0) goto 5c28;
8 5bf5: 47,f4,62,40,38       ad3w  R38,R40,[Rf4+62]   R38 = R40 + [Rpmctl];
8 5bfa: 88,38,ae             cmpw  Rae,R38                                 
8 5bfd: d9,02                jgtu  5c01               if ((uns) [Rpmx4] > R38) goto 5c01;
8 5bff: 20,6d                sjmp  5c6e               goto 5c6e;           

8 5c01: 9b,72,d7,00          cmpb  0,[R72+d7]                              
8 5c05: de,37                jlt   5c3e               if ((sig) 0 < [Iscflg]) goto 5c3e;
//  146 = $146                                                                        //
8 5c07: b3,72,c6,38          ldb   R38,[R72+c6]       R38 = [Isctmr];      
8 5c0b: 9b,f4,6d,38          cmpb  R38,[Rf4+6d]                            
8 5c0f: d3,17                jnc   5c28               if ((uns) R38 < [Isctm]) goto 5c28;
8 5c11: 4b,72,e2,ae,38       sb3w  R38,Rae,[R72+e2]   R38 = [Rpmx4] - [Nlast];
8 5c16: db,02                jc    5c1a               if (R38 >= 0) goto 5c1a;
8 5c18: 03,38                negw  R38                R38 = -R38;          
8 5c1a: 8b,f4,64,38          cmpw  R38,[Rf4+64]                            
8 5c1e: d1,1e                jleu  5c3e               if ((uns) R38 <= [Ndif]) goto 5c3e;
8 5c20: c3,72,e2,ae          stw   [R72+e2],Rae       [Nlast] = [Rpmx4];   
//  zero $146                                                                         //
8 5c24: c7,72,c6,00          stb   [R72+c6],0         [Isctmr] = 0;        
8 5c28: a0,1c,34             ldw   R34,R1c            R34 = R1c;           
8 5c2b: 08,06,34             shrw  R34,6              R34 = R34 / 40;      
//  Table 92CE                                                                        //
8 5c2e: 45,f8,02,f4,32       ad3w  R32,Rf4,2f8        R32 = Fc011;         
8 5c33: ef,81,d9             call  35b7               UUbyteLu();          
8 5c36: c7,72,d6,38          stb   [R72+d6],R38       [Spkmul] = R38;      
8 5c3a: 13,3a                negb  R3a                R3a = -R3a;          
8 5c3c: 20,30                sjmp  5c6e               goto 5c6e;           

8 5c3e: 99,03,16             cmpb  R16,3                                   
8 5c41: d3,03                jnc   5c46               if ((uns) R16 < 3) goto 5c46;
8 5c43: 36,26,25             jnb   B6,R26,5c6b        if (!B6_[Flags_26]) goto 5c6b;
8 5c46: af,f4,6e,38          ldzbw R38,[Rf4+6e]       R38 = (uns)[Lowlod]; 
8 5c4a: 33,ea,09             jnb   B3,Rea,5c56        if (!B3_[Flags_ea]) goto 5c56;
8 5c4d: 77,f4,6f,38          ad2b  R38,[Rf4+6f]       R38 += [Aclod];      
8 5c51: d3,03                jnc   5c56               if (R38 <= ff) goto 5c56;
8 5c53: ad,ff,38             ldzbw R38,ff             R38 = (uns)ff;       
8 5c56: 09,06,38             shlw  R38,6              R38 = R38 * 40;      
//  engine load (VE? )                                                                //
8 5c59: 8b,74,de,38          cmpw  R38,[R74+de]                            
8 5c5d: d3,0c                jnc   5c6b               if ((uns) R38 < [Load]) goto 5c6b;
8 5c5f: c3,72,e2,ae          stw   [R72+e2],Rae       [Nlast] = [Rpmx4];   
//  zero 146 timer - ISCTMR                                                           //
8 5c63: c7,72,c6,00          stb   [R72+c6],0         [Isctmr] = 0;        
8 5c67: 13,3a                negb  R3a                R3a = -R3a;          
8 5c69: 20,03                sjmp  5c6e               goto 5c6e;           

8 5c6b: b1,02,3a             ldb   R3a,2              R3a = 2;             
8 5c6e: c7,72,d7,3a          stb   [R72+d7],R3a       [Iscflg] = R3a;      
8 5c72: af,72,eb,32          ldzbw R32,[R72+eb]       R32 = (uns)[Isflag]; 
8 5c76: a3,72,d4,38          ldw   R38,[R72+d4]       R38 = [Ipsibr];      
8 5c7a: 0a,01,38             asrw  R38,1              R38 = R38 / 2;       
8 5c7d: 08,01,1c             shrw  R1c,1              R1c = R1c / 2;       
8 5c80: 3f,e9,06             jb    B7,Re9,5c89        if (B7_[Flags_e9]) goto 5c89;
8 5c83: 9b,72,ec,32          cmpb  R32,[R72+ec]                            
8 5c87: df,13                je    5c9c               if (R32 == [Islast]) goto 5c9c;
8 5c89: c3,72,e0,00          stw   [R72+e0],0         [Ibgpsi] = 0;        
8 5c8d: c7,72,ea,00          stb   [R72+ea],0         [Bgcnt] = 0;         
8 5c91: 88,00,38             cmpw  R38,0                                   
8 5c94: d6,06                jge   5c9c               if ((sig) R38 >= 0) goto 5c9c;
8 5c96: 01,38                clrw  R38                R38 = 0;             
8 5c98: c3,72,d4,38          stw   [R72+d4],R38       [Ipsibr] = R38;      
8 5c9c: 09,01,32             shlw  R32,1              R32 = R32 * 2;       
8 5c9f: 01,3c                clrw  R3c                R3c = 0;             
8 5ca1: 3f,28,08             jb    B7,R28,5cac        if (B7_[Flags_28]) goto 5cac;
8 5ca4: a3,33,e4,07,3c       ldw   R3c,[R32+7e4]      R3c = [R32+KIsckam0L];
8 5ca9: 0a,01,3c             asrw  R3c,1              R3c = R3c / 2;       
8 5cac: 64,1c,20             ad2w  R20,R1c            R20 += R1c;          
8 5caf: 64,38,20             ad2w  R20,R38            R20 += R38;          
8 5cb2: 64,3c,20             ad2w  R20,R3c            R20 += R3c;          
8 5cb5: a0,20,3e             ldw   R3e,R20            R3e = R20;           
8 5cb8: d6,02                jge   5cbc               if ((sig) R20 >= 0) goto 5cbc;
8 5cba: 01,3e                clrw  R3e                R3e = 0;             
8 5cbc: 09,01,20             shlw  R20,1              R20 = R20 * 2;       
8 5cbf: c3,72,d8,20          stw   [R72+d8],R20       [Desmaf] = R20;      
8 5cc3: 09,01,3e             shlw  R3e,1              R3e = R3e * 2;       
8 5cc6: b3,72,d7,1e          ldb   R1e,[R72+d7]       R1e = [Iscflg];      
8 5cca: a3,72,e0,1c          ldw   R1c,[R72+e0]       R1c = [Ibgpsi];      
//  Table 9286                                                                        //
8 5cce: 45,b0,02,f4,32       ad3w  R32,Rf4,2b0        R32 = Fc007;         
8 5cd3: a0,ae,34             ldw   R34,Rae            R34 = [Rpmx4];       
8 5cd6: ef,33,d9             call  360c               UUWordLu();          
8 5cd9: 64,38,3e             ad2w  R3e,R38            R3e += R38;          
8 5cdc: d3,03                jnc   5ce1               if (R3e <= ffff) goto 5ce1;
8 5cde: bd,ff,3e             ldsbw R3e,ff             R3e = (sig)ff;       
8 5ce1: 6b,f4,58,3e          sb2w  R3e,[Rf4+58]       R3e -= [Ithbma];     
8 5ce5: db,02                jc    5ce9               if (R3e >= 0) goto 5ce9;
8 5ce7: 01,3e                clrw  R3e                R3e = 0;             
8 5ce9: 98,00,1e             cmpb  R1e,0                                   
8 5cec: da,3b                jle   5d29               if ((sig) R1e <= 0) goto 5d29;
8 5cee: 07,1c                incw  R1c                R1c++;               
8 5cf0: d3,02                jnc   5cf4               if (R1c <= ffff) goto 5cf4;
8 5cf2: 05,1c                decw  R1c                R1c--;               
8 5cf4: c3,72,e0,1c          stw   [R72+e0],R1c       [Ibgpsi] = R1c;      
8 5cf8: 11,16                clrb  R16                R16 = 0;             
8 5cfa: 48,ae,40,14          sb3w  R14,R40,Rae        R14 = R40 - [Rpmx4]; 
8 5cfe: db,02                jc    5d02               if (R14 >= 0) goto 5d02;
8 5d00: 17,16                incb  R16                R16++;               
8 5d02: 3e,26,07             jb    B6,R26,5d0c        if (B6_[Flags_26]) goto 5d0c;
//  Table 92F2                                                                        //
8 5d05: 45,1c,03,f4,32       ad3w  R32,Rf4,31c        R32 = Fc013;         
8 5d0a: 20,05                sjmp  5d11               goto 5d11;           

5d0c - Sub 8 5d0c:
8 5d0c: 45,00,03,f4,32       ad3w  R32,Rf4,300        R32 = Fc012;         
8 5d11: a0,14,34             ldw   R34,R14            R34 = R14;           
8 5d14: ef,ea,d8             call  3601               SUWordLU();          
8 5d17: c7,72,d6,38          stb   [R72+d6],R38       [Spkmul] = R38;      
8 5d1b: a0,14,34             ldw   R34,R14            R34 = R14;           
8 5d1e: 30,16,02             jnb   B0,R16,5d23        if (!B0_R16) goto 5d23;
8 5d21: 03,14                negw  R14                R14 = -R14;          
8 5d23: 8b,f4,68,14          cmpw  R14,[Rf4+68]                            
8 5d27: d9,02                jgtu  5d2b               if ((uns) R14 > [Rpmded]) goto 5d2b;
8 5d29: 20,c6                sjmp  5df1               goto 5df1;           

5d2b - Sub 8 5d2b:
8 5d2b: c7,72,c6,00          stb   [R72+c6],0         [Isctmr] = 0;        
8 5d2f: a3,fe,44,38          ldw   R38,[Rfe+44]       R38 = [Sc0170];      
8 5d33: 3d,2a,08             jb    B5,R2a,5d3e        if (B5_[VIP_flags]) goto 5d3e;
//  Table 930E                                                                        //
8 5d36: 45,38,03,f4,32       ad3w  R32,Rf4,338        R32 = Fc014;         
8 5d3b: ef,c3,d8             call  3601               SUWordLU();          
8 5d3e: 88,38,1c             cmpw  R1c,R38                                 
8 5d41: db,02                jc    5d45               if ((uns) R1c >= R38) goto 5d45;
8 5d43: 20,ac                sjmp  5df1               goto 5df1;           

8 5d45: 01,1c                clrw  R1c                R1c = 0;             
8 5d47: c3,72,e0,1c          stw   [R72+e0],R1c       [Ibgpsi] = R1c;      
8 5d4b: 3d,2a,14             jb    B5,R2a,5d62        if (B5_[VIP_flags]) goto 5d62;
8 5d4e: 89,70,7d,b8          cmpw  Rb8,7d70                                
8 5d52: d3,0e                jnc   5d62               if ((uns) [Iscdty] < 7d70) goto 5d62;
8 5d54: 4b,f4,62,40,32       sb3w  R32,R40,[Rf4+62]   R32 = R40 - [Rpmctl];
8 5d59: d1,07                jleu  5d62               if ((uns) R32 <= 0) goto 5d62;
8 5d5b: 88,ae,32             cmpw  R32,Rae                                 
8 5d5e: d1,02                jleu  5d62               if ((uns) R32 <= [Rpmx4]) goto 5d62;
8 5d60: 20,8f                sjmp  5df1               goto 5df1;           

5d62 - Sub 8 5d62:
8 5d62: 35,2a,06             jnb   B5,R2a,5d6b        if (!B5_[VIP_flags]) goto 5d6b;
8 5d65: a1,00,40,38          ldw   R38,4000           R38 = 4000;          
8 5d69: 20,0f                sjmp  5d7a               goto 5d7a;           

5d6b - Sub 8 5d6b:
8 5d6b: b3,74,21,34          ldb   R34,[R74+21]       R34 = [N_byte];      
//  Table 92B2                                                                        //
8 5d6f: 45,dc,02,f4,32       ad3w  R32,Rf4,2dc        R32 = Fc009;         
8 5d74: ef,40,d8             call  35b7               UUbyteLu();          
8 5d77: 09,08,38             shlw  R38,8              R38 = R38 * 100;     
8 5d7a: 6c,14,38             ml2w  R38,R14            R38 *= R14;          
//  jump if normal strategy - not self test mode                                      //
8 5d7d: 35,2a,0d             jnb   B5,R2a,5d8d        if (!B5_[VIP_flags]) goto 5d8d;
8 5d80: a3,fe,40,38          ldw   R38,[Rfe+40]       R38 = [Sc0168];      
8 5d84: 38,16,21             jb    B0,R16,5da8        if (B0_R16) goto 5da8;
8 5d87: a3,fe,42,38          ldw   R38,[Rfe+42]       R38 = [Sc0169];      
8 5d8b: 20,1b                sjmp  5da8               goto 5da8;           

8 5d8d: 3e,26,0d             jb    B6,R26,5d9d        if (B6_[Flags_26]) goto 5d9d;
8 5d90: a3,f4,4e,38          ldw   R38,[Rf4+4e]       R38 = [Kpsind];      
8 5d94: 38,16,11             jb    B0,R16,5da8        if (B0_R16) goto 5da8;
8 5d97: a3,f4,4c,38          ldw   R38,[Rf4+4c]       R38 = [Kpsinu];      
8 5d9b: 20,0b                sjmp  5da8               goto 5da8;           

8 5d9d: a3,f4,52,38          ldw   R38,[Rf4+52]       R38 = [Kpsidd];      
8 5da1: 38,16,04             jb    B0,R16,5da8        if (B0_R16) goto 5da8;
8 5da4: a3,f4,50,38          ldw   R38,[Rf4+50]       R38 = [Kpsidu];      
8 5da8: 6c,3a,38             ml2w  R38,R3a            R38 *= R3a;          
8 5dab: 99,02,3b             cmpb  R3b,2                                   
8 5dae: d3,06                jnc   5db6               if ((uns) R3b < 2) goto 5db6;
8 5db0: a1,ff,7f,3a          ldw   R3a,7fff           R3a = 7fff;          
8 5db4: 20,03                sjmp  5db9               goto 5db9;           

8 5db6: 0d,06,38             shldw R38,6              R38L = R38L * 40;    
8 5db9: a3,f4,54,34          ldw   R34,[Rf4+54]       R34 = [Psibrm];      
8 5dbd: a3,f4,56,36          ldw   R36,[Rf4+56]       R36 = [Psibrn];      
//  jump if normal strategy - not self test mode                                      //
8 5dc1: 35,2a,08             jnb   B5,R2a,5dcc        if (!B5_[VIP_flags]) goto 5dcc;
8 5dc4: a3,fe,3c,34          ldw   R34,[Rfe+3c]       R34 = [Sc0166];      
8 5dc8: a3,fe,3e,36          ldw   R36,[Rfe+3e]       R36 = [Sc0167];      
8 5dcc: 30,16,02             jnb   B0,R16,5dd1        if (!B0_R16) goto 5dd1;
8 5dcf: 03,3a                negw  R3a                R3a = -R3a;          
8 5dd1: 67,72,d4,3a          ad2w  R3a,[R72+d4]       R3a += [Ipsibr];     
8 5dd5: d5,04                jnv   5ddb               if (!OV) goto 5ddb;  
8 5dd7: d6,09                jge   5de2               if ((sig) R3a >= R34) goto 5de2;
8 5dd9: 20,0f                sjmp  5dea               goto 5dea;           

8 5ddb: de,08                jlt   5de5               if ((sig) R3a < 0) goto 5de5;
8 5ddd: 88,34,3a             cmpw  R3a,R34                                 
8 5de0: da,0b                jle   5ded               if ((sig) R3a <= R34) goto 5ded;
8 5de2: a0,34,3a             ldw   R3a,R34            R3a = R34;           
8 5de5: 88,36,3a             cmpw  R3a,R36                                 
8 5de8: d6,03                jge   5ded               if ((sig) R3a >= R36) goto 5ded;
8 5dea: a0,36,3a             ldw   R3a,R36            R3a = R36;           
8 5ded: c3,72,d4,3a          stw   [R72+d4],R3a       [Ipsibr] = R3a;      
8 5df1: a0,3e,32             ldw   R32,R3e            R32 = R3e;           
8 5df4: 4d,ef,00,3e,34       ml3w  R34,R3e,ef         R34 = R3e * ef;      
//  BP - barometric pressure                                                          //
8 5df9: af,74,80,3e          ldzbw R3e,[R74+80]       R3e = (uns)RBp;      
8 5dfd: 8c,3e,34             divw  R34,R3e            R34 = R34L / R3e;    
//  9030 - DEBYCP ?                                                                   //
8 5e00: 8b,f4,5a,34          cmpw  R34,[Rf4+5a]                            
8 5e04: db,04                jc    5e0a               if ((uns) R34 >= [Debycp]) goto 5e0a;
//  9030 - DEBYCP ?                                                                   //
8 5e06: a3,f4,5a,34          ldw   R34,[Rf4+5a]       R34 = [Debycp];      

5e0a - Sub 8 5e0a:
8 5e0a: 8b,f4,5a,32          cmpw  R32,[Rf4+5a]                            
8 5e0e: db,04                jc    5e14               if ((uns) R32 >= [Debycp]) goto 5e14;
//  9030 - DEBYCP ?                                                                   //
8 5e10: a3,f4,5a,32          ldw   R32,[Rf4+5a]       R32 = [Debycp];      
8 5e14: c3,74,e4,32          stw   [R74+e4],R32       [Debyma_fm] = R32;   
//  Table 9256                                                                        //
8 5e18: 45,80,02,f4,32       ad3w  R32,Rf4,280        R32 = Fc006;         
8 5e1d: ef,ec,d7             call  360c               UUWordLu();          
8 5e20: a0,38,40             ldw   R40,R38            R40 = R38;           
8 5e23: af,fe,46,38          ldzbw R38,[Rfe+46]       R38 = (uns)[Sc0171]; 
//  jump if running self tests                                                        //
8 5e27: 3d,2a,0c             jb    B5,R2a,5e36        if (B5_[VIP_flags]) goto 5e36;
//  engine load (VE? )                                                                //
8 5e2a: a3,74,de,34          ldw   R34,[R74+de]       R34 = [Load];        
//  Table 929A Crank Pulse Width Multiplier vs time in crank mode                     //
8 5e2e: 45,c4,02,f4,32       ad3w  R32,Rf4,2c4        R32 = Fc008;         
8 5e33: ef,d6,d7             call  360c               UUWordLu();          
8 5e36: 09,08,38             shlw  R38,8              R38 = R38 * 100;     
8 5e39: 6c,40,38             ml2w  R38,R40            R38 *= R40;          
8 5e3c: 0d,01,38             shldw R38,1              R38L = R38L * 2;     
8 5e3f: db,06                jc    5e47               if (R38 * 2 > ffff) goto 5e47;
8 5e41: 89,00,80,3a          cmpw  R3a,8000                                
8 5e45: d1,04                jleu  5e4b               if ((uns) R3a <= 8000) goto 5e4b;
8 5e47: a1,00,80,3a          ldw   R3a,8000           R3a = 8000;          
8 5e4b: c0,b8,3a             stw   Rb8,R3a            [Iscdty] = R3a;      
8 5e4e: 99,01,1e             cmpb  R1e,1                                   
8 5e51: d7,70                jne   5ec3               if (R1e != 1) goto 5ec3;
//  146 timer - ISCTMR                                                                //
8 5e53: b3,72,c6,38          ldb   R38,[R72+c6]       R38 = [Isctmr];      
8 5e57: 9b,f4,70,38          cmpb  R38,[Rf4+70]                            
8 5e5b: d3,66                jnc   5ec3               if ((uns) R38 < [Updisc]) goto 5ec3;
8 5e5d: 3f,26,63             jb    B7,R26,5ec3        if (B7_[Flags_26]) goto 5ec3;
8 5e60: a3,72,d4,3c          ldw   R3c,[R72+d4]       R3c = [Ipsibr];      
8 5e64: 88,00,3c             cmpw  R3c,0                                   
8 5e67: df,5a                je    5ec3               if (R3c == 0) goto 5ec3;
8 5e69: 3f,28,57             jb    B7,R28,5ec3        if (B7_[Flags_28]) goto 5ec3;
//  16B - ISFlag - index of some sort?                                                //
8 5e6c: af,72,eb,32          ldzbw R32,[R72+eb]       R32 = (uns)[Isflag]; 
//  index to word offset                                                              //
8 5e70: 09,01,32             shlw  R32,1              R32 = R32 * 2;       
8 5e73: a3,33,e4,07,38       ldw   R38,[R32+7e4]      R38 = [R32+KIsckam0L];
//  9047 - UPDATM                                                                     //
8 5e78: af,f4,71,3a          ldzbw R3a,[Rf4+71]       R3a = (uns)[Updatm]; 
8 5e7c: 88,3a,1c             cmpw  R1c,R3a                                 
8 5e7f: d3,42                jnc   5ec3               if ((uns) R1c < R3a) goto 5ec3;
//  160 - IBGPSI                                                                      //
8 5e81: c3,72,e0,00          stw   [R72+e0],0         [Ibgpsi] = 0;        
//  KAM Table 2 checksum                                                              //
8 5e85: a3,01,ec,07,34       ldw   R34,[7ec]          R34 = [KIsksum];     
8 5e8a: 88,00,3c             cmpw  R3c,0                                   
8 5e8d: d2,14                jgt   5ea3               if ((sig) R3c > 0) goto 5ea3;
//  902C - PSIBRN                                                                     //
8 5e8f: 8b,f4,56,38          cmpw  R38,[Rf4+56]                            
8 5e93: da,2e                jle   5ec3               if ((sig) R38 <= [Psibrn]) goto 5ec3;
8 5e95: 05,38                decw  R38                R38--;               
//  CkSum                                                                             //
8 5e97: 05,34                decw  R34                R34--;               
//  902A - PSIBR M                                                                    //
8 5e99: 8b,f4,54,3c          cmpw  R3c,[Rf4+54]                            
8 5e9d: d6,16                jge   5eb5               if ((sig) R3c >= [Psibrm]) goto 5eb5;
8 5e9f: 07,3c                incw  R3c                R3c++;               
8 5ea1: 20,12                sjmp  5eb5               goto 5eb5;           

5ea3 - Sub 8 5ea3:
8 5ea3: 8b,f4,54,38          cmpw  R38,[Rf4+54]                            
8 5ea7: d6,1a                jge   5ec3               if ((sig) R38 >= [Psibrm]) goto 5ec3;
8 5ea9: 07,38                incw  R38                R38++;               
//  CkSum                                                                             //
8 5eab: 07,34                incw  R34                R34++;               
//  902C - PSIBRN                                                                     //
8 5ead: 8b,f4,56,3c          cmpw  R3c,[Rf4+56]                            
8 5eb1: da,02                jle   5eb5               if ((sig) R3c <= [Psibrn]) goto 5eb5;
8 5eb3: 05,3c                decw  R3c                R3c--;               

5eb5 - Sub 8 5eb5:
8 5eb5: c3,33,e4,07,38       stw   [R32+7e4],R38      [R32+KIsckam0L] = R38;
//  154 IPSIBR                                                                        //
8 5eba: c3,72,d4,3c          stw   [R72+d4],R3c       [Ipsibr] = R3c;      
//  KAM Table 2 checksum ISKSUM                                                       //
8 5ebe: c3,01,ec,07,34       stw   [7ec],R34          [KIsksum] = R34;     
8 5ec3: f0                   ret                      return;              

Upd_VSC:
8 5ec4: b1,02,30             ldb   R30,2              R30 = 2;             
//  8EA0 SCCS Frequency - Desired VSC Frequency, Hz                                   //
8 5ec7: 9b,f2,47,30          cmpb  R30,[Rf2+47]                            
8 5ecb: d7,0a                jne   5ed7               if (R30 != [Vstype]) goto 5ed7;
//  211 Battery Voltage Level * 16                                                    //
8 5ecd: b3,74,93,30          ldb   R30,[R74+93]       R30 = [Vbat];        
//  8E9E = 26(38)HLDRNG - Error deadband for no pulses required.                      //
8 5ed1: 9b,f2,45,30          cmpb  R30,[Rf2+45]                            
//  jmp battery voltage > ROM limit                                                   //
8 5ed5: d9,07                jgtu  5ede               if ((uns) R30 > [Lowbat]) goto 5ede;

5ed7 - Sub 8 5ed7:
8 5ed7: b1,80,b5             ldb   Rb5,80             [Vsc_flagsb] = 80;   
//  SCCS state clear all                                                              //
8 5eda: 11,a0                clrb  Ra0                [Vsc_states] = 0;    
8 5edc: 20,02                sjmp  5ee0               goto 5ee0;           

5ede - Sub 8 5ede:
8 5ede: 28,07                scall 5ee7               Upd_SCCS();          
8 5ee0: 28,8f                scall 5f71               Sub0355();           
8 5ee2: 29,a3                scall 6087               Sub0363();           
8 5ee4: 29,e9                scall 60cf               Sub0364();           
8 5ee6: f0                   ret                      return;              

Upd_SCCS:
8 5ee7: a3,72,98,38          ldw   R38,[R72+98]       R38 = [Vsc_Raw];     
//  difference to old value of buttons                                                //
8 5eeb: 4b,76,32,38,3a       sb3w  R3a,R38,[R76+32]   R3a = R38 - [Ivsccs_lst];
8 5ef0: db,02                jc    5ef4               if (R3a >= 0) goto 5ef4;
//  ABS difference                                                                    //
8 5ef2: 03,3a                negw  R3a                R3a = -R3a;          

5ef4 - Sub 8 5ef4:
8 5ef4: 8b,f2,12,3a          cmpw  R3a,[Rf2+12]                            
8 5ef8: d1,0c                jleu  5f06               if ((uns) R3a <= [Debamp]) goto 5f06;
//  3AC IVSCCS LST - Previous valid SCCS input                                        //
8 5efa: c3,76,32,38          stw   [R76+32],R38       [Ivsccs_lst] = R38;  
//  8E8A - DEBTIM - Debounce time delay, seconds                                      //
8 5efe: a3,f2,30,3a          ldw   R3a,[Rf2+30]       R3a = [Debtim];      
//  2A8 timer? DEBOUNCE timer                                                         //
8 5f02: c3,74,2a,3a          stw   [R74+2a],R3a       [Debtmr] = R3a;      

5f06 - Sub 8 5f06:
8 5f06: 8b,74,2a,00          cmpw  0,[R74+2a]                              
8 5f0a: d7,04                jne   5f10               if (0 != [Debtmr]) goto 5f10;
//  input, debounced counts                                                           //
8 5f0c: c3,74,36,38          stw   [R74+36],R38       [Vsccs] = R38;       
8 5f10: a3,74,36,38          ldw   R38,[R74+36]       R38 = [Vsccs];       
//  check for SCCS error                                                              //
8 5f14: 71,02,b5             an2b  Rb5,2              [Vsc_flagsb] &= 2;   
//  8E6E - HI OFF - Input VSC command Switch input range, counts                      //
8 5f17: 8b,f2,14,38          cmpw  R38,[Rf2+14]                            
8 5f1b: db,04                jc    5f21               if ((uns) R38 >= [Hi_off]) goto 5f21;
//  set RB5 bit 7 OFF BUTTON                                                          //
8 5f1d: 91,80,b5             orrb  Rb5,80             [Vsc_flagsb] |= 80;  
8 5f20: f0                   ret                      return;              

5f21 - Sub 8 5f21:
8 5f21: 8b,f2,16,38          cmpw  R38,[Rf2+16]                            
8 5f25: d1,04                jleu  5f2b               if ((uns) R38 <= [Low_on]) goto 5f2b;
//  set RA0 bit 7 ON STATE                                                            //
8 5f27: 91,80,a0             orrb  Ra0,80             [Vsc_states] |= 80;  
8 5f2a: f0                   ret                      return;              

5f2b - Sub 8 5f2b:
8 5f2b: 8b,f2,18,38          cmpw  R38,[Rf2+18]                            
8 5f2f: d1,0a                jleu  5f3b               if ((uns) R38 <= [Lcoast]) goto 5f3b;
//  8E74 - HCOAST - Input VSCCS input range, counts.                                  //
8 5f31: 8b,f2,1a,38          cmpw  R38,[Rf2+1a]                            
8 5f35: db,04                jc    5f3b               if ((uns) R38 >= [Hcoast]) goto 5f3b;
//  set RB5 bit 5 COAST BUTTON                                                        //
8 5f37: 91,20,b5             orrb  Rb5,20             [Vsc_flagsb] |= 20;  
8 5f3a: f0                   ret                      return;              

5f3b - Sub 8 5f3b:
8 5f3b: 8b,f2,1c,38          cmpw  R38,[Rf2+1c]                            
8 5f3f: d1,0a                jleu  5f4b               if ((uns) R38 <= [Laccel]) goto 5f4b;
//  8E78 - HACCEL - Input VSCCS input range, counts.                                  //
8 5f41: 8b,f2,1e,38          cmpw  R38,[Rf2+1e]                            
8 5f45: db,04                jc    5f4b               if ((uns) R38 >= [Haccel]) goto 5f4b;
//  set RB5 bit 4 ACCELORATE BUTTON                                                   //
8 5f47: 91,10,b5             orrb  Rb5,10             [Vsc_flagsb] |= 10;  
8 5f4a: f0                   ret                      return;              

5f4b - Sub 8 5f4b:
8 5f4b: 8b,f2,20,38          cmpw  R38,[Rf2+20]                            
8 5f4f: d1,0a                jleu  5f5b               if ((uns) R38 <= [Lresum]) goto 5f5b;
//  8E7C - HRESUM - Input VSCCS input range, counts.                                  //
8 5f51: 8b,f2,22,38          cmpw  R38,[Rf2+22]                            
8 5f55: db,04                jc    5f5b               if ((uns) R38 >= [Hresum]) goto 5f5b;
//  set RB5 bit 3 RESUME BUTTON                                                       //
8 5f57: 91,08,b5             orrb  Rb5,8              [Vsc_flagsb] |= 8;   
8 5f5a: f0                   ret                      return;              

5f5b - Sub 8 5f5b:
8 5f5b: 8b,f2,24,38          cmpw  R38,[Rf2+24]                            
8 5f5f: d1,09                jleu  5f6a               if ((uns) R38 <= [Lohold]) goto 5f6a;
//  8E80 - HIHOLD - Input VSCCS input range, counts.                                  //
8 5f61: 8b,f2,26,38          cmpw  R38,[Rf2+26]                            
8 5f65: db,03                jc    5f6a               if ((uns) R38 >= [Hihold]) goto 5f6a;
//  clr all bits in RB5                                                               //
8 5f67: 11,b5                clrb  Rb5                [Vsc_flagsb] = 0;    
8 5f69: f0                   ret                      return;              

5f6a - Sub 8 5f6a:
8 5f6a: 91,02,b5             orrb  Rb5,2              [Vsc_flagsb] |= 2;   
//  clr RA0 bit 7 clr ON state                                                        //
8 5f6d: 71,7f,a0             an2b  Ra0,7f             [Vsc_states] &= 7f;  
8 5f70: f0                   ret                      return;              

Sub0355:
8 5f71: 30,2a,0a             jnb   B0,R2a,5f7e        if (!B0_[VIP_flags]) goto 5f7e;
8 5f74: a0,ae,3c             ldw   R3c,Rae            R3c = [Rpmx4];       
//  x4                                                                                //
8 5f77: 09,02,3c             shlw  R3c,2              R3c = R3c * 4;       
//  SCCS vehicle speed in MPH filtered 2                                              //
8 5f7a: c3,74,2e,3c          stw   [R74+2e],R3c       [Mph_FiltA] = R3c;   

5f7e - Sub 8 5f7e:
8 5f7e: a3,74,2e,3c          ldw   R3c,[R74+2e]       R3c = [Mph_FiltA];   
//  SCCS on state                                                                     //
8 5f82: 37,a0,03             jnb   B7,Ra0,5f88        if (!B7_[Vsc_states]) goto 5f88;
//  SCCS OFF buttob                                                                   //
8 5f85: 37,b5,07             jnb   B7,Rb5,5f8f        if (!B7_[Vsc_flagsb]) goto 5f8f;
8 5f88: 11,a0                clrb  Ra0                [Vsc_states] = 0;    
8 5f8a: c3,74,30,00          stw   [R74+30],0         [Res_speed] = 0;     
8 5f8e: f0                   ret                      return;              

5f8f - Sub 8 5f8f:
8 5f8f: 38,2a,50             jb    B0,R2a,5fe2        if (B0_[VIP_flags]) goto 5fe2;
8 5f92: a3,f2,32,38          ldw   R38,[Rf2+32]       R38 = [Minvsp];      
8 5f96: 88,38,3c             cmpw  R3c,R38                                 
8 5f99: db,03                jc    5f9e               if ((uns) R3c >= R38) goto 5f9e;
8 5f9b: 91,20,c4             orrb  Rc4,20             [Vsc_flags] |= 20;   
8 5f9e: 67,f2,3a,38          ad2w  R38,[Rf2+3a]       R38 += [Mphh];       
8 5fa2: db,08                jc    5fac               if (R38 > ffff) goto 5fac;
8 5fa4: 88,38,3c             cmpw  R3c,R38                                 
8 5fa7: d1,03                jleu  5fac               if ((uns) R3c <= R38) goto 5fac;
8 5fa9: 71,df,c4             an2b  Rc4,df             [Vsc_flags] &= df;   

5fac - Sub 8 5fac:
8 5fac: 31,b5,03             jnb   B1,Rb5,5fb2        if (!B1_[Vsc_flagsb]) goto 5fb2;
8 5faf: 91,20,c4             orrb  Rc4,20             [Vsc_flags] |= 20;   
8 5fb2: a3,f2,36,38          ldw   R38,[Rf2+36]       R38 = [Vsnmax];      
8 5fb6: 88,ae,38             cmpw  R38,Rae                                 
8 5fb9: db,03                jc    5fbe               if ((uns) R38 >= [Rpmx4]) goto 5fbe;
8 5fbb: 91,20,c4             orrb  Rc4,20             [Vsc_flags] |= 20;   
8 5fbe: 3d,c4,1d             jb    B5,Rc4,5fde        if (B5_[Vsc_flags]) goto 5fde;
8 5fc1: a3,f2,34,38          ldw   R38,[Rf2+34]       R38 = [Maxvsp];      
8 5fc5: 88,38,3c             cmpw  R3c,R38                                 
8 5fc8: d1,03                jleu  5fcd               if ((uns) R3c <= R38) goto 5fcd;
8 5fca: 91,10,c4             orrb  Rc4,10             [Vsc_flags] |= 10;   
8 5fcd: 6b,f2,3a,38          sb2w  R38,[Rf2+3a]       R38 -= [Mphh];       
8 5fd1: d3,08                jnc   5fdb               if (R38 < 0) goto 5fdb;
8 5fd3: 88,38,3c             cmpw  R3c,R38                                 
8 5fd6: db,03                jc    5fdb               if ((uns) R3c >= R38) goto 5fdb;
8 5fd8: 71,ef,c4             an2b  Rc4,ef             [Vsc_flags] &= ef;   
8 5fdb: 34,c4,07             jnb   B4,Rc4,5fe5        if (!B4_[Vsc_flags]) goto 5fe5;
8 5fde: 71,a0,a0             an2b  Ra0,a0             [Vsc_states] &= a0;  
8 5fe1: f0                   ret                      return;              

5fe2 - Sub 8 5fe2:
8 5fe2: 31,ea,19             jnb   B1,Rea,5ffe        if (!B1_[Flags_ea]) goto 5ffe;

5fe5 - Sub 8 5fe5:
8 5fe5: 39,ea,09             jb    B1,Rea,5ff1        if (B1_[Flags_ea]) goto 5ff1;
8 5fe8: 3f,e7,13             jb    B7,Re7,5ffe        if (B7_[Flag_e7]) goto 5ffe;
//  9E5C                                                                              //
8 5feb: 9b,fe,02,00          cmpb  0,[Rfe+2]                               
8 5fef: df,0d                je    5ffe               if (0 == [TRLOAD]) goto 5ffe;
8 5ff1: b1,a0,a0             ldb   Ra0,a0             [Vsc_states] = a0;   
//  ck SCCS buttons: RESUME, COAST, ACCELL                                            //
8 5ff4: 51,38,b5,00          an3b  0,Rb5,38           0 = [Vsc_flagsb] & 38;
8 5ff8: df,03                je    5ffd               if ([Vsc_flagsb] != 38) goto 5ffd;
//  set SCCS button Range error                                                       //
8 5ffa: 91,02,b5             orrb  Rb5,2              [Vsc_flagsb] |= 2;   
8 5ffd: f0                   ret                      return;              

5ffe - Sub 8 5ffe:
8 5ffe: 35,b5,05             jnb   B5,Rb5,6006        if (!B5_[Vsc_flagsb]) goto 6006;
8 6001: b1,c0,a0             ldb   Ra0,c0             [Vsc_states] = c0;   
8 6004: 20,06                sjmp  600c               goto 600c;           

8 6006: 36,a0,0c             jnb   B6,Ra0,6015        if (!B6_[Vsc_states]) goto 6015;
8 6009: b1,85,a0             ldb   Ra0,85             [Vsc_states] = 85;   
8 600c: c3,74,32,3c          stw   [R74+32],R3c       [Set_speed] = R3c;   
8 6010: c3,74,30,3c          stw   [R74+30],R3c       [Res_speed] = R3c;   
8 6014: f0                   ret                      return;              

6015 - Sub 8 6015:
8 6015: 34,b5,0c             jnb   B4,Rb5,6024        if (!B4_[Vsc_flagsb]) goto 6024;
8 6018: 3c,a0,04             jb    B4,Ra0,601f        if (B4_[Vsc_states]) goto 601f;
8 601b: c3,74,32,3c          stw   [R74+32],R3c       [Set_speed] = R3c;   
8 601f: b1,91,a0             ldb   Ra0,91             [Vsc_states] = 91;   
8 6022: 20,0a                sjmp  602e               goto 602e;           

8 6024: 34,a0,0c             jnb   B4,Ra0,6033        if (!B4_[Vsc_states]) goto 6033;
8 6027: b1,85,a0             ldb   Ra0,85             [Vsc_states] = 85;   
8 602a: c3,74,32,3c          stw   [R74+32],R3c       [Set_speed] = R3c;   
8 602e: c3,74,30,3c          stw   [R74+30],R3c       [Res_speed] = R3c;   
8 6032: f0                   ret                      return;              

8 6033: 3b,a0,1b             jb    B3,Ra0,6051        if (B3_[Vsc_states]) goto 6051;
8 6036: 3d,d9,10             jb    B5,Rd9,6049        if (B5_[Vip_flags4]) goto 6049;
//  SCCS RESUME button                                                                //
8 6039: 33,b5,15             jnb   B3,Rb5,6051        if (!B3_[Vsc_flagsb]) goto 6051;
8 603c: 35,a0,12             jnb   B5,Ra0,6051        if (!B5_[Vsc_states]) goto 6051;
8 603f: a3,74,30,38          ldw   R38,[R74+30]       R38 = [Res_speed];   
8 6043: 8b,f2,32,38          cmpw  R38,[Rf2+32]                            
8 6047: d1,08                jleu  6051               if ((uns) R38 <= [Minvsp]) goto 6051;
8 6049: b1,89,a0             ldb   Ra0,89             [Vsc_states] = 89;   
8 604c: c3,74,32,3c          stw   [R74+32],R3c       [Set_speed] = R3c;   
8 6050: f0                   ret                      return;              

8 6051: 33,a0,0a             jnb   B3,Ra0,605e        if (!B3_[Vsc_states]) goto 605e;
8 6054: 8b,74,30,3c          cmpw  R3c,[R74+30]                            
8 6058: db,04                jc    605e               if ((uns) R3c >= [Res_speed]) goto 605e;
8 605a: b1,8b,a0             ldb   Ra0,8b             [Vsc_states] = 8b;   
8 605d: f0                   ret                      return;              

8 605e: 33,a0,0c             jnb   B3,Ra0,606d        if (!B3_[Vsc_states]) goto 606d;
8 6061: b1,85,a0             ldb   Ra0,85             [Vsc_states] = 85;   
8 6064: a3,74,30,38          ldw   R38,[R74+30]       R38 = [Res_speed];   
8 6068: c3,74,32,38          stw   [R74+32],R38       [Set_speed] = R38;   
8 606c: f0                   ret                      return;              

8 606d: 32,a0,16             jnb   B2,Ra0,6086        if (!B2_[Vsc_states]) goto 6086;
8 6070: a3,74,32,38          ldw   R38,[R74+32]       R38 = [Set_speed];   
8 6074: 68,3c,38             sb2w  R38,R3c            R38 -= R3c;          
8 6077: d3,06                jnc   607f               if (R38 < 0) goto 607f;
8 6079: 8b,f2,38,38          cmpw  R38,[Rf2+38]                            
8 607d: d9,04                jgtu  6083               if ((uns) R38 > [Mphded]) goto 6083;
8 607f: 91,01,a0             orrb  Ra0,1              [Vsc_states] |= 1;   
8 6082: f0                   ret                      return;              

8 6083: b1,a0,a0             ldb   Ra0,a0             [Vsc_states] = a0;   
8 6086: f0                   ret                      return;              

Sub0363:
8 6087: 3c,b5,03             jb    B4,Rb5,608d        if (B4_[Vsc_flagsb]) goto 608d;
8 608a: 31,a0,3d             jnb   B1,Ra0,60ca        if (!B1_[Vsc_states]) goto 60ca;
8 608d: 4b,f2,3c,3c,32       sb3w  R32,R3c,[Rf2+3c]   R32 = R3c - [Aclded];
8 6092: db,03                jc    6097               if (R32 >= 0) goto 6097;
8 6094: a0,00,32             ldw   R32,0              R32 = 0;             
8 6097: 8b,74,32,32          cmpw  R32,[R74+32]                            
8 609b: d1,06                jleu  60a3               if ((uns) R32 <= [Set_speed]) goto 60a3;
8 609d: c3,74,32,3c          stw   [R74+32],R3c       [Set_speed] = R3c;   
8 60a1: 20,27                sjmp  60ca               goto 60ca;           

8 60a3: 4b,74,2c,06,38       sb3w  R38,R06,[R74+2c]   R38 = IO_TIMER - [Ltime];
//  jump if not VIP mode flag : VSCDT                                                 //
8 60a8: 30,2a,07             jnb   B0,R2a,60b2        if (!B0_[VIP_flags]) goto 60b2;
8 60ab: a3,f3,64,01,30       ldw   R30,[Rf2+164]      R30 = [Vacrr];       
8 60b0: 20,04                sjmp  60b6               goto 60b6;           

8 60b2: a3,f2,3e,30          ldw   R30,[Rf2+3e]       R30 = [Aclinc];      
8 60b6: 6d,44,28,38          ml2w  R38,2844           R38 *= 2844;         
8 60ba: 6c,3a,30             ml2w  R30,R3a            R30 *= R3a;          
8 60bd: 67,74,32,32          ad2w  R32,[R74+32]       R32 += [Set_speed];  
8 60c1: d3,03                jnc   60c6               if (R32 <= ffff) goto 60c6;
8 60c3: bd,ff,32             ldsbw R32,ff             R32 = (sig)ff;       
8 60c6: c3,74,32,32          stw   [R74+32],R32       [Set_speed] = R32;   
8 60ca: c3,74,2c,06          stw   [R74+2c],R06       [Ltime] = IO_TIMER;  
8 60ce: f0                   ret                      return;              

Sub0364:
8 60cf: 30,2a,1d             jnb   B0,R2a,60ef        if (!B0_[VIP_flags]) goto 60ef;
8 60d2: 3d,d9,04             jb    B5,Rd9,60d9        if (B5_[Vip_flags4]) goto 60d9;
8 60d5: b1,ff,9b             ldb   R9b,ff             [Vsc_count] = ff;    
8 60d8: f0                   ret                      return;              

8 60d9: a3,f3,5a,01,14       ldw   R14,[Rf2+15a]      R14 = [Vstgn];       
8 60de: a3,f3,5c,01,18       ldw   R18,[Rf2+15c]      R18 = [Vvhgn];       
8 60e3: a3,f3,5e,01,38       ldw   R38,[Rf2+15e]      R38 = [Vtpgn];       
8 60e8: a3,f3,70,01,42       ldw   R42,[Rf2+170]      R42 = [Vdcbia];      
8 60ed: 20,10                sjmp  60ff               goto 60ff;           

8 60ef: a3,f2,2a,14          ldw   R14,[Rf2+2a]       R14 = [Setgn];       
8 60f3: a3,f2,2c,18          ldw   R18,[Rf2+2c]       R18 = [Vehgn];       
8 60f7: a3,f2,2e,38          ldw   R38,[Rf2+2e]       R38 = [Tapgn];       
8 60fb: a3,f2,28,42          ldw   R42,[Rf2+28]       R42 = [Dcbias];      
8 60ff: 30,a0,21             jnb   B0,Ra0,6123        if (!B0_[Vsc_states]) goto 6123;
8 6102: 6f,74,32,14          ml2w  R14,[R74+32]       R14 *= [Set_speed];  
8 6106: 64,42,16             ad2w  R16,R42            R16 += R42;          
//  SCCS vehicle speed in MPH filtered 2                                              //
8 6109: 6f,74,2e,18          ml2w  R18,[R74+2e]       R18 *= [Mph_FiltA];  
8 610d: 68,1a,16             sb2w  R16,R1a            R16 -= R1a;          
8 6110: d3,11                jnc   6123               if (R16 < 0) goto 6123;
//  RAA is Throttle position, 126 - RATCH=Closed TP                                   //
8 6112: 4b,72,a6,aa,18       sb3w  R18,Raa,[R72+a6]   R18 = RTP - [TPS_Min__#_was__TPS_Ratch];
8 6117: db,02                jc    611b               if (R18 >= 0) goto 611b;
8 6119: 01,18                clrw  R18                R18 = 0;             
8 611b: 6c,38,18             ml2w  R18,R38            R18 *= R38;          
8 611e: 68,1a,16             sb2w  R16,R1a            R16 -= R1a;          
8 6121: db,02                jc    6125               if (R16 >= 0) goto 6125;
8 6123: 01,16                clrw  R16                R16 = 0;             
8 6125: a0,16,14             ldw   R14,R16            R14 = R16;           
8 6128: 08,01,16             shrw  R16,1              R16 = R16 / 2;       
8 612b: c3,74,38,16          stw   [R74+38],R16       [Vsc_error] = R16;   
8 612f: 11,16                clrb  R16                R16 = 0;             
8 6131: 6b,f2,40,14          sb2w  R14,[Rf2+40]       R14 -= [Hldref];     
8 6135: d9,04                jgtu  613b               if ((uns) R14 > 0) goto 613b;
8 6137: 03,14                negw  R14                R14 = -R14;          
8 6139: 17,16                incb  R16                R16++;               
8 613b: 89,80,00,14          cmpw  R14,80                                  
8 613f: d1,03                jleu  6144               if ((uns) R14 <= 80) goto 6144;
8 6141: b1,80,14             ldb   R14,80             R14 = 80;            
8 6144: 9b,f2,44,14          cmpb  R14,[Rf2+44]                            
8 6148: d9,02                jgtu  614c               if ((uns) R14 > [Hldrng]) goto 614c;
8 614a: 11,14                clrb  R14                R14 = 0;             

614c - Sub 8 614c:
8 614c: c7,74,3c,14          stb   [R74+3c],R14       [Vsc_dc] = R14;      
8 6150: a1,d0,07,38          ldw   R38,7d0            R38 = 7d0;           
8 6154: 9f,f2,46,38          divb  R38,[Rf2+46]       R38 = R38W / [Vscfrq];
8 6158: 5c,38,14,18          ml3b  R18,R14,R38        R18 = R14 * R38;     
8 615c: 65,80,00,18          ad2w  R18,80             R18 += 80;           
8 6160: 30,38,02             jnb   B0,R38,6165        if (!B0_R38) goto 6165;
8 6163: 17,38                incb  R38                R38++;               
8 6165: 18,01,38             shrb  R38,1              R38 = R38 / 2;       
8 6168: fa                   di                       disable ints;        
8 6169: ff                   ff                                            
8 616a: 30,16,05             jnb   B0,R16,6172        if (!B0_R16) goto 6172;
8 616d: 3e,c4,05             jb    B6,Rc4,6175        if (B6_[Vsc_flags]) goto 6175;
8 6170: 20,12                sjmp  6184               goto 6184;           

8 6172: 3e,c4,0f             jb    B6,Rc4,6184        if (B6_[Vsc_flags]) goto 6184;
8 6175: 95,40,c4             xrb   Rc4,40             [Vsc_flags] ^= 40;   
//  LSO output line 0 OFF (Speed Control Vacuum)                                      //
8 6178: 71,fe,46             an2b  R46,fe             [IO_Port_State] &= fe;
//  LSO output line 4 ON (Speed Control Vent)                                         //
8 617b: 91,10,46             orrb  R46,10             [IO_Port_State] |= 10;
8 617e: 71,f7,c4             an2b  Rc4,f7             [Vsc_flags] &= f7;   
8 6181: b1,01,9b             ldb   R9b,1              [Vsc_count] = 1;     
8 6184: c7,74,3b,19          stb   [R74+3b],R19       [Vsc_on_count] = R19;
8 6188: 78,19,38             sb2b  R38,R19            R38 -= R19;          
8 618b: c7,74,3a,38          stb   [R74+3a],R38       [Vsc_off_count] = R38;
8 618f: fb                   ei                       enable ints;         
8 6190: f0                   ret                      return;              

Upd_air_mgt:
8 6191: b3,f6,17,38          ldb   R38,[Rf6+17]       R38 = [Sc0020];      
8 6195: b3,f6,16,39          ldb   R39,[Rf6+16]       R39 = [Sc0019];      
8 6199: 98,38,b0             cmpb  Rb0,R38                                 
8 619c: da,0a                jle   61a8               if ((sig) [ECT] <= R38) goto 61a8;
//  RB1 = ACT (ACT = RB1 * 4)                                                         //
8 619e: 98,39,b1             cmpb  Rb1,R39                                 
8 61a1: da,05                jle   61a8               if ((sig) [ACT] <= R39) goto 61a8;
8 61a3: 91,08,29             orrb  R29,8              [Flags_29] |= 8;     
8 61a6: 20,1f                sjmp  61c7               goto 61c7;           

8 61a8: 7b,f6,18,38          sb2b  R38,[Rf6+18]       R38 -= [Sc0021];     
8 61ac: d5,03                jnv   61b1               if (!OV) goto 61b1;  
8 61ae: b1,80,38             ldb   R38,80             R38 = 80;            
8 61b1: 98,38,b0             cmpb  Rb0,R38                                 
8 61b4: de,0e                jlt   61c4               if ((sig) [ECT] < R38) goto 61c4;
8 61b6: 7b,f6,18,39          sb2b  R39,[Rf6+18]       R39 -= [Sc0021];     
8 61ba: d5,03                jnv   61bf               if (!OV) goto 61bf;  
8 61bc: b1,80,39             ldb   R39,80             R39 = 80;            

61bf - Sub 8 61bf:
8 61bf: 98,39,b1             cmpb  Rb1,R39                                 
8 61c2: d6,03                jge   61c7               if ((sig) [ACT] >= R39) goto 61c7;
8 61c4: 71,f7,29             an2b  R29,f7             [Flags_29] &= f7;    
8 61c7: 91,80,25             orrb  R25,80             [Flags_25] |= 80;    
8 61ca: 3b,29,1f             jb    B3,R29,61ec        if (B3_[Flags_29]) goto 61ec;
8 61cd: 31,ed,11             jnb   B1,Red,61e1        if (!B1_[Flags_ed]) goto 61e1;
//  9E70 no of HEGOs                                                                  //
8 61d0: b3,fe,16,30          ldb   R30,[Rfe+16]       R30 = [No_hegos];    
8 61d4: 99,01,30             cmpb  R30,1                                   
8 61d7: df,13                je    61ec               if (R30 == 1) goto 61ec;
8 61d9: 99,02,30             cmpb  R30,2                                   
8 61dc: d7,03                jne   61e1               if (R30 != 2) goto 61e1;
8 61de: 38,ed,0b             jb    B0,Red,61ec        if (B0_[Flags_ed]) goto 61ec;
8 61e1: 99,01,d0             cmpb  Rd0,1                                   
8 61e4: d7,09                jne   61ef               if ([Apt] != 1) goto 61ef;
//  timer?                                                                            //
8 61e6: 9b,f6,15,cb          cmpb  Rcb,[Rf6+15]                            
8 61ea: d3,03                jnc   61ef               if ((uns) [Awotmr] < [Sc0018]) goto 61ef;
8 61ec: 71,7f,25             an2b  R25,7f             [Flags_25] &= 7f;    

61ef - Sub 8 61ef:
8 61ef: b3,fe,0b,30          ldb   R30,[Rfe+b]        R30 = [Thrmhp];      
8 61f3: 99,01,30             cmpb  R30,1                                   
8 61f6: df,0c                je    6204               if (R30 == 1) goto 6204;
8 61f8: 91,40,25             orrb  R25,40             [Flags_25] |= 40;    
8 61fb: 3f,25,03             jb    B7,R25,6201        if (B7_[Flags_25]) goto 6201;
8 61fe: 71,bf,25             an2b  R25,bf             [Flags_25] &= bf;    
8 6201: e7,b0,00             jump  62b4               goto Sub0375;        

8 6204: 71,7f,ca             an2b  Rca,7f             [Flag_ca] &= 7f;     
//  clr bits 6, 2, 1, 0                                                               //
8 6207: 51,b8,c5,30          an3b  R30,Rc5,b8         R30 = [Fmem_flags] & b8;
8 620b: df,08                je    6215               if (R30 == 0) goto 6215;
//  R47 bit 4 OFF (Air Management 2)                                                  //
8 620d: 71,ef,47             an2b  R47,ef             [Flags_47] &= ef;    
//  R47 bit 3 OFF (Air Management 1)                                                  //
8 6210: 71,f7,47             an2b  R47,f7             [Flags_47] &= f7;    
8 6213: 27,e3                sjmp  61f8               goto 61f8;           

8 6215: a3,f6,2c,38          ldw   R38,[Rf6+2c]       R38 = [Sc0030];      
8 6219: 4b,f6,2e,38,3a       sb3w  R3a,R38,[Rf6+2e]   R3a = R38 - [Sc0031];
8 621e: db,02                jc    6222               if (R3a >= 0) goto 6222;
8 6220: 01,3a                clrw  R3a                R3a = 0;             

6222 - Sub 8 6222:
8 6222: 8b,74,de,3a          cmpw  R3a,[R74+de]                            
8 6226: d1,05                jleu  622d               if ((uns) R3a <= [Load]) goto 622d;
8 6228: 91,02,29             orrb  R29,2              [Flags_29] |= 2;     
8 622b: 20,09                sjmp  6236               goto 6236;           

622d - Sub 8 622d:
8 622d: 8b,74,de,38          cmpw  R38,[R74+de]                            
8 6231: db,03                jc    6236               if ((uns) R38 >= [Load]) goto 6236;
8 6233: 71,fd,29             an2b  R29,fd             [Flags_29] &= fd;    
8 6236: 3f,a1,10             jb    B7,Ra1,6249        if (B7_[a1_Flags]) goto 6249;
8 6239: 37,25,0d             jnb   B7,R25,6249        if (!B7_[Flags_25]) goto 6249;
//  93B6                                                                              //
8 623c: 45,0e,00,f6,30       ad3w  R30,Rf6,e          R30 = St0001;        
8 6241: ef,0b,d5             call  374f               Check_Timers();      
8 6244: db,03                jc    6249               if (R30 > ffff) goto 6249;
8 6246: 32,e7,0b             jnb   B2,Re7,6254        if (!B2_[Flag_e7]) goto 6254;
8 6249: 71,bf,25             an2b  R25,bf             [Flags_25] &= bf;    

624c - Sub 8 624c:
8 624c: 71,ef,47             an2b  R47,ef             [Flags_47] &= ef;    
//  R47 bit 3 OFF (Air Management 1)                                                  //
8 624f: 71,f7,47             an2b  R47,f7             [Flags_47] &= f7;    
8 6252: 20,60                sjmp  62b4               goto Sub0375;        

6254 - Sub 8 6254:
8 6254: 45,26,00,f6,30       ad3w  R30,Rf6,26         R30 = St0002;        
8 6259: ef,f3,d4             call  374f               Check_Timers();      
8 625c: db,4a                jc    62a8               if (R30 > ffff) goto 62a8;
8 625e: 9b,f6,1f,c8          cmpb  Rc8,[Rf6+1f]                            
8 6262: d9,0b                jgtu  626f               if ((uns) [Atmr1] > [Sc0025]) goto 626f;
8 6264: 99,01,d0             cmpb  Rd0,1                                   
8 6267: d7,06                jne   626f               if ([Apt] != 1) goto 626f;
//  timer?                                                                            //
8 6269: 9b,f6,2b,cb          cmpb  Rcb,[Rf6+2b]                            
8 626d: d3,39                jnc   62a8               if ((uns) [Awotmr] < [Sc0029]) goto 62a8;
8 626f: 33,eb,0a             jnb   B3,Reb,627c        if (!B3_[Flags_eb]) goto 627c;
//  138 timer?                                                                        //
8 6272: b3,72,b8,38          ldb   R38,[R72+b8]       R38 = [Ctatmr];      
8 6276: 9b,f6,1e,38          cmpb  R38,[Rf6+1e]                            
8 627a: db,2c                jc    62a8               if ((uns) R38 >= [Sc0024]) goto 62a8;
8 627c: 32,eb,10             jnb   B2,Reb,628f        if (!B2_[Flags_eb]) goto 628f;
//  137 timer?                                                                        //
8 627f: b3,72,b7,38          ldb   R38,[R72+b7]       R38 = [Hmtmr];       
8 6283: 9b,f6,20,38          cmpb  R38,[Rf6+20]                            
8 6287: d9,06                jgtu  628f               if ((uns) R38 > [Sc0026]) goto 628f;
8 6289: 9b,f6,1f,c8          cmpb  Rc8,[Rf6+1f]                            
8 628d: d1,19                jleu  62a8               if ((uns) [Atmr1] <= [Sc0025]) goto 62a8;
8 628f: 91,40,25             orrb  R25,40             [Flags_25] |= 40;    
//  RCE timer?                                                                        //
8 6292: 9b,f6,37,ce          cmpb  Rce,[Rf6+37]                            
8 6296: d9,b4                jgtu  624c               if ((uns) [Mfatmr] > [Sc0036]) goto 624c;
8 6298: 39,29,08             jb    B1,R29,62a3        if (B1_[Flags_29]) goto 62a3;
//  timer?                                                                            //
8 629b: 9b,f6,30,cd          cmpb  Rcd,[Rf6+30]                            
8 629f: d1,02                jleu  62a3               if ((uns) [Nactmr] <= [Sc0032]) goto 62a3;
8 62a1: 27,a9                sjmp  624c               goto 624c;           

62a3 - Sub 8 62a3:
8 62a3: 71,ef,47             an2b  R47,ef             [Flags_47] &= ef;    
8 62a6: 20,09                sjmp  62b1               goto 62b1;           

8 62a8: 91,80,ca             orrb  Rca,80             [Flag_ca] |= 80;     
8 62ab: 71,bf,25             an2b  R25,bf             [Flags_25] &= bf;    
//  R47 bit 4 ON (Air Management 2)                                                   //
8 62ae: 91,10,47             orrb  R47,10             [Flags_47] |= 10;    

62b1 - Sub 8 62b1:
8 62b1: 91,08,47             orrb  R47,8              [Flags_47] |= 8;     

Sub0375:
8 62b4: f0                   ret                      return;              

Upd_HiFan:
8 62b5: 9b,f6,39,00          cmpb  0,[Rf6+39]                              
//  return if h/w not present                                                         //
8 62b9: df,79                je    6334               if (0 == [EcadHP]) goto 6334;
//  ROM 93E2 - ECADECT                                                                //
8 62bb: 9b,f6,3a,b0          cmpb  Rb0,[Rf6+3a]                            
8 62bf: d6,05                jge   62c6               if ((sig) [ECT] >= [ECADQ1]) goto 62c6;
//  set ECADQ1                                                                        //
8 62c1: 91,40,ca             orrb  Rca,40             [Flag_ca] |= 40;     
8 62c4: 20,09                sjmp  62cf               goto 62cf;           

62c6 - Sub 8 62c6:
8 62c6: 9b,f6,3d,b0          cmpb  Rb0,[Rf6+3d]                            
8 62ca: da,03                jle   62cf               if ((sig) [ECT] <= [Sc0038]) goto 62cf;
//  clr ECADQ1                                                                        //
8 62cc: 71,bf,ca             an2b  Rca,bf             [Flag_ca] &= bf;     

62cf - Sub 8 62cf:
8 62cf: b3,74,21,42          ldb   R42,[R74+21]       R42 = [N_byte];      
//  93E3 - ECADN                                                                      //
8 62d3: 9b,f6,3b,42          cmpb  R42,[Rf6+3b]                            
8 62d7: d1,05                jleu  62de               if ((uns) R42 <= [ECadn]) goto 62de;
//  set ECADQ2                                                                        //
8 62d9: 91,20,ca             orrb  Rca,20             [Flag_ca] |= 20;     
8 62dc: 20,09                sjmp  62e7               goto 62e7;           

62de - Sub 8 62de:
8 62de: 9b,f6,3e,42          cmpb  R42,[Rf6+3e]                            
8 62e2: db,03                jc    62e7               if ((uns) R42 >= [EDNHYS]) goto 62e7;
//  clr ECADQ2                                                                        //
8 62e4: 71,df,ca             an2b  Rca,df             [Flag_ca] &= df;     

62e7 - Sub 8 62e7:
8 62e7: b3,74,3f,30          ldb   R30,[R74+3f]       R30 = [Mph_FiltH];   
//  93E4 - ECADVS                                                                     //
8 62eb: 9b,f6,3c,30          cmpb  R30,[Rf6+3c]                            
8 62ef: d1,05                jleu  62f6               if ((uns) R30 <= [ECADVS]) goto 62f6;
//  set ECADQ3                                                                        //
8 62f1: 91,10,ca             orrb  Rca,10             [Flag_ca] |= 10;     
8 62f4: 20,09                sjmp  62ff               goto 62ff;           

62f6 - Sub 8 62f6:
8 62f6: 9b,f6,3f,30          cmpb  R30,[Rf6+3f]                            
8 62fa: db,03                jc    62ff               if ((uns) R30 >= [EDVSHYS]) goto 62ff;
//  clr ECADQ3                                                                        //
8 62fc: 71,ef,ca             an2b  Rca,ef             [Flag_ca] &= ef;     
8 62ff: 51,b8,c5,42          an3b  R42,Rc5,b8         R42 = [Fmem_flags] & b8;
8 6303: d7,2c                jne   6331               if (R42 != 0) goto 6331;
//  9E65 thermactor present switch = 1.0                                              //
8 6305: b3,fe,0b,42          ldb   R42,[Rfe+b]        R42 = [Thrmhp];      
8 6309: 99,01,42             cmpb  R42,1                                   
//  jmp if no Thermactor present                                                      //
8 630c: d7,03                jne   6311               if (R42 != 1) goto 6311;
//  jmp if not USAFLG                                                                 //
8 630e: 37,ca,0f             jnb   B7,Rca,6320        if (!B7_[Flag_ca]) goto 6320;

6311 - Sub 8 6311:
8 6311: 45,40,00,f6,30       ad3w  R30,Rf6,40         R30 = EDTM3;         
8 6316: ef,36,d4             call  374f               Check_Timers();      
8 6319: d3,16                jnc   6331               if (R30 <= ffff) goto 6331;
8 631b: 98,42,00             cmpb  0,R42                                   
8 631e: d7,11                jne   6331               if (0 != R42) goto 6331;

6320 - Sub 8 6320:
8 6320: 32,df,0e             jnb   B2,Rdf,6331        if (!B2_Rdf) goto 6331;
//  jmp if not ECADQ1                                                                 //
8 6323: 36,ca,0b             jnb   B6,Rca,6331        if (!B6_[Flag_ca]) goto 6331;
//  jmp if not ECADQ2                                                                 //
8 6326: 35,ca,08             jnb   B5,Rca,6331        if (!B5_[Flag_ca]) goto 6331;
//  jmp if not ECADQ3                                                                 //
8 6329: 34,ca,05             jnb   B4,Rca,6331        if (!B4_[Flag_ca]) goto 6331;
//  R47 bit 6 OFF (Fan)HI FAN                                                         //
8 632c: 71,bf,47             an2b  R47,bf             [Flags_47] &= bf;    
8 632f: 20,03                sjmp  6334               goto 6334;           

6331 - Sub 8 6331:
8 6331: 91,40,47             orrb  R47,40             [Flags_47] |= 40;    
8 6334: f0                   ret                      return;              

Upd_canpTm:
8 6335: b3,f6,45,14          ldb   R14,[Rf6+45]       R14 = [Sc0039];      
8 6339: 98,14,b0             cmpb  Rb0,R14                                 
8 633c: da,03                jle   6341               if ((sig) [ECT] <= R14) goto 6341;
8 633e: 71,f7,ed             an2b  Red,f7             [Flags_ed] &= f7;    
8 6341: 7b,f6,46,14          sb2b  R14,[Rf6+46]       R14 -= [Sc0040];     
8 6345: 98,14,b0             cmpb  Rb0,R14                                 
8 6348: d6,03                jge   634d               if ((sig) [ECT] >= R14) goto 634d;
8 634a: 91,08,ed             orrb  Red,8              [Flags_ed] |= 8;     
8 634d: 71,bf,e9             an2b  Re9,bf             [Flags_e9] &= bf;    
//  93F6 - Canister purge hot startup delay time.                                     //
8 6350: 45,4e,00,f6,30       ad3w  R30,Rf6,4e         R30 = St0003;        
8 6355: ef,f7,d3             call  374f               Check_Timers();      
8 6358: d3,02                jnc   635c               if (R30 <= ffff) goto 635c;
8 635a: 20,59                sjmp  63b5               goto 63b5;           

8 635c: 33,ed,56             jnb   B3,Red,63b5        if (!B3_[Flags_ed]) goto 63b5;
//  timer?                                                                            //
8 635f: 9b,f6,48,cd          cmpb  Rcd,[Rf6+48]                            
8 6363: d3,50                jnc   63b5               if ((uns) [Nactmr] < [Sc0042]) goto 63b5;
8 6365: 32,ee,06             jnb   B2,Ree,636e        if (!B2_[Flags_ee]) goto 636e;
8 6368: 9b,f6,47,00          cmpb  0,[Rf6+47]                              
8 636c: df,47                je    63b5               if (0 == [Sc0041]) goto 63b5;

636e - Sub 8 636e:
8 636e: 45,ca,02,fa,32       ad3w  R32,Rfa,2ca        R32 = Fc041;         
8 6373: a0,a2,34             ldw   R34,Ra2            R34 = RAM;           
8 6376: 09,01,34             shlw  R34,1              R34 = R34 * 2;       
8 6379: d3,03                jnc   637e               if (R34 * 2 <= ffff) goto 637e;
8 637b: b1,ff,35             ldb   R35,ff             R35 = ff;            
8 637e: b0,35,34             ldb   R34,R35            R34 = R35;           
8 6381: ef,33,d2             call  35b7               UUbyteLu();          
8 6384: 98,38,00             cmpb  0,R38                                   
8 6387: df,2c                je    63b5               if (0 == R38) goto 63b5;
8 6389: b0,38,40             ldb   R40,R38            R40 = R38;           
//  Table 9A5A - Canister Purge Duty Cycle Multiplier, X -input = PRGTMR. Y -output = Duty Cycle Multiplier.  //
8 638c: 45,b2,02,fa,32       ad3w  R32,Rfa,2b2        R32 = Fc039;         
//  149 - timer Canister Purge Timer - cannister purge accumulation time in seconds   //
8 6391: b3,72,c9,34          ldb   R34,[R72+c9]       R34 = [Prgtmr];      
8 6395: ef,1f,d2             call  35b7               UUbyteLu();          
8 6398: 7c,38,40             ml2b  R40,R38            R40 *= R38;          
8 639b: 09,01,40             shlw  R40,1              R40 = R40 * 2;       
//  Table 9A66 - Canister Purge Duty Cycle Multiplier, X -input = CPRGTMR, Y -output = Duty Cycle Multiplier.  //
8 639e: 45,be,02,fa,32       ad3w  R32,Rfa,2be        R32 = Fc040;         
//  14A - timer?                                                                      //
8 63a3: b3,72,ca,34          ldb   R34,[R72+ca]       R34 = [Cprgtmr];     
8 63a7: ef,0d,d2             call  35b7               UUbyteLu();          
8 63aa: 7c,41,38             ml2b  R38,R41            R38 *= R41;          
8 63ad: 08,07,38             shrw  R38,7              R38 = R38 / 80;      
8 63b0: 91,40,ef             orrb  Ref,40             [Flags_ef] |= 40;    
8 63b3: 20,09                sjmp  63be               goto 63be;           

8 63b5: 11,38                clrb  R38                R38 = 0;             
8 63b7: 71,bf,ef             an2b  Ref,bf             [Flags_ef] &= bf;    
//  zero 14A - timer - Current Purge on time.                                         //
8 63ba: c7,72,ca,00          stb   [R72+ca],0         [Cprgtmr] = 0;       
8 63be: c7,72,ac,38          stb   [R72+ac],R38       [Purgdc] = R38;      
8 63c2: 98,00,38             cmpb  R38,0                                   
8 63c5: df,03                je    63ca               if (R38 == 0) goto Upd_canP;
8 63c7: 91,40,e9             orrb  Re9,40             [Flags_e9] |= 40;    

Upd_canP:
8 63ca: b1,a3,38             ldb   R38,a3             R38 = a3;            
//  12E - PURGE PERIOD                                                                //
8 63cd: c7,72,ae,38          stb   [R72+ae],R38       [Purge_period] = R38;
//  12C - PURGDC - Canister Purge Duty Cycle.                                         //
8 63d1: 7f,72,ac,38          ml2b  R38,[R72+ac]       R38 *= [Purgdc];     
8 63d5: 09,01,38             shlw  R38,1              R38 = R38 * 2;       
//  12D - PURG ON TIME                                                                //
8 63d8: c7,72,ad,39          stb   [R72+ad],R39       [Purg_on_time] = R39;
8 63dc: f0                   ret                      return;              

Update_AC:
8 63dd: b3,f6,5a,42          ldb   R42,[Rf6+5a]       R42 = [Sc0048];      
8 63e1: 98,b0,42             cmpb  R42,Rb0                                 
8 63e4: d6,05                jge   63eb               if ((sig) R42 >= [ECT]) goto 63eb;
8 63e6: 91,40,eb             orrb  Reb,40             [Flags_eb] |= 40;    
8 63e9: 20,26                sjmp  6411               goto 6411;           

8 63eb: 7b,f6,5b,42          sb2b  R42,[Rf6+5b]       R42 -= [Sc0049];     
8 63ef: 98,b0,42             cmpb  R42,Rb0                                 
8 63f2: da,03                jle   63f7               if ((sig) R42 <= [ECT]) goto 63f7;
8 63f4: 71,bf,eb             an2b  Reb,bf             [Flags_eb] &= bf;    
8 63f7: a3,f6,5c,42          ldw   R42,[Rf6+5c]       R42 = [Sc0050];      
8 63fb: 88,ae,42             cmpw  R42,Rae                                 
8 63fe: d1,05                jleu  6405               if ((uns) R42 <= [Rpmx4]) goto 6405;
8 6400: 91,20,eb             orrb  Reb,20             [Flags_eb] |= 20;    
8 6403: 20,0c                sjmp  6411               goto 6411;           

8 6405: 67,f6,5e,42          ad2w  R42,[Rf6+5e]       R42 += [Sc0051];     
8 6409: 88,ae,42             cmpw  R42,Rae                                 
8 640c: db,03                jc    6411               if ((uns) R42 >= [Rpmx4]) goto 6411;
8 640e: 71,df,eb             an2b  Reb,df             [Flags_eb] &= df;    

6411 - Sub 8 6411:
8 6411: 37,ee,3a             jnb   B7,Ree,644e        if (!B7_[Flags_ee]) goto 644e;
8 6414: 3e,eb,03             jb    B6,Reb,641a        if (B6_[Flags_eb]) goto 641a;
8 6417: 35,eb,02             jnb   B5,Reb,641c        if (!B5_[Flags_eb]) goto 641c;
8 641a: 20,25                sjmp  6441               goto 6441;           

8 641c: 9b,f6,53,c8          cmpb  Rc8,[Rf6+53]                            
8 6420: db,02                jc    6424               if ((uns) [Atmr1] >= [Sc0043]) goto 6424;
8 6422: 20,1d                sjmp  6441               goto 6441;           

8 6424: b3,f6,54,42          ldb   R42,[Rf6+54]       R42 = [Sc0044];      
//  BIFLG = If equal to 1, Brake is on.                                               //
8 6428: 31,ea,08             jnb   B1,Rea,6433        if (!B1_[Flags_ea]) goto 6433;
//  213 - A/C Clutch Brake Timer (sec)                                                //
8 642b: 9b,74,95,42          cmpb  R42,[R74+95]                            
8 642f: d1,02                jleu  6433               if ((uns) R42 <= [Acbtmr]) goto 6433;
8 6431: 20,0e                sjmp  6441               goto 6441;           

8 6433: b3,f6,55,42          ldb   R42,[Rf6+55]       R42 = [Sc0045];      
//  215 - A/C Clutch WOT Cutout Timer (sec)                                           //
8 6437: 9b,74,97,42          cmpb  R42,[R74+97]                            
8 643b: d1,02                jleu  643f               if ((uns) R42 <= [Wcotmr]) goto 643f;
8 643d: 20,02                sjmp  6441               goto 6441;           

8 643f: 20,18                sjmp  6459               goto 6459;           

8 6441: a3,f6,64,42          ldw   R42,[Rf6+64]       R42 = [Sc0054];      
8 6445: 33,ea,06             jnb   B3,Rea,644e        if (!B3_[Flags_ea]) goto 644e;
//  216 - A/C CLUTCH TRANSITION TIMER                                                 //
8 6448: 8b,74,98,42          cmpw  R42,[R74+98]                            
8 644c: d9,0b                jgtu  6459               if ((uns) R42 > [Acctmr]) goto 6459;

644e - Sub 8 644e:
8 644e: 91,40,46             orrb  R46,40             [IO_Port_State] |= 40;
8 6451: 71,f7,ea             an2b  Rea,f7             [Flags_ea] &= f7;    
8 6454: 71,fb,ea             an2b  Rea,fb             [Flags_ea] &= fb;    
8 6457: 20,32                sjmp  648b               goto 648b;           

8 6459: a3,f6,0a,42          ldw   R42,[Rf6+a]        R42 = [SSFCTR];      
//  3A8 timer?                                                                        //
8 645d: 8b,76,2e,42          cmpw  R42,[R76+2e]                            
8 6461: db,28                jc    648b               if ((uns) R42 >= [A3CTMR]) goto 648b;
8 6463: a3,f6,56,42          ldw   R42,[Rf6+56]       R42 = [Sc0046];      
//  216 - A/C CLUTCH TRANSITION TIMER                                                 //
8 6467: 8b,74,98,42          cmpw  R42,[R74+98]                            
8 646b: d9,1e                jgtu  648b               if ((uns) R42 > [Acctmr]) goto 648b;
8 646d: 37,d0,0a             jnb   B7,Rd0,647a        if (!B7_[Apt]) goto 647a;
8 6470: a3,f6,58,42          ldw   R42,[Rf6+58]       R42 = [Sc0047];      
//  218 - A/C CLUTCH TURN -ON DELAY TIMER (msec resolution)                           //
8 6474: 8b,74,9a,42          cmpw  R42,[R74+9a]                            
8 6478: d9,0b                jgtu  6485               if ((uns) R42 > [Acitmr]) goto 6485;

647a - Sub 8 647a:
8 647a: 71,bf,46             an2b  R46,bf             [IO_Port_State] &= bf;
8 647d: 91,08,ea             orrb  Rea,8              [Flags_ea] |= 8;     
8 6480: 71,fb,ea             an2b  Rea,fb             [Flags_ea] &= fb;    
8 6483: 20,06                sjmp  648b               goto 648b;           

6485 - Sub 8 6485:
8 6485: 3b,ea,03             jb    B3,Rea,648b        if (B3_[Flags_ea]) goto 648b;
//  set ACIFLG - A/C engagement impending flag:1=A/C about to engage - adjust airflow and fuel immediately  //
8 6488: 91,04,ea             orrb  Rea,4              [Flags_ea] |= 4;     
8 648b: f0                   ret                      return;              

Update_fans:
8 648c: 9b,f6,74,00          cmpb  0,[Rf6+74]                              
8 6490: d7,01                jne   6493               if (0 != [Fan_enble]) goto 6493;
8 6492: f0                   ret                      return;              

8 6493: 37,a1,02             jnb   B7,Ra1,6498        if (!B7_[a1_Flags]) goto 6498;
8 6496: 20,c1                sjmp  6559               goto 6559;           

8 6498: 71,df,e9             an2b  Re9,df             [Flags_e9] &= df;    
//   ROM 941F fan high speed temp 2(242DegF)                                          //
8 649b: 9b,f6,77,b0          cmpb  Rb0,[Rf6+77]                            
8 649f: d6,24                jge   64c5               if ((sig) [ECT] >= [Ect_hs2]) goto 64c5;
//   ROM 941E fan high speed temp 1(234DegF)                                          //
8 64a1: 9b,f6,76,b0          cmpb  Rb0,[Rf6+76]                            
8 64a5: de,21                jlt   64c8               if ((sig) [ECT] < [Ect_hs1]) goto 64c8;
8 64a7: b3,74,21,42          ldb   R42,[R74+21]       R42 = [N_byte];      
8 64ab: 9b,f6,78,42          cmpb  R42,[Rf6+78]                            
8 64af: d3,17                jnc   64c8               if ((uns) R42 < [Sc0063]) goto 64c8;
//  engine load (VE? )                                                                //
8 64b1: a3,74,de,42          ldw   R42,[R74+de]       R42 = [Load];        
8 64b5: 8b,f6,7a,42          cmpw  R42,[Rf6+7a]                            
8 64b9: d3,0d                jnc   64c8               if ((uns) R42 < [Sc0065]) goto 64c8;
//  2BD - vehicle speed filtered(1) (MPH) 2BC is 8.8 format                           //
8 64bb: b3,74,3f,42          ldb   R42,[R74+3f]       R42 = [Mph_FiltH];   
8 64bf: 9b,f6,79,42          cmpb  R42,[Rf6+79]                            
8 64c3: d9,03                jgtu  64c8               if ((uns) R42 > [Sc0064]) goto 64c8;
8 64c5: 91,20,e9             orrb  Re9,20             [Flags_e9] |= 20;    
8 64c8: 35,e9,0d             jnb   B5,Re9,64d8        if (!B5_[Flags_e9]) goto 64d8;
8 64cb: b3,f6,71,40          ldb   R40,[Rf6+71]       R40 = [Sc0061];      
//  timer?                                                                            //
8 64cf: 9b,72,ce,40          cmpb  R40,[R72+ce]                            
8 64d3: d9,03                jgtu  64d8               if ((uns) R40 > [Edftmr]) goto 64d8;
8 64d5: 91,08,e9             orrb  Re9,8              [Flags_e9] |= 8;     

64d8 - Sub 8 64d8:
8 64d8: b3,f6,76,42          ldb   R42,[Rf6+76]       R42 = [Ect_hs1];     
8 64dc: 7b,f6,6d,42          sb2b  R42,[Rf6+6d]       R42 -= [Sc0057];     
8 64e0: 98,b0,42             cmpb  R42,Rb0                                 
8 64e3: da,03                jle   64e8               if ((sig) R42 <= [ECT]) goto 64e8;
8 64e5: 71,f7,e9             an2b  Re9,f7             [Flags_e9] &= f7;    

64e8 - Sub 8 64e8:
8 64e8: 9b,f6,6c,b0          cmpb  Rb0,[Rf6+6c]                            
8 64ec: da,03                jle   64f1               if ((sig) [ECT] <= [Fan_temp]) goto 64f1;
8 64ee: 91,04,e9             orrb  Re9,4              [Flags_e9] |= 4;     

64f1 - Sub 8 64f1:
8 64f1: b3,f6,6c,42          ldb   R42,[Rf6+6c]       R42 = [Fan_temp];    
8 64f5: 7b,f6,6e,42          sb2b  R42,[Rf6+6e]       R42 -= [Sc0058];     
8 64f9: 98,b0,42             cmpb  R42,Rb0                                 
8 64fc: da,03                jle   6501               if ((sig) R42 <= [ECT]) goto 6501;
8 64fe: 71,fb,e9             an2b  Re9,fb             [Flags_e9] &= fb;    
8 6501: 33,e9,09             jnb   B3,Re9,650d        if (!B3_[Flags_e9]) goto 650d;
//  941D fan high speed enable                                                        //
8 6504: b3,f6,75,40          ldb   R40,[Rf6+75]       R40 = [Hedfhp];      
8 6508: 99,01,40             cmpb  R40,1                                   
8 650b: df,44                je    6551               if (R40 == 1) goto 6551;
8 650d: b3,f6,6f,42          ldb   R42,[Rf6+6f]       R42 = [Sc0059];      
8 6511: 7b,f6,70,42          sb2b  R42,[Rf6+70]       R42 -= [Sc0060];     
//  2BD - vehicle speed filtered(1) (MPH) 2BC is 8.8 format                           //
8 6515: 9b,74,3f,42          cmpb  R42,[R74+3f]                            
8 6519: d1,05                jleu  6520               if ((uns) R42 <= [Mph_FiltH]) goto 6520;
8 651b: 33,ea,02             jnb   B3,Rea,6520        if (!B3_[Flags_ea]) goto 6520;
8 651e: 20,06                sjmp  6526               goto 6526;           

8 6520: 3a,e9,03             jb    B2,Re9,6526        if (B2_[Flags_e9]) goto 6526;
8 6523: 37,c5,04             jnb   B7,Rc5,652a        if (!B7_[Fmem_flags]) goto 652a;

6526 - Sub 8 6526:
8 6526: 71,9f,47             an2b  R47,9f             [Flags_47] &= 9f;    
8 6529: f0                   ret                      return;              

8 652a: 3b,ea,0c             jb    B3,Rea,6539        if (B3_[Flags_ea]) goto 6539;
8 652d: a3,f6,72,40          ldw   R40,[Rf6+72]       R40 = [Sc0062];      
//  216 - timer?                                                                      //
8 6531: 8b,74,98,40          cmpw  R40,[R74+98]                            
8 6535: d9,02                jgtu  6539               if ((uns) R40 > [Acctmr]) goto 6539;
8 6537: 20,14                sjmp  654d               goto 654d;           

8 6539: b3,f6,55,40          ldb   R40,[Rf6+55]       R40 = [Sc0045];      
//  215 timer?                                                                        //
8 653d: 9b,74,97,40          cmpb  R40,[R74+97]                            
8 6541: d9,0a                jgtu  654d               if ((uns) R40 > [Wcotmr]) goto 654d;
8 6543: b3,f6,6f,40          ldb   R40,[Rf6+6f]       R40 = [Sc0059];      
//  2BD - vehicle speed filtered(1) (MPH) 2BC is 8.8 format                           //
8 6547: 9b,74,3f,40          cmpb  R40,[R74+3f]                            
8 654b: db,02                jc    654f               if ((uns) R40 >= [Mph_FiltH]) goto 654f;
8 654d: 20,10                sjmp  655f               goto 655f;           

8 654f: 20,07                sjmp  6558               goto 6558;           

6551 - Sub 8 6551:
8 6551: 71,df,47             an2b  R47,df             [Flags_47] &= df;    
//  R47 bit 6 ON (Fan? )                                                              //
8 6554: 91,40,47             orrb  R47,40             [Flags_47] |= 40;    
8 6557: f0                   ret                      return;              

8 6558: f0                   ret                      return;              

8 6559: 71,f7,e9             an2b  Re9,f7             [Flags_e9] &= f7;    
8 655c: 71,fb,e9             an2b  Re9,fb             [Flags_e9] &= fb;    

655f - Sub 8 655f:
8 655f: 91,20,47             orrb  R47,20             [Flags_47] |= 20;    
//  R47 bit 6 OFF (Fan? )                                                             //
8 6562: 71,bf,47             an2b  R47,bf             [Flags_47] &= bf;    
8 6565: f0                   ret                      return;              

Upd_Thermactor1:
8 6566: b3,fe,0b,30          ldb   R30,[Rfe+b]        R30 = [Thrmhp];      
8 656a: 99,02,30             cmpb  R30,2                                   
//  thermactor present must be 2                                                      //
8 656d: d7,31                jne   65a0               if (R30 != 2) goto 65a0;
8 656f: 3c,c5,2b             jb    B4,Rc5,659d        if (B4_[Fmem_flags]) goto 659d;
8 6572: 3f,a1,28             jb    B7,Ra1,659d        if (B7_[a1_Flags]) goto 659d;
8 6575: 3a,a1,25             jb    B2,Ra1,659d        if (B2_[a1_Flags]) goto 659d;
8 6578: a3,f2,0a,30          ldw   R30,[Rf2+a]        R30 = [Thbpsc];      
//  126 - RATCH=Closed TP                                                             //
8 657c: 67,72,a6,30          ad2w  R30,[R72+a6]       R30 += [TPS_Min__#_was__TPS_Ratch];
8 6580: d3,04                jnc   6586               if (R30 <= ffff) goto 6586;
8 6582: a1,c0,ff,30          ldw   R30,ffc0           R30 = ffc0;          

6586 - Sub 8 6586:
8 6586: 88,30,aa             cmpw  Raa,R30                                 
8 6589: d1,05                jleu  6590               if ((uns) RTP <= R30) goto 6590;
//  R47 bit 3 ON (Air management1)                                                    //
8 658b: 91,08,47             orrb  R47,8              [Flags_47] |= 8;     
8 658e: 20,10                sjmp  65a0               goto 65a0;           

8 6590: 6b,f2,0c,30          sb2w  R30,[Rf2+c]        R30 -= [Thbpsh];     
8 6594: db,02                jc    6598               if (R30 >= 0) goto 6598;
8 6596: 01,30                clrw  R30                R30 = 0;             

6598 - Sub 8 6598:
8 6598: 88,30,aa             cmpw  Raa,R30                                 
8 659b: db,03                jc    65a0               if ((uns) RTP >= R30) goto 65a0;

659d - Sub 8 659d:
8 659d: 71,f7,47             an2b  R47,f7             [Flags_47] &= f7;    
8 65a0: f0                   ret                      return;              

Upd_Air_mgmnt:
8 65a1: b3,fe,0b,30          ldb   R30,[Rfe+b]        R30 = [Thrmhp];      
8 65a5: 99,03,30             cmpb  R30,3                                   
8 65a8: d7,29                jne   65d3               if (R30 != 3) goto 65d3;
//  8E68 - NIAC                                                                       //
8 65aa: a3,f2,0e,30          ldw   R30,[Rf2+e]        R30 = [Niac];        
8 65ae: 88,30,ae             cmpw  Rae,R30                                 
8 65b1: d1,05                jleu  65b8               if ((uns) [Rpmx4] <= R30) goto 65b8;
//  set IACFLG                                                                        //
8 65b3: 91,10,29             orrb  R29,10             [Flags_29] |= 10;    
8 65b6: 20,10                sjmp  65c8               goto 65c8;           

65b8 - Sub 8 65b8:
8 65b8: 6b,f2,10,30          sb2w  R30,[Rf2+10]       R30 -= [Niach];      
8 65bc: db,02                jc    65c0               if (R30 >= 0) goto 65c0;
8 65be: 01,30                clrw  R30                R30 = 0;             
8 65c0: 88,30,ae             cmpw  Rae,R30                                 
8 65c3: db,03                jc    65c8               if ((uns) [Rpmx4] >= R30) goto 65c8;
//  clr IACFLG                                                                        //
8 65c5: 71,ef,29             an2b  R29,ef             [Flags_29] &= ef;    
8 65c8: 3c,29,05             jb    B4,R29,65d0        if (B4_[Flags_29]) goto 65d0;
//  R47 bit 4 OFF (Air management2)                                                   //
8 65cb: 71,ef,47             an2b  R47,ef             [Flags_47] &= ef;    
8 65ce: 20,03                sjmp  65d3               goto 65d3;           

65d0 - Sub 8 65d0:
8 65d0: 91,10,47             orrb  R47,10             [Flags_47] |= 10;    
8 65d3: f0                   ret                      return;              

Set_Timers:
8 65d4: 3d,2b,04             jb    B5,R2b,65db        if (B5_[Flags_2B]) goto 65db;
//  STI input line low timer                                                          //
8 65d7: c7,72,48,00          stb   [R72+48],0         [Tsstil] = 0;        
8 65db: 37,a1,1e             jnb   B7,Ra1,65fc        if (!B7_[a1_Flags]) goto 65fc;
//  Cranking, clear timers                                                            //
8 65de: 11,c8                clrb  Rc8                [Atmr1] = 0;         
8 65e0: 71,bf,24             an2b  R24,bf             [Flags_24] &= bf;    
8 65e3: 11,c9                clrb  Rc9                [Atmr2] = 0;         
8 65e5: 71,df,24             an2b  R24,df             [Flags_24] &= df;    
8 65e8: 11,cd                clrb  Rcd                [Nactmr] = 0;        
8 65ea: 71,fb,24             an2b  R24,fb             [Flags_24] &= fb;    
8 65ed: 11,cb                clrb  Rcb                [Awotmr] = 0;        
8 65ef: 71,df,a1             an2b  Ra1,df             [a1_Flags] &= df;    
8 65f2: c7,72,c9,00          stb   [R72+c9],0         [Prgtmr] = 0;        
8 65f6: c7,72,ce,00          stb   [R72+ce],0         [Edftmr] = 0;        
8 65fa: 22,c4                sjmp  68c0               goto 68c0;           

65fc - Sub 8 65fc:
8 65fc: 37,d0,0a             jnb   B7,Rd0,6609        if (!B7_[Apt]) goto 6609;
8 65ff: 91,40,a1             orrb  Ra1,40             [a1_Flags] |= 40;    
8 6602: 71,df,24             an2b  R24,df             [Flags_24] &= df;    
8 6605: 11,cd                clrb  Rcd                [Nactmr] = 0;        
8 6607: 20,0a                sjmp  6613               goto 6613;           

6609 - Sub 8 6609:
8 6609: 91,20,24             orrb  R24,20             [Flags_24] |= 20;    
8 660c: 71,bf,a1             an2b  Ra1,bf             [a1_Flags] &= bf;    
8 660f: c7,72,aa,00          stb   [R72+aa],0         [Cttmr] = 0;         

6613 - Sub 8 6613:
8 6613: 30,24,0d             jnb   B0,R24,6623        if (!B0_[Flags_24]) goto 6623;
8 6616: 91,04,24             orrb  R24,4              [Flags_24] |= 4;     
8 6619: 99,fe,cb             cmpb  Rcb,fe                                  
8 661c: d3,03                jnc   6621               if ((uns) [Awotmr] < fe) goto 6621;
8 661e: 71,fb,24             an2b  R24,fb             [Flags_24] &= fb;    
8 6621: 20,05                sjmp  6628               goto 6628;           

6623 - Sub 8 6623:
8 6623: 71,fb,24             an2b  R24,fb             [Flags_24] &= fb;    
8 6626: 11,cb                clrb  Rcb                [Awotmr] = 0;        
8 6628: 9b,fe,06,b0          cmpb  Rb0,[Rfe+6]                             
8 662c: da,08                jle   6636               if ((sig) [ECT] <= [Sc0150]) goto 6636;
8 662e: 3e,24,05             jb    B6,R24,6636        if (B6_[Flags_24]) goto 6636;
8 6631: 91,40,24             orrb  R24,40             [Flags_24] |= 40;    
//  RC9 is some kind of timer                                                         //
8 6634: 11,c9                clrb  Rc9                [Atmr2] = 0;         

6636 - Sub 8 6636:
8 6636: 35,47,04             jnb   B5,R47,663d        if (!B5_[Flags_47]) goto 663d;
//  zero 14E - timer                                                                  //
8 6639: c7,72,ce,00          stb   [R72+ce],0         [Edftmr] = 0;        
8 663d: a3,fc,38,38          ldw   R38,[Rfc+38]       R38 = [Sc0122];      
8 6641: 88,38,ae             cmpw  Rae,R38                                 
8 6644: db,05                jc    664b               if ((uns) [Rpmx4] >= R38) goto 664b;
8 6646: 91,02,a1             orrb  Ra1,2              [a1_Flags] |= 2;     
8 6649: 20,0c                sjmp  6657               goto 6657;           

8 664b: 67,fc,3a,38          ad2w  R38,[Rfc+3a]       R38 += [Sc0123];     
8 664f: 88,38,ae             cmpw  Rae,R38                                 
8 6652: d1,03                jleu  6657               if ((uns) [Rpmx4] <= R38) goto 6657;
8 6654: 71,fd,a1             an2b  Ra1,fd             [a1_Flags] &= fd;    
8 6657: 71,f7,ef             an2b  Ref,f7             [Flags_ef] &= f7;    
8 665a: 36,26,09             jnb   B6,R26,6666        if (!B6_[Flags_26]) goto 6666;
8 665d: 37,d0,06             jnb   B7,Rd0,6666        if (!B7_[Apt]) goto 6666;
8 6660: 31,a1,03             jnb   B1,Ra1,6666        if (!B1_[a1_Flags]) goto 6666;
8 6663: 91,08,ef             orrb  Ref,8              [Flags_ef] |= 8;     
8 6666: b3,72,c4,34          ldb   R34,[R72+c4]       R34 = [Ctntmr];      
//  FILTER 955A                                                                       //
8 666a: 45,2a,01,f8,32       ad3w  R32,Rf8,12a        R32 = Fc021;         
8 666f: ef,45,cf             call  35b7               UUbyteLu();          
8 6672: 09,05,38             shlw  R38,5              R38 = R38 * 20;      
8 6675: 67,f6,32,38          ad2w  R38,[Rf6+32]       R38 += [Sc0033];     
8 6679: 88,38,ae             cmpw  Rae,R38                                 
8 667c: db,05                jc    6683               if ((uns) [Rpmx4] >= R38) goto 6683;
8 667e: 91,02,24             orrb  R24,2              [Flags_24] |= 2;     
8 6681: 20,0c                sjmp  668f               goto 668f;           

8 6683: 67,f6,34,38          ad2w  R38,[Rf6+34]       R38 += [Sc0034];     
8 6687: 88,38,ae             cmpw  Rae,R38                                 
8 668a: d1,03                jleu  668f               if ((uns) [Rpmx4] <= R38) goto 668f;
8 668c: 71,fd,24             an2b  R24,fd             [Flags_24] &= fd;    
8 668f: 71,fb,e8             an2b  Re8,fb             [Flags_e8] &= fb;    
8 6692: 71,fd,e8             an2b  Re8,fd             [Flags_e8] &= fd;    
8 6695: 91,01,e8             orrb  Re8,1              [Flags_e8] |= 1;     
8 6698: 9b,fe,04,b0          cmpb  Rb0,[Rfe+4]                             
8 669c: da,2c                jle   66ca               if ((sig) [ECT] <= [CThigh]) goto 66ca;
8 669e: 37,d0,29             jnb   B7,Rd0,66ca        if (!B7_[Apt]) goto 66ca;
8 66a1: 3f,e7,26             jb    B7,Re7,66ca        if (B7_[Flag_e7]) goto 66ca;
8 66a4: 31,24,23             jnb   B1,R24,66ca        if (!B1_[Flags_24]) goto 66ca;
8 66a7: 91,04,e8             orrb  Re8,4              [Flags_e8] |= 4;     
8 66aa: 91,02,e8             orrb  Re8,2              [Flags_e8] |= 2;     
8 66ad: 71,fe,e8             an2b  Re8,fe             [Flags_e8] &= fe;    
8 66b0: b3,f4,72,38          ldb   R38,[Rf4+72]       R38 = [Niold];       
8 66b4: 77,f4,73,38          ad2b  R38,[Rf4+73]       R38 += [Drv_rpm];    
8 66b8: d3,03                jnc   66bd               if (R38 <= ff) goto 66bd;
8 66ba: b1,ff,38             ldb   R38,ff             R38 = ff;            
8 66bd: 9b,72,c4,38          cmpb  R38,[R72+c4]                            
8 66c1: d9,07                jgtu  66ca               if ((uns) R38 > [Ctntmr]) goto 66ca;
8 66c3: c7,72,c4,38          stb   [R72+c4],R38       [Ctntmr] = R38;      
8 66c7: 71,fd,e8             an2b  Re8,fd             [Flags_e8] &= fd;    

66ca - Sub 8 66ca:
8 66ca: a3,74,e2,3a          ldw   R3a,[R74+e2]       R3a = [Perload];     
8 66ce: a3,f6,22,38          ldw   R38,[Rf6+22]       R38 = [Sc0027];      
8 66d2: 47,f6,24,38,3c       ad3w  R3c,R38,[Rf6+24]   R3c = R38 + [Sc0028];
8 66d7: d3,03                jnc   66dc               if (R3c <= ffff) goto 66dc;
8 66d9: bd,ff,3c             ldsbw R3c,ff             R3c = (sig)ff;       
8 66dc: 88,3a,3c             cmpw  R3c,R3a                                 
8 66df: d3,0e                jnc   66ef               if ((uns) R3c < R3a) goto 66ef;
8 66e1: 88,3a,38             cmpw  R38,R3a                                 
8 66e4: d1,0c                jleu  66f2               if ((uns) R38 <= R3a) goto 66f2;
//  zero 137 timer?                                                                   //
8 66e6: c7,72,b7,00          stb   [R72+b7],0         [Hmtmr] = 0;         
8 66ea: 71,fb,eb             an2b  Reb,fb             [Flags_eb] &= fb;    
8 66ed: 20,03                sjmp  66f2               goto 66f2;           

8 66ef: 91,04,eb             orrb  Reb,4              [Flags_eb] |= 4;     
8 66f2: 71,7f,ec             an2b  Rec,7f             [Flag_ec] &= 7f;     
//  8FD8                                                                              //
8 66f5: 45,02,00,f4,30       ad3w  R30,Rf4,2          R30 = Mfatm3;        
8 66fa: ef,52,d0             call  374f               Check_Timers();      
8 66fd: db,56                jc    6755               if ((uns) [Atmr1] >= [R30]) goto 6755;
//  WOT flag                                                                          //
8 66ff: 38,d0,53             jb    B0,Rd0,6755        if (B0_[Apt]) goto 6755;
8 6702: 3a,ee,50             jb    B2,Ree,6755        if (B2_[Flags_ee]) goto 6755;
8 6705: 8b,f4,0e,ae          cmpw  Rae,[Rf4+e]                             
8 6709: d1,4a                jleu  6755               if ((uns) [Rpmx4] <= [Mfanlo]) goto 6755;
8 670b: 8b,f4,10,ae          cmpw  Rae,[Rf4+10]                            
8 670f: db,44                jc    6755               if ((uns) [Rpmx4] >= [Mfanhi]) goto 6755;
//  027c - filtered(2) RPM                                                            //
8 6711: 4b,74,fe,ae,38       sb3w  R38,Rae,[R74+fe]   R38 = [Rpmx4] - [RPM_Filt2];
8 6716: db,02                jc    671a               if (R38 >= 0) goto 671a;
8 6718: 03,38                negw  R38                R38 = -R38;          
8 671a: 8b,f4,12,38          cmpw  R38,[Rf4+12]                            
8 671e: db,35                jc    6755               if ((uns) R38 >= [Mfasn]) goto 6755;
8 6720: 8b,f4,14,3a          cmpw  R3a,[Rf4+14]                            
8 6724: db,2f                jc    6755               if ((uns) R3a >= [Mfalh]) goto 6755;
8 6726: 37,e7,2c             jnb   B7,Re7,6755        if (!B7_[Flag_e7]) goto 6755;
8 6729: b3,f4,20,38          ldb   R38,[Rf4+20]       R38 = [Mpmnbp];      
8 672d: 77,f4,21,38          ad2b  R38,[Rf4+21]       R38 += [Mpnbph];     
8 6731: d3,03                jnc   6736               if (R38 <= ff) goto 6736;
8 6733: b1,ff,38             ldb   R38,ff             R38 = ff;            

6736 - Sub 8 6736:
8 6736: 9b,74,80,38          cmpb  R38,[R74+80]                            
8 673a: d9,19                jgtu  6755               if ((uns) R38 > RBp) goto 6755;
8 673c: 9b,f2,47,00          cmpb  0,[Rf2+47]                              
8 6740: df,16                je    6758               if (0 == [Vstype]) goto 6758;
8 6742: b3,f2,42,38          ldb   R38,[Rf2+42]       R38 = [Vsmpg];       
8 6746: 77,f2,43,38          ad2b  R38,[Rf2+43]       R38 += [Vsmpgh];     
8 674a: d3,03                jnc   674f               if (R38 <= ff) goto 674f;
8 674c: b1,ff,38             ldb   R38,ff             R38 = ff;            

674f - Sub 8 674f:
8 674f: 9b,74,3f,38          cmpb  R38,[R74+3f]                            
8 6753: d1,03                jleu  6758               if ((uns) R38 <= [Mph_FiltH]) goto 6758;
8 6755: 30,ec,03             jnb   B0,Rec,675b        if (!B0_[Flag_ec]) goto 675b;
8 6758: 91,80,ec             orrb  Rec,80             [Flag_ec] |= 80;     
8 675b: b3,72,c8,38          ldb   R38,[R72+c8]       R38 = [Mfactr];      
8 675f: 30,ee,02             jnb   B0,Ree,6764        if (!B0_[Flags_ee]) goto 6764;
8 6762: 17,38                incb  R38                R38++;               
8 6764: 3f,ec,02             jb    B7,Rec,6769        if (B7_[Flag_ec]) goto 6769;
8 6767: 11,38                clrb  R38                R38 = 0;             
8 6769: c7,72,c8,38          stb   [R72+c8],R38       [Mfactr] = R38;      
8 676d: 9b,f4,16,38          cmpb  R38,[Rf4+16]                            
8 6771: d3,03                jnc   6776               if ((uns) R38 < [Swtcnt]) goto 6776;
8 6773: 91,01,ec             orrb  Rec,1              [Flag_ec] |= 1;      
8 6776: 38,24,55             jb    B0,R24,67ce        if (B0_[Flags_24]) goto 67ce;
8 6779: a3,f4,10,38          ldw   R38,[Rf4+10]       R38 = [Mfanhi];      
8 677d: 67,f4,18,38          ad2w  R38,[Rf4+18]       R38 += [Mfanhh];     
8 6781: 88,38,ae             cmpw  Rae,R38                                 
8 6784: d9,48                jgtu  67ce               if ((uns) [Rpmx4] > R38) goto 67ce;
8 6786: a3,f4,0e,38          ldw   R38,[Rf4+e]        R38 = [Mfanlo];      
8 678a: 6b,f4,1a,38          sb2w  R38,[Rf4+1a]       R38 -= [Mfanlh];     
8 678e: 88,38,ae             cmpw  Rae,R38                                 
8 6791: d3,3b                jnc   67ce               if ((uns) [Rpmx4] < R38) goto 67ce;
8 6793: 8b,f4,1c,3a          cmpw  R3a,[Rf4+1c]                            
8 6797: d3,35                jnc   67ce               if ((uns) R3a < [Mfall]) goto 67ce;
8 6799: a3,f4,14,38          ldw   R38,[Rf4+14]       R38 = [Mfalh];       
8 679d: 67,f4,1e,38          ad2w  R38,[Rf4+1e]       R38 += [Mfalhh];     
8 67a1: d3,03                jnc   67a6               if (R38 <= ffff) goto 67a6;
8 67a3: bd,ff,38             ldsbw R38,ff             R38 = (sig)ff;       
8 67a6: 88,38,3a             cmpw  R3a,R38                                 
8 67a9: d9,23                jgtu  67ce               if ((uns) R3a > R38) goto 67ce;
8 67ab: 37,e7,20             jnb   B7,Re7,67ce        if (!B7_[Flag_e7]) goto 67ce;
8 67ae: 51,a8,c5,34          an3b  R34,Rc5,a8         R34 = [Fmem_flags] & a8;
8 67b2: d7,1a                jne   67ce               if (R34 != 0) goto 67ce;
//  BP - barometric pressure                                                          //
8 67b4: b3,74,80,40          ldb   R40,[R74+80]       R40 = RBp;           
8 67b8: 9b,f4,20,40          cmpb  R40,[Rf4+20]                            
8 67bc: d3,10                jnc   67ce               if ((uns) R40 < [Mpmnbp]) goto 67ce;
8 67be: 9b,f2,47,00          cmpb  0,[Rf2+47]                              
8 67c2: df,10                je    67d4               if (0 == [Vstype]) goto 67d4;
8 67c4: b3,f2,42,38          ldb   R38,[Rf2+42]       R38 = [Vsmpg];       
//  2BD - vehicle speed filtered(1) (MPH) 2BC is 8.8 format                           //
8 67c8: 9b,74,3f,38          cmpb  R38,[R74+3f]                            
8 67cc: d1,06                jleu  67d4               if ((uns) R38 <= [Mph_FiltH]) goto 67d4;

67ce - Sub 8 67ce:
8 67ce: c4,ce,00             stb   Rce,0              [Mfatmr] = 0;        
8 67d1: 71,fe,ec             an2b  Rec,fe             [Flag_ec] &= fe;     
8 67d4: 71,fb,26             an2b  R26,fb             [Flags_26] &= fb;    
8 67d7: 37,d0,06             jnb   B7,Rd0,67e0        if (!B7_[Apt]) goto 67e0;
8 67da: 3f,e7,03             jb    B7,Re7,67e0        if (B7_[Flag_e7]) goto 67e0;
8 67dd: 91,04,26             orrb  R26,4              [Flags_26] |= 4;     
8 67e0: 11,38                clrb  R38                R38 = 0;             
8 67e2: 30,ec,12             jnb   B0,Rec,67f7        if (!B0_[Flag_ec]) goto 67f7;
8 67e5: b3,f4,22,38          ldb   R38,[Rf4+22]       R38 = [Mfarmp];      
8 67e9: 77,74,f4,38          ad2b  R38,[R74+f4]       R38 += [Mfamul];     
8 67ed: db,05                jc    67f4               if (R38 > ff) goto 67f4;
8 67ef: 99,80,38             cmpb  R38,80                                  
8 67f2: d1,03                jleu  67f7               if ((uns) R38 <= 80) goto 67f7;
8 67f4: b1,80,38             ldb   R38,80             R38 = 80;            
8 67f7: c7,74,f4,38          stb   [R74+f4],R38       [Mfamul] = R38;      
8 67fb: 30,29,04             jnb   B0,R29,6802        if (!B0_[Flags_29]) goto 6802;
//  High load timer - 1/8 seconds under high load so far                              //
8 67fe: c7,72,cc,00          stb   [R72+cc],0         [Hltmr] = 0;         
8 6802: 3a,ee,08             jb    B2,Ree,680d        if (B2_[Flags_ee]) goto 680d;
8 6805: 3b,27,05             jb    B3,R27,680d        if (B3_[Flags_27]) goto 680d;
8 6808: 91,80,27             orrb  R27,80             [Flags_27] |= 80;    
8 680b: 20,07                sjmp  6814               goto 6814;           

8 680d: 71,7f,27             an2b  R27,7f             [Flags_27] &= 7f;    
//  zero timer?                                                                       //
8 6810: c7,74,e8,00          stb   [R74+e8],0         [Lestmr1] = 0;       
8 6814: 3a,ee,08             jb    B2,Ree,681f        if (B2_[Flags_ee]) goto 681f;
8 6817: 38,27,05             jb    B0,R27,681f        if (B0_[Flags_27]) goto 681f;
8 681a: 91,40,27             orrb  R27,40             [Flags_27] |= 40;    
8 681d: 20,07                sjmp  6826               goto 6826;           

8 681f: 71,bf,27             an2b  R27,bf             [Flags_27] &= bf;    
//  zero timer?                                                                       //
8 6822: c7,74,e9,00          stb   [R74+e9],0         [Lestmr2] = 0;       

6826 - Sub 8 6826:
8 6826: b3,74,e8,14          ldb   R14,[R74+e8]       R14 = [Lestmr1];     
8 682a: 9b,f6,36,14          cmpb  R14,[Rf6+36]                            
8 682e: d3,03                jnc   6833               if ((uns) R14 < [Sc0035]) goto 6833;
8 6830: 91,02,ed             orrb  Red,2              [Flags_ed] |= 2;     

6833 - Sub 8 6833:
8 6833: b3,74,e9,14          ldb   R14,[R74+e9]       R14 = [Lestmr2];     
8 6837: 9b,f6,36,14          cmpb  R14,[Rf6+36]                            
8 683b: d3,03                jnc   6840               if ((uns) R14 < [Sc0035]) goto 6840;
8 683d: 91,01,ed             orrb  Red,1              [Flags_ed] |= 1;     
8 6840: b3,f6,38,14          ldb   R14,[Rf6+38]       R14 = [Sc0037];      
8 6844: 98,00,14             cmpb  R14,0                                   
8 6847: df,0c                je    6855               if (R14 == 0) goto 6855;
8 6849: 33,27,03             jnb   B3,R27,684f        if (!B3_[Flags_27]) goto 684f;
8 684c: 71,fd,ed             an2b  Red,fd             [Flags_ed] &= fd;    
8 684f: 30,27,03             jnb   B0,R27,6855        if (!B0_[Flags_27]) goto 6855;
8 6852: 71,fe,ed             an2b  Red,fe             [Flags_ed] &= fe;    
8 6855: 33,ea,05             jnb   B3,Rea,685d        if (!B3_[Flags_ea]) goto 685d;
8 6858: 38,ea,02             jb    B0,Rea,685d        if (B0_[Flags_ea]) goto 685d;
8 685b: 20,06                sjmp  6863               goto 6863;           

8 685d: 3b,ea,0a             jb    B3,Rea,686a        if (B3_[Flags_ea]) goto 686a;
8 6860: 30,ea,07             jnb   B0,Rea,686a        if (!B0_[Flags_ea]) goto 686a;

6863 - Sub 8 6863:
8 6863: c3,74,98,00          stw   [R74+98],0         [Acctmr] = 0;        
8 6867: 95,01,ea             xrb   Rea,1              [Flags_ea] ^= 1;     

686a - Sub 8 686a:
8 686a: a3,72,a6,36          ldw   R36,[R72+a6]       R36 = [TPS_Min__#_was__TPS_Ratch];
8 686e: 47,f6,60,36,42       ad3w  R42,R36,[Rf6+60]   R42 = R36 + [Sc0052];
//  RAA is Throttle position                                                          //
8 6873: 88,aa,42             cmpw  R42,Raa                                 
8 6876: db,03                jc    687b               if ((uns) R42 >= RTP) goto 687b;
8 6878: 91,80,eb             orrb  Reb,80             [Flags_eb] |= 80;    
8 687b: 6b,f6,62,42          sb2w  R42,[Rf6+62]       R42 -= [Sc0053];     
//  RAA is Throttle position                                                          //
8 687f: 88,aa,42             cmpw  R42,Raa                                 
8 6882: d1,03                jleu  6887               if ((uns) R42 <= RTP) goto 6887;
8 6884: 71,7f,eb             an2b  Reb,7f             [Flags_eb] &= 7f;    
8 6887: 3f,eb,06             jb    B7,Reb,6890        if (B7_[Flags_eb]) goto 6890;
//  zero 214 - timer?                                                                 //
8 688a: c7,74,96,00          stb   [R74+96],0         [Acwtmr] = 0;        
8 688e: 20,0f                sjmp  689f               goto 689f;           

6890 - Sub 8 6890:
8 6890: b3,74,96,42          ldb   R42,[R74+96]       R42 = [Acwtmr];      
8 6894: 99,ff,42             cmpb  R42,ff                                  
8 6897: d7,06                jne   689f               if (R42 != ff) goto 689f;
8 6899: 15,42                decb  R42                R42--;               
//  set 214 - timer?                                                                  //
8 689b: c7,74,96,42          stb   [R74+96],R42       [Acwtmr] = R42;      

689f - Sub 8 689f:
8 689f: 48,36,aa,34          sb3w  R34,Raa,R36        R34 = RTP - R36;     
8 68a3: db,02                jc    68a7               if (R34 >= 0) goto 68a7;
8 68a5: 01,34                clrw  R34                R34 = 0;             

68a7 - Sub 8 68a7:
8 68a7: 45,56,01,f0,32       ad3w  R32,Rf0,156        R32 = Fn087;         
8 68ac: ef,5d,cd             call  360c               UUWordLu();          
//  214 - timer?                                                                      //
8 68af: 9b,74,96,38          cmpb  R38,[R74+96]                            
8 68b3: d1,04                jleu  68b9               if ((uns) R38 <= [Acwtmr]) goto 68b9;
//  zero 215 timer?                                                                   //
8 68b5: c7,74,97,00          stb   [R74+97],0         [Wcotmr] = 0;        
8 68b9: 30,24,04             jnb   B0,R24,68c0        if (!B0_[Flags_24]) goto 68c0;
//  zero 220 timer?                                                                   //
8 68bc: c7,74,a2,00          stb   [R74+a2],0         [Nwotmr] = 0;        
8 68c0: a3,f6,1c,32          ldw   R32,[Rf6+1c]       R32 = [Sc0023];      
8 68c4: 67,f6,1a,32          ad2w  R32,[Rf6+1a]       R32 += [Sc0022];     
8 68c8: 88,32,ae             cmpw  Rae,R32                                 
8 68cb: d1,05                jleu  68d2               if ((uns) [Rpmx4] <= R32) goto 68d2;
8 68cd: 91,10,eb             orrb  Reb,10             [Flags_eb] |= 10;    
8 68d0: 20,09                sjmp  68db               goto 68db;           

8 68d2: 8b,f6,1c,ae          cmpw  Rae,[Rf6+1c]                            
8 68d6: db,03                jc    68db               if ((uns) [Rpmx4] >= [Sc0023]) goto 68db;
8 68d8: 71,ef,eb             an2b  Reb,ef             [Flags_eb] &= ef;    
8 68db: 37,d0,08             jnb   B7,Rd0,68e6        if (!B7_[Apt]) goto 68e6;
8 68de: 34,eb,05             jnb   B4,Reb,68e6        if (!B4_[Flags_eb]) goto 68e6;
8 68e1: 91,08,eb             orrb  Reb,8              [Flags_eb] |= 8;     
8 68e4: 20,07                sjmp  68ed               goto 68ed;           

68e6 - Sub 8 68e6:
8 68e6: c7,72,b8,00          stb   [R72+b8],0         [Ctatmr] = 0;        
8 68ea: 71,f7,eb             an2b  Reb,f7             [Flags_eb] &= f7;    
8 68ed: 88,00,ae             cmpw  Rae,0                                   
8 68f0: d7,04                jne   68f6               if ([Rpmx4] != 0) goto 68f6;
//  zero 14F timer?                                                                   //
8 68f2: c7,72,cf,00          stb   [R72+cf],0         [Crktmr] = 0;        
8 68f6: 3a,ea,04             jb    B2,Rea,68fd        if (B2_[Flags_ea]) goto 68fd;
//  zero 218 - timer?                                                                 //
8 68f9: c3,74,9a,00          stw   [R74+9a],0         [Acitmr] = 0;        
8 68fd: f0                   ret                      return;              

Update_timers:
8 68fe: a3,72,c0,3c          ldw   R3c,[R72+c0]       R3c = [Eighths_ext]; 
8 6902: a1,b1,69,30          ldw   R30,69b1           R30 = 69b1;          
8 6906: a0,06,36             ldw   R36,R06            R36 = IO_TIMER;      
//  IOTIMER delta time since last mSec                                                //
8 6909: 4b,72,c2,36,38       sb3w  R38,R36,[R72+c2]   R38 = R36 - [Loop_time];
8 690e: 01,3a                clrw  R3a                R3a = 0;             
8 6910: 0d,07,38             shldw R38,7              R38L = R38L * 80;    
//  *128/52083 = 1 mSec                                                               //
8 6913: 8d,73,cb,38          divw  R38,cb73           R38 = R38L / cb73;   
8 6917: 88,00,38             cmpw  R38,0                                   
8 691a: d7,02                jne   691e               if (R38 != 0) goto 691e;
//  < 1 mS passed - return                                                            //
8 691c: 20,92                sjmp  69b0               goto 69b0;           

691e - Sub 8 691e:
8 691e: c7,74,5e,38          stb   [R74+5e],R38       [Bg_timer] = R38;    
//  (remainder IO times*128) + 64 (rounding)                                          //
8 6922: 65,40,00,3a          ad2w  R3a,40             R3a += 40;           
//  return to IOTIMES remainder                                                       //
8 6926: 08,07,3a             shrw  R3a,7              R3a = R3a / 80;      
//  effective time of this update (IOTIME-remainder)                                  //
8 6929: 48,3a,36,32          sb3w  R32,R36,R3a        R32 = R36 - R3a;     
//  set $3e:5, = "new mS"                                                             //
8 692d: b1,20,3e             ldb   R3e,20             R3e = 20;            
//  add new mSs to current mS count                                                   //
8 6930: 74,38,3c             ad2b  R3c,R38            R3c += R38;          
//  R3f +ve if new 1/8 sec                                                            //
8 6933: 59,80,3c,3f          sb3b  R3f,R3c,80         R3f = R3c - 80;      
8 6937: d3,0f                jnc   6948               if (R3f < 0) goto 6948;
//  remainder =- 1/8 sec (in mS)                                                      //
8 6939: b0,3f,3c             ldb   R3c,R3f            R3c = R3f;           
//  = "New 1/8 Sec"                                                                   //
8 693c: 91,40,3e             orrb  R3e,40             R3e |= 40;           
//  1 Sec remainder (in 1/8 secs)                                                     //
8 693f: e0,3d,06             djnz  R3d,6948           R3d--; if (R3d !=  0) goto 6948;
//  set "New second" (when R3d = 0)                                                   //
8 6942: 91,80,3e             orrb  R3e,80             R3e |= 80;           
//  reset 1 sec remainder (= 8/8, counts down)                                        //
8 6945: b1,08,3d             ldb   R3d,8              R3d = 8;             

6948 - Sub 8 6948:
8 6948: c3,72,c0,3c          stw   [R72+c0],R3c       [Eighths_ext] = R3c; 
//  save IOTIME of last timer update (a true mS)                                      //
8 694c: c3,72,c2,32          stw   [R72+c2],R32       [Loop_time] = R32;   

6950 - Sub 8 6950:
8 6950: b2,31,3c             ldb   R3c,[R30++]        R3c = [R30++];       
8 6953: 98,00,3c             cmpb  R3c,0                                   
//  All zero - return (exit)                                                          //
8 6956: df,58                je    69b0               if (R3c == 0) goto 69b0;
8 6958: ae,31,32             ldzbw R32,[R30++]        R32 = (uns)[R30++];  
//  16 bit address of timer                                                           //
8 695b: b2,31,33             ldb   R33,[R30++]        R33 = [R30++];       
//  short entry? Go to update                                                         //
8 695e: 30,3c,12             jnb   B0,R3c,6973        if (!B0_R3c) goto 6973;
//  load mask from timer entry                                                        //
8 6961: b2,31,3d             ldb   R3d,[R30++]        R3d = [R30++];       
//  create 16 bit address for flags                                                   //
8 6964: ae,31,34             ldzbw R34,[R30++]        R34 = (uns)[R30++];  
//  AND flags data with entry mask                                                    //
8 6967: 72,34,3d             an2b  R3d,[R34]          R3d &= [R34];        
//  flag on or off required ?                                                         //
8 696a: 33,3c,04             jnb   B3,R3c,6971        if (!B3_R3c) goto 6971;
//  Inverse - if flag zero, GO timer                                                  //
8 696d: df,04                je    6973               if (R3d == [R34]) goto 6973;
//  (flags set) STOP, loop to next entry                                              //
8 696f: 27,df                sjmp  6950               goto 6950;           

6971 - Sub 8 6971:
8 6971: df,dd                je    6950               if (R3d == [R34]) goto 6950;

6973 - Sub 8 6973:
8 6973: 50,3c,3e,00          an3b  0,R3e,R3c          0 = R3e & R3c;       
//  no, loop to next entry                                                            //
8 6977: df,d7                je    6950               if (R3e != R3c) goto 6950;
//  Byte or Word timer                                                                //
8 6979: 31,3c,05             jnb   B1,R3c,6981        if (!B1_R3c) goto 6981;
//  read current Word value                                                           //
8 697c: a2,32,36             ldw   R36,[R32]          R36 = [R32];         
8 697f: 20,03                sjmp  6984               goto 6984;           

6981 - Sub 8 6981:
8 6981: be,32,36             ldsbw R36,[R32]          R36 = (sig)[R32];    

6984 - Sub 8 6984:
8 6984: 32,3c,04             jnb   B2,R3c,698b        if (!B2_R3c) goto 698b;
//  negate value                                                                      //
8 6987: 03,36                negw  R36                R36 = -R36;          
//  if zero jump straight to save                                                     //
8 6989: df,18                je    69a3               if (R36 == R36) goto 69a3;
8 698b: 3d,3c,04             jb    B5,R3c,6992        if (B5_R3c) goto 6992;
//  Not mSecs, increment timer                                                        //
8 698e: 07,36                incw  R36                R36++;               
8 6990: 20,03                sjmp  6995               goto 6995;           

6992 - Sub 8 6992:
8 6992: 64,38,36             ad2w  R36,R38            R36 += R38;          
8 6995: d3,07                jnc   699e               if (R36 <= ffff) goto 699e;
//  overflow, wrap to zero                                                            //
8 6997: 01,36                clrw  R36                R36 = 0;             
//  down - jmp straight to save                                                       //
8 6999: 3a,3c,07             jb    B2,R3c,69a3        if (B2_R3c) goto 69a3;
//  up, set -1 ?                                                                      //
8 699c: 05,36                decw  R36                R36--;               

699e - Sub 8 699e:
8 699e: 32,3c,02             jnb   B2,R3c,69a3        if (!B2_R3c) goto 69a3;
8 69a1: 03,36                negw  R36                R36 = -R36;          
8 69a3: 31,3c,05             jnb   B1,R3c,69ab        if (!B1_R3c) goto 69ab;
//  save Word timer                                                                   //
8 69a6: c2,32,36             stw   [R32],R36          [R32] = R36;         
8 69a9: 27,a5                sjmp  6950               goto 6950;           

69ab - Sub 8 69ab:
8 69ab: c6,32,36             stb   [R32],R36          [R32] = R36;         
8 69ae: 27,a0                sjmp  6950               goto 6950;           

8 69b0: f0                   ret                      return;              



Timer_list:
//  Byte,mSecs,Up. Time since last BP pulse?                                          //
8 69b1: 20,36,01,89,c8,00,80,a1                       Unknown Operation/Structure
//  Byte,Secs,Up. Time since $24:6 = 1                                                //
8 69b9: 81,c9,00,40,24,89,4d,01                       Unknown Operation/Structure
8 69c1: 04,a1,81,66,02,80,27,81                       Unknown Operation/Structure
8 69c9: 67,02,40,27,81,cb,00,04                       Unknown Operation/Structure
8 69d1: 24,81,cd,00,20,24,83,3a                       Unknown Operation/Structure
8 69d9: 01,01,a1,41,45,01,80,ed                       Unknown Operation/Structure
//  Byte,1/8s,Down. Time since $ed:6 = 1                                              //
8 69e1: 45,45,01,40,ed,80,4e,01                       Unknown Operation/Structure
//  Byte,1/8s,Up.                                                                     //
8 69e9: 40,ca,01,42,c0,01,22,34                       Unknown Operation/Structure
8 69f1: 01,41,c8,01,20,2b,83,c2                       Unknown Operation/Structure
8 69f9: 01,40,2a,22,3e,01,22,c4                       Unknown Operation/Structure
8 6a01: 01,81,37,01,04,eb,49,4c                       Unknown Operation/Structure
8 6a09: 01,01,29,80,38,01,41,2a                       Unknown Operation/Structure
8 6a11: 01,40,a1,81,44,01,02,e8                       Unknown Operation/Structure
//  Byte,Secs,Down. Time since $e8:0 = 1                                              //
8 6a19: 85,44,01,01,e8,89,20,02                       Unknown Operation/Structure
8 6a21: 01,24,81,ce,00,01,ec,81                       Unknown Operation/Structure
8 6a29: 64,02,80,24,23,1e,02,40                       Unknown Operation/Structure
8 6a31: 4f,80,46,01,20,47,01,40                       Unknown Operation/Structure
8 6a39: cc,00,42,16,02,80,14,02                       Unknown Operation/Structure
//  Byte,1/8s,Up.                                                                     //
8 6a41: 40,15,02,23,18,02,04,ea                       Unknown Operation/Structure
//  Byte,1/8s,Up. Time since $ea:1 = 1                                                //
8 6a49: 41,13,02,02,ea,41,39,01                       Unknown Operation/Structure
8 6a51: 40,ec,26,a8,02,20,bb,02                       Unknown Operation/Structure
//  Byte,1/8s,Up.                                                                     //
8 6a59: 40,4f,01,81,49,01,40,ef                       Unknown Operation/Structure
//  Byte,1/8s,Up. Time since $ea:6 = 1                                                //
8 6a61: 41,4a,01,40,ef,21,50,01                       Unknown Operation/Structure
8 6a69: 08,a1,22,32,01,40,c9,01                       Unknown Operation/Structure
//  Byte,1/8s,Up.                                                                     //
8 6a71: 40,c6,01,22,aa,03,22,a8                       Unknown Operation/Structure
8 6a79: 03,00                                         Unknown Operation/Structure


Upd_ShiftL:
8 6a7b: b3,fe,03,30          ldb   R30,[Rfe+3]        R30 = [Tstrat];      
//  SIL (Shift Indicator Light)                                                       //
8 6a7f: 99,01,30             cmpb  R30,1                                   
8 6a82: d7,55                jne   6ad9               if (R30 != 1) goto 6ad9;
//  jmp if ?                                                                          //
8 6a84: 38,d0,2d             jb    B0,Rd0,6ab4        if (B0_[Apt]) goto 6ab4;
//  Table 8C34 - Incremental Indicated RPM shift point as a function of ECT           //
8 6a87: 45,34,00,f0,32       ad3w  R32,Rf0,34         R32 = Fn651;         
8 6a8c: bc,b0,34             ldsbw R34,Rb0            R34 = (sig)[ECT];    
8 6a8f: ef,6f,cb             call  3601               SUWordLU();          
8 6a92: c0,14,38             stw   R14,R38            R14 = R38;           
//  Table 8C50 - Indicated RPM shift point as a function of LOAD.                     //
8 6a95: 45,50,00,f0,32       ad3w  R32,Rf0,50         R32 = Fn652A;        
//  engine load (VE? )                                                                //
8 6a9a: a3,74,de,34          ldw   R34,[R74+de]       R34 = [Load];        
8 6a9e: ef,6b,cb             call  360c               UUWordLu();          
//  add RPM shift points                                                              //
8 6aa1: 64,38,14             ad2w  R14,R38            R14 += R38;          
//  ROM 8C0C - SPTRPM                                                                 //
8 6aa4: 8b,f0,0c,ae          cmpw  Rae,[Rf0+c]                             
8 6aa8: d9,05                jgtu  6aaf               if ((uns) [Rpmx4] > [Sc0006]) goto 6aaf;
8 6aaa: 88,14,ae             cmpw  Rae,R14                                 
8 6aad: d1,05                jleu  6ab4               if ((uns) [Rpmx4] <= R14) goto 6ab4;

6aaf - Sub 8 6aaf:
8 6aaf: 91,40,ec             orrb  Rec,40             [Flag_ec] |= 40;     
8 6ab2: 20,07                sjmp  6abb               goto 6abb;           

6ab4 - Sub 8 6ab4:
8 6ab4: 71,bf,ec             an2b  Rec,bf             [Flag_ec] &= bf;     
//  zero 139 timer - SLTMR                                                            //
8 6ab7: c7,72,b9,00          stb   [R72+b9],0         [Sltmr] = 0;         
8 6abb: 3f,a1,1b             jb    B7,Ra1,6ad9        if (B7_[a1_Flags]) goto 6ad9;
8 6abe: 8b,f0,0e,ae          cmpw  Rae,[Rf0+e]                             
8 6ac2: d9,10                jgtu  6ad4               if ((uns) [Rpmx4] > [Sc0007]) goto 6ad4;
//  139 Shift Light Timer                                                             //
8 6ac4: b3,72,b9,30          ldb   R30,[R72+b9]       R30 = [Sltmr];       
8 6ac8: 9b,f0,10,30          cmpb  R30,[Rf0+10]                            
8 6acc: d1,0b                jleu  6ad9               if ((uns) R30 <= [Sc0008]) goto 6ad9;
8 6ace: 9b,f0,11,30          cmpb  R30,[Rf0+11]                            
8 6ad2: d9,05                jgtu  6ad9               if ((uns) R30 > [Sc0009]) goto 6ad9;

6ad4 - Sub 8 6ad4:
8 6ad4: 91,04,47             orrb  R47,4              [Flags_47] |= 4;     
8 6ad7: 20,03                sjmp  6adc               goto 6adc;           

6ad9 - Sub 8 6ad9:
8 6ad9: 71,fb,47             an2b  R47,fb             [Flags_47] &= fb;    
8 6adc: f0                   ret                      return;              

Upd_Thermactor:
8 6add: 9b,f6,66,00          cmpb  0,[Rf6+66]                              
//  return if no Thermactor present                                                   //
8 6ae1: df,25                je    6b08               if (0 == [Hpacl]) goto 6b08;
8 6ae3: 3f,a1,0a             jb    B7,Ra1,6af0        if (B7_[a1_Flags]) goto 6af0;
8 6ae6: a3,74,d4,30          ldw   R30,[R74+d4]       R30 = [Archg];       
8 6aea: 8b,f6,68,30          cmpw  R30,[Rf6+68]                            
8 6aee: db,10                jc    6b00               if ((uns) R30 >= [Sc0055]) goto 6b00;

6af0 - Sub 8 6af0:
8 6af0: a3,01,26,01,30       ldw   R30,[126]          R30 = [TPS_Min__#_was__TPS_Ratch];
//  9412 - SHKTP                                                                      //
8 6af5: 67,f6,6a,30          ad2w  R30,[Rf6+6a]       R30 += [Sc0056];     
8 6af9: db,0a                jc    6b05               if (R30 > ffff) goto 6b05;
//  RAA is Throttle position                                                          //
8 6afb: 88,30,aa             cmpw  Raa,R30                                 
8 6afe: d3,05                jnc   6b05               if ((uns) RTP < R30) goto 6b05;

6b00 - Sub 8 6b00:
8 6b00: 91,10,47             orrb  R47,10             [Flags_47] |= 10;    
8 6b03: 20,03                sjmp  6b08               goto 6b08;           

6b05 - Sub 8 6b05:
8 6b05: 71,ef,47             an2b  R47,ef             [Flags_47] &= ef;    
8 6b08: f0                   ret                      return;              

Sub0445:
8 6b09: 31,eb,03             jnb   B1,Reb,6b0f        if (!B1_[Flags_eb]) goto 6b0f;
//  jmp if SYNFLG                                                                     //
8 6b0c: 3e,2e,02             jb    B6,R2e,6b11        if (B6_[Flags_2E]) goto 6b11;
8 6b0f: 20,7d                sjmp  6b8e               goto 6b8e;           

6b11 - Sub 8 6b11:
8 6b11: 4b,76,c6,ba,50       sb3w  R50,Rba,[R76+c6]   R50 = [PIPHi_ETime] - [Dtsig];
8 6b16: db,02                jc    6b1a               if (R50 >= 0) goto 6b1a;
8 6b18: 03,50                negw  R50                R50 = -R50;          

6b1a - Sub 8 6b1a:
8 6b1a: c3,76,c6,ba          stw   [R76+c6],Rba       [Dtsig] = [PIPHi_ETime];
8 6b1e: a3,f0,0a,54          ldw   R54,[Rf0+a]        R54 = [Ssfctr];      
//  RBA - PIP time lo 16 bits                                                         //
8 6b22: 6c,ba,54             ml2w  R54,Rba            R54 *= [PIPHi_ETime];
8 6b25: 88,56,50             cmpw  R50,R56                                 
8 6b28: db,64                jc    6b8e               if ((uns) R50 >= R56) goto 6b8e;
//  RBA - PIP time lo 16 bits                                                         //
8 6b2a: 4b,76,ba,ba,50       sb3w  R50,Rba,[R76+ba]   R50 = [PIPHi_ETime] - [Prev_PIP_ETime];
8 6b2f: db,02                jc    6b33               if (R50 >= 0) goto 6b33;
8 6b31: 03,50                negw  R50                R50 = -R50;          
8 6b33: 88,56,50             cmpw  R50,R56                                 
8 6b36: db,56                jc    6b8e               if ((uns) R50 >= R56) goto 6b8e;
8 6b38: a3,76,c2,50          ldw   R50,[R76+c2]       R50 = [Sigdlt];      
8 6b3c: c0,54,50             stw   R54,R50            R54 = R50;           
8 6b3f: c0,58,50             stw   R58,R50            R58 = R50;           
8 6b42: 6b,76,c4,50          sb2w  R50,[R76+c4]       R50 -= [Psgdlt];     
8 6b46: db,02                jc    6b4a               if (R50 >= 0) goto 6b4a;
8 6b48: 03,50                negw  R50                R50 = -R50;          
8 6b4a: a3,f0,0a,56          ldw   R56,[Rf0+a]        R56 = [Ssfctr];      
8 6b4e: 6c,56,54             ml2w  R54,R56            R54 *= R56;          
8 6b51: 88,56,50             cmpw  R50,R56                                 
8 6b54: db,38                jc    6b8e               if ((uns) R50 >= R56) goto 6b8e;
8 6b56: a0,ba,56             ldw   R56,Rba            R56 = [PIPHi_ETime]; 
8 6b59: 01,54                clrw  R54                R54 = 0;             
8 6b5b: 0c,02,54             shrdw R54,2              R54L = R54L / 4;     
8 6b5e: 8c,58,54             divw  R54,R58            R54 = R54L / R58;    
8 6b61: dd,2b                jv    6b8e               if (OV) goto 6b8e;   
8 6b63: a3,f2,04,50          ldw   R50,[Rf2+4]        R50 = [Fkskay];      
8 6b67: 6c,50,54             ml2w  R54,R50            R54 *= R50;          
8 6b6a: 03,50                negw  R50                R50 = -R50;          
8 6b6c: a3,76,c0,52          ldw   R52,[R76+c0]       R52 = [Sigkal];      
8 6b70: 6c,52,50             ml2w  R50,R52            R50 *= R52;          
8 6b73: 64,52,56             ad2w  R56,R52            R56 += R52;          
8 6b76: 8b,f2,06,56          cmpw  R56,[Rf2+6]                             
8 6b7a: db,04                jc    6b80               if ((uns) R56 >= [Sigkll]) goto 6b80;
8 6b7c: a3,f2,06,56          ldw   R56,[Rf2+6]        R56 = [Sigkll];      
8 6b80: 8b,f2,08,56          cmpw  R56,[Rf2+8]                             
8 6b84: d1,04                jleu  6b8a               if ((uns) R56 <= [Sigklu]) goto 6b8a;
8 6b86: a3,f2,08,56          ldw   R56,[Rf2+8]        R56 = [Sigklu];      
8 6b8a: c3,76,c0,56          stw   [R76+c0],R56       [Sigkal] = R56;      
8 6b8e: 9b,fe,07,bd          cmpb  Rbd,[Rfe+7]                             
8 6b92: d1,0c                jleu  6ba0               if ((uns) [Kayctr] <= [PIPsC]) goto 6ba0;
8 6b94: b1,01,bd             ldb   Rbd,1              [Kayctr] = 1;        
8 6b97: c3,74,22,ba          stw   [R74+22],Rba       [Dtpcyc] = [PIPHi_ETime];
8 6b9b: c3,74,24,be          stw   [R74+24],Rbe       [Hfpcyc] = [PIPH_PW];
8 6b9f: f0                   ret                      return;              

8 6ba0: 17,bd                incb  Rbd                [Kayctr]++;          
8 6ba2: 9b,fe,07,bd          cmpb  Rbd,[Rfe+7]                             
8 6ba6: d1,6b                jleu  6c13               if ((uns) [Kayctr] <= [PIPsC]) goto 6c13;
8 6ba8: 39,eb,68             jb    B1,Reb,6c13        if (B1_[Flags_eb]) goto 6c13;
8 6bab: 4b,74,22,ba,50       sb3w  R50,Rba,[R74+22]   R50 = [PIPHi_ETime] - [Dtpcyc];
8 6bb0: db,02                jc    6bb4               if (R50 >= 0) goto 6bb4;
8 6bb2: 03,50                negw  R50                R50 = -R50;          
8 6bb4: a3,f0,0a,52          ldw   R52,[Rf0+a]        R52 = [Ssfctr];      
8 6bb8: 4c,52,ba,54          ml3w  R54,Rba,R52        R54 = [PIPHi_ETime] * R52;
8 6bbc: 88,56,50             cmpw  R50,R56                                 
8 6bbf: d9,52                jgtu  6c13               if ((uns) R50 > R56) goto 6c13;
8 6bc1: 4b,74,24,be,50       sb3w  R50,Rbe,[R74+24]   R50 = [PIPH_PW] - [Hfpcyc];
8 6bc6: db,02                jc    6bca               if (R50 >= 0) goto 6bca;
8 6bc8: 03,50                negw  R50                R50 = -R50;          
8 6bca: 4c,52,be,54          ml3w  R54,Rbe,R52        R54 = [PIPH_PW] * R52;
8 6bce: 88,56,50             cmpw  R50,R56                                 
8 6bd1: d9,40                jgtu  6c13               if ((uns) R50 > R56) goto 6c13;
8 6bd3: 01,54                clrw  R54                R54 = 0;             
8 6bd5: 47,74,22,ba,56       ad3w  R56,Rba,[R74+22]   R56 = [PIPHi_ETime] + [Dtpcyc];
8 6bda: db,37                jc    6c13               if (R56 > ffff) goto 6c13;
8 6bdc: 0c,02,54             shrdw R54,2              R54L = R54L / 4;     
8 6bdf: 47,74,24,be,50       ad3w  R50,Rbe,[R74+24]   R50 = [PIPH_PW] + [Hfpcyc];
8 6be4: db,2d                jc    6c13               if (R50 > ffff) goto 6c13;
8 6be6: 8c,50,54             divw  R54,R50            R54 = R54L / R50;    
8 6be9: dd,28                jv    6c13               if (OV) goto 6c13;   
8 6beb: 89,99,99,54          cmpw  R54,9999                                
8 6bef: db,22                jc    6c13               if ((uns) R54 >= 9999) goto 6c13;
8 6bf1: 4d,00,e0,c0,50       ml3w  R50,Rc0,e000       R50 = [Mkay] * e000; 
8 6bf6: 6d,00,20,54          ml2w  R54,2000           R54 *= 2000;         
//  Now check for 10% each way ?                                                      //
8 6bfa: 44,52,56,c0          ad3w  Rc0,R56,R52        [Mkay] = R56 + R52;  
8 6bfe: 89,33,73,c0          cmpw  Rc0,7333                                
8 6c02: db,05                jc    6c09               if ((uns) [Mkay] >= 7333) goto 6c09;
//  = 0.9 ?                                                                           //
8 6c04: a1,33,73,c0          ldw   Rc0,7333           [Mkay] = 7333;       
8 6c08: f0                   ret                      return;              

8 6c09: 89,cd,8c,c0          cmpw  Rc0,8ccd                                
8 6c0d: d1,04                jleu  6c13               if ((uns) [Mkay] <= 8ccd) goto 6c13;
//  = 1.10 ?                                                                          //
8 6c0f: a1,cd,8c,c0          ldw   Rc0,8ccd           [Mkay] = 8ccd;       
8 6c13: f0                   ret                      return;              

Sub0448:
8 6c14: a0,be,54             ldw   R54,Rbe            R54 = [PIPH_PW];     
8 6c17: 6c,c0,54             ml2w  R54,Rc0            R54 *= [Mkay];       
8 6c1a: 99,40,57             cmpb  R57,40                                  
8 6c1d: d3,02                jnc   6c21               if ((uns) R57 < 40) goto 6c21;
8 6c1f: 20,6d                sjmp  6c8e               goto 6c8e;           

8 6c21: 0d,02,54             shldw R54,2              R54L = R54L * 4;     
//  PIP time lo 16 bits with correction                                               //
8 6c24: 48,56,ba,50          sb3w  R50,Rba,R56        R50 = [PIPHi_ETime] - R56;
8 6c28: db,02                jc    6c2c               if (R50 >= 0) goto 6c2c;
8 6c2a: 03,50                negw  R50                R50 = -R50;          
8 6c2c: a3,76,ba,54          ldw   R54,[R76+ba]       R54 = [Prev_PIP_ETime];
8 6c30: 6b,76,bc,54          sb2w  R54,[R76+bc]       R54 -= [Prev_PIPH_PW];
8 6c34: 6c,be,54             ml2w  R54,Rbe            R54 *= [PIPH_PW];    
8 6c37: 8f,76,bc,54          divw  R54,[R76+bc]       R54 = R54L / [Prev_PIPH_PW];
8 6c3b: dd,51                jv    6c8e               if (OV) goto 6c8e;   
8 6c3d: 64,be,54             ad2w  R54,Rbe            R54 += [PIPH_PW];    
8 6c40: db,4c                jc    6c8e               if (R54 > ffff) goto 6c8e;
8 6c42: 48,54,ba,52          sb3w  R52,Rba,R54        R52 = [PIPHi_ETime] - R54;
8 6c46: db,02                jc    6c4a               if (R52 >= 0) goto 6c4a;
8 6c48: 03,52                negw  R52                R52 = -R52;          
8 6c4a: b3,76,be,54          ldb   R54,[R76+be]       R54 = [Tl0FLG];      
8 6c4e: 11,56                clrb  R56                R56 = 0;             
8 6c50: 88,52,50             cmpw  R50,R52                                 
8 6c53: d9,1b                jgtu  6c70               if ((uns) R50 > R52) goto 6c70;
8 6c55: 37,54,0a             jnb   B7,R54,6c62        if (!B7_R54) goto 6c62;
8 6c58: b3,76,bf,56          ldb   R56,[R76+bf]       R56 = [Difctr];      
8 6c5c: 17,56                incb  R56                R56++;               
8 6c5e: d3,02                jnc   6c62               if (R56 <= ff) goto 6c62;
8 6c60: 15,56                decb  R56                R56--;               
8 6c62: c7,76,bf,56          stb   [R76+bf],R56       [Difctr] = R56;      
8 6c66: 9b,fe,14,56          cmpb  R56,[Rfe+14]                            
8 6c6a: d3,22                jnc   6c8e               if ((uns) R56 < [Sc0152]) goto 6c8e;
8 6c6c: 11,54                clrb  R54                R54 = 0;             
8 6c6e: 20,1a                sjmp  6c8a               goto 6c8a;           

8 6c70: 3f,54,0a             jb    B7,R54,6c7d        if (B7_R54) goto 6c7d;
8 6c73: b3,76,bf,56          ldb   R56,[R76+bf]       R56 = [Difctr];      
8 6c77: 17,56                incb  R56                R56++;               
8 6c79: d3,02                jnc   6c7d               if (R56 <= ff) goto 6c7d;
8 6c7b: 15,56                decb  R56                R56--;               
8 6c7d: c7,76,bf,56          stb   [R76+bf],R56       [Difctr] = R56;      
8 6c81: 9b,fe,15,56          cmpb  R56,[Rfe+15]                            
8 6c85: d3,07                jnc   6c8e               if ((uns) R56 < [Sc0153]) goto 6c8e;
8 6c87: b1,80,54             ldb   R54,80             R54 = 80;            
8 6c8a: c7,76,be,54          stb   [R76+be],R54       [Tl0FLG] = R54;      
8 6c8e: f0                   ret                      return;              

Knk_inth:
8 6c8f: 71,fd,87             an2b  R87,fd             [New_irqs] &= fd;    
//  947A KIHP = 00 ( is there a knock sensor )                                        //
8 6c92: 9b,f8,4a,00          cmpb  0,[Rf8+4a]                              
//  jump if line data = 0                                                             //
8 6c96: df,06                je    6c9e               if (0 == [Kihp]) goto 6c9e;
//  set KNOCK DETECTED                                                                //
8 6c98: 91,08,4f             orrb  R4f,8              [Flags_4F] |= 8;     
//  set VIP KNOCK                                                                     //
8 6c9b: 91,08,d9             orrb  Rd9,8              [Vip_flags4] |= 8;   
8 6c9e: f0                   ret                      return;              

Sub0450:
8 6c9f: 9b,f8,4a,00          cmpb  0,[Rf8+4a]                              
8 6ca3: d7,01                jne   6ca6               if (0 != [Kihp]) goto 6ca6;
8 6ca5: f0                   ret                      return;              

6ca6 - Sub 8 6ca6:
8 6ca6: 8b,f8,44,ae          cmpw  Rae,[Rf8+44]                            
//  jmp if N <= RPMCNL                                                                //
8 6caa: d1,12                jleu  6cbe               if ((uns) [Rpmx4] <= [RPMCNL]) goto 6cbe;
//  KWCTR : ROM 9479 - WINCLD                                                         //
8 6cac: 9b,f8,49,dd          cmpb  Rdd,[Rf8+49]                            
//  jmp if KWCTR >= WINCLD                                                            //
8 6cb0: db,0c                jc    6cbe               if ((uns) [Kwctr] >= [WINCLD]) goto 6cbe;
//  jmp if not KNOCK DETECTED                                                         //
8 6cb2: 33,4f,03             jnb   B3,R4f,6cb8        if (!B3_[Flags_4F]) goto 6cb8;
//  KWCTR                                                                             //
8 6cb5: 17,dd                incb  Rdd                [Kwctr]++;           
8 6cb7: f0                   ret                      return;              

6cb8 - Sub 8 6cb8:
8 6cb8: 31,eb,03             jnb   B1,Reb,6cbe        if (!B1_[Flags_eb]) goto 6cbe;
//  KWCTR                                                                             //
8 6cbb: 17,dd                incb  Rdd                [Kwctr]++;           
8 6cbd: f0                   ret                      return;              

6cbe - Sub 8 6cbe:
8 6cbe: 11,dd                clrb  Rdd                [Kwctr] = 0;         
//  QUEUE 9                                                                           //
8 6cc0: a1,22,03,7e          ldw   R7e,322            [Rtab] = 322;        
//  323                                                                               //
8 6cc4: 9b,7e,01,00          cmpb  0,[R7e+1]                               
8 6cc8: df,04                je    6cce               if (0 == [[Rtab]+1]) goto 6cce;
8 6cca: 91,02,4e             orrb  R4e,2              [Flags_4E] |= 2;     
8 6ccd: f0                   ret                      return;              

8 6cce: 28,15                scall 6ce5               Sub0454();           
8 6cd0: a1,86,22,92          ldw   R92,2286           [TPtr] = OSt8_003;   
8 6cd4: ef,22,b8             call  24f9               Do_CmdN();           
8 6cd7: f0                   ret                      return;              



Add_H_Beta:
8 6cd8: 39,4e,07,c7,7e,01,00,cc                       Unknown Operation/Structure
8 6ce0: 00,f0,71,fd,4e                                Unknown Operation/Structure


Sub0454:
8 6ce5: 4c,c0,be,50          ml3w  R50,Rbe,Rc0        R50 = [PIPH_PW] * [Mkay];
8 6ce9: 99,40,53             cmpb  R53,40                                  
8 6cec: db,12                jc    6d00               if ((uns) R53 >= 40) goto 6d00;
8 6cee: 0d,02,50             shldw R50,2              R50L = R50L * 4;     
8 6cf1: a0,52,50             ldw   R50,R52            R50 = R52;           
8 6cf4: 6f,74,a8,50          ml2w  R50,[R74+a8]       R50 *= [Htime_beta]; 
8 6cf8: 3f,53,05             jb    B7,R53,6d00        if (B7_R53) goto 6d00;
8 6cfb: 0d,01,50             shldw R50,1              R50L = R50L * 2;     
8 6cfe: 20,03                sjmp  6d03               goto 6d03;           

8 6d00: bd,ff,52             ldsbw R52,ff             R52 = (sig)ff;       

6d03 - Sub 8 6d03:
8 6d03: 47,74,50,52,80       ad3w  R80,R52,[R74+50]   [HSO_time] = R52 + [Prev_PIP_time];
8 6d08: b3,74,52,82          ldb   R82,[R74+52]       [HSO_timeH] = [Prev_PIP_timeH];
8 6d0c: b4,00,82             adcb  R82,0              [HSO_timeH] += 0 + CY;
8 6d0f: f8                   clc                      CY = 0;              
8 6d10: f0                   ret                      return;              



Add_H_Delta:
//                                                                                    //
//  Tasklist Routine at 2151, routine offset 36                                       //
//                                                                                    //
8 6d11: 67,74,aa,80,27,f5                             Unknown Operation/Structure


UPd_KnkRet:
8 6d17: 3f,4e,02             jb    B7,R4e,6d1c        if (B7_[Flags_4E]) goto 6d1c;
8 6d1a: 20,8e                sjmp  6daa               goto 6daa;           

6d1c - Sub 8 6d1c:
8 6d1c: 45,62,03,f8,32       ad3w  R32,Rf8,362        R32 = Fc025;         
8 6d21: a0,ae,34             ldw   R34,Rae            R34 = [Rpmx4];       
//  = RPM / 128                                                                       //
8 6d24: 08,07,34             shrw  R34,7              R34 = R34 / 80;      
8 6d27: ef,8d,c8             call  35b7               UUbyteLu();          
//  Table output * 128                                                                //
8 6d2a: 09,07,38             shlw  R38,7              R38 = R38 * 80;      
//  = WOPEN                                                                           //
8 6d2d: 67,f8,40,38          ad2w  R38,[Rf8+40]       R38 += [WOPEN];      
//  WINDOW BETA                                                                       //
8 6d31: c3,74,a8,38          stw   [R74+a8],R38       [Htime_beta] = R38;  
//  output is fraction of PIP Period.                                                 //
8 6d35: 45,54,03,f8,32       ad3w  R32,Rf8,354        R32 = Fc024;         
8 6d3a: a0,ae,34             ldw   R34,Rae            R34 = [Rpmx4];       
//  Table output * 128                                                                //
8 6d3d: 08,07,34             shrw  R34,7              R34 = R34 / 80;      
8 6d40: ef,74,c8             call  35b7               UUbyteLu();          
//  RBA - PIP time lo 16 bits                                                         //
8 6d43: 6c,ba,38             ml2w  R38,Rba            R38 *= [PIPHi_ETime];
//  multiply by 64                                                                    //
8 6d46: 0d,06,38             shldw R38,6              R38L = R38L * 40;    
//  9472 - WINLEN                                                                     //
8 6d49: 67,f8,42,3a          ad2w  R3a,[Rf8+42]       R3a += [WINLEN];     
//  228 - WINDOW DELTA                                                                //
8 6d4d: c3,74,aa,3a          stw   [R74+aa],R3a       [Htime_delta] = R3a; 
//  Retard increment versus RPM, deg.                                                 //
8 6d51: 45,48,03,f8,32       ad3w  R32,Rf8,348        R32 = Fc023;         
8 6d56: a0,ae,34             ldw   R34,Rae            R34 = [Rpmx4];       
//  Table output * 128                                                                //
8 6d59: 08,07,34             shrw  R34,7              R34 = R34 / 80;      
8 6d5c: ef,58,c8             call  35b7               UUbyteLu();          
//  RET INC                                                                           //
8 6d5f: c4,e2,38             stb   Re2,R38            [Retinc] = R38;      
8 6d62: 36,4f,45             jnb   B6,R4f,6daa        if (!B6_[Flags_4F]) goto 6daa;
//  Spark Advance Rate vs RPM                                                         //
8 6d65: 45,6c,03,f8,32       ad3w  R32,Rf8,36c        R32 = Advrpm;        
8 6d6a: a0,ae,34             ldw   R34,Rae            R34 = [Rpmx4];       
//  RPM / 128                                                                         //
8 6d6d: 08,07,34             shrw  R34,7              R34 = R34 / 80;      
8 6d70: ef,44,c8             call  35b7               UUbyteLu();          
//  adv * 16                                                                          //
8 6d73: 09,04,38             shlw  R38,4              R38 = R38 * 10;      
8 6d76: 8b,74,a0,38          cmpw  R38,[R74+a0]                            
8 6d7a: d9,2e                jgtu  6daa               if ((uns) R38 > [Tsladv]) goto 6daa;
8 6d7c: a3,74,a0,3c          ldw   R3c,[R74+a0]       R3c = [Tsladv];      
8 6d80: 68,38,3c             sb2w  R3c,R38            R3c -= R38;          
8 6d83: c3,74,a0,3c          stw   [R74+a0],R3c       [Tsladv] = R3c;      
8 6d87: fa                   di                       disable ints;        
8 6d88: ff                   ff                                            
//  add 1 degree of advance to each cyl                                               //
8 6d89: b1,01,40             ldb   R40,1              R40 = 1;             
8 6d8c: ad,08,42             ldzbw R42,8              R42 = (uns)8;        

6d8f - Sub 8 6d8f:
8 6d8f: 57,43,2b,02,40,30    ad3b  R30,R40,[R42+22b]  R30 = R40 + [R42+Spkadv];
8 6d95: dd,06                jv    6d9d               if (OV) goto 6d9d;   
8 6d97: 9b,f8,31,30          cmpb  R30,[Rf8+31]                            
8 6d9b: da,04                jle   6da1               if ((sig) R30 <= [ADVLIM]) goto 6da1;

6d9d - Sub 8 6d9d:
8 6d9d: b3,f8,31,30          ldb   R30,[Rf8+31]       R30 = [ADVLIM];      

6da1 - Sub 8 6da1:
8 6da1: c7,43,2b,02,30       stb   [R42+22b],R30      [R42+Spkadv] = R30;  
8 6da6: e0,42,e6             djnz  R42,6d8f           R42--; if (R42 !=  0) goto 6d8f;
8 6da9: fb                   ei                       enable ints;         

6daa - Sub 8 6daa:
8 6daa: ef,a7,c8             call  3654               Srolav3T([Tbart],RTP,[d05e]);
8 6dad: 2a,02,aa,00,5e,d0                             #args                
//  filtered result                                                                   //
8 6db3: c3,74,ac,3e          stw   [R74+ac],R3e       [Tbart] = R3e;       
8 6db7: a3,74,ac,38          ldw   R38,[R74+ac]       R38 = [Tbart];       
8 6dbb: a0,aa,3a             ldw   R3a,Raa            R3a = RTP;           
8 6dbe: 0c,01,38             shrdw R38,1              R38L = R38L / 2;     
8 6dc1: 68,38,3a             sb2w  R3a,R38            R3a -= R38;          
8 6dc4: c3,74,00,3a          stw   [R74],R3a          [Tcf] = R3a;         
8 6dc8: 98,d0,00             cmpb  0,Rd0                                   
8 6dcb: da,0f                jle   6ddc               if ((sig) 0 <= [Apt]) goto 6ddc;
8 6dcd: a3,f8,34,14          ldw   R14,[Rf8+34]       R14 = [TIPLOD];      
8 6dd1: 8b,74,de,14          cmpw  R14,[R74+de]                            
8 6dd5: d1,05                jleu  6ddc               if ((uns) R14 <= [Load]) goto 6ddc;
8 6dd7: 91,20,2d             orrb  R2d,20             [Flags_2D] |= 20;    
8 6dda: 20,16                sjmp  6df2               goto 6df2;           

8 6ddc: a3,f8,36,38          ldw   R38,[Rf8+36]       R38 = [TIPHS];       
8 6de0: 67,f8,34,38          ad2w  R38,[Rf8+34]       R38 += [TIPLOD];     
8 6de4: d3,03                jnc   6de9               if (R38 <= ffff) goto 6de9;
8 6de6: bd,ff,38             ldsbw R38,ff             R38 = (sig)ff;       
8 6de9: 8b,74,de,38          cmpw  R38,[R74+de]                            
8 6ded: db,03                jc    6df2               if ((uns) R38 >= [Load]) goto 6df2;
8 6def: 71,df,2d             an2b  R2d,df             [Flags_2D] &= df;    
8 6df2: a3,f8,2e,14          ldw   R14,[Rf8+2e]       R14 = [KACRAT];      
8 6df6: 8b,74,00,14          cmpw  R14,[R74]                               
8 6dfa: d2,11                jgt   6e0d               if ((sig) R14 > [Tcf]) goto 6e0d;
8 6dfc: 9b,f8,3d,b0          cmpb  Rb0,[Rf8+3d]                            
8 6e00: da,0b                jle   6e0d               if ((sig) [ECT] <= [Sc0084]) goto 6e0d;
8 6e02: 8b,f8,3e,ae          cmpw  Rae,[Rf8+3e]                            
8 6e06: db,05                jc    6e0d               if ((uns) [Rpmx4] >= [NTIP]) goto 6e0d;
8 6e08: 91,40,2d             orrb  R2d,40             [Flags_2D] |= 40;    
8 6e0b: 20,03                sjmp  6e10               goto 6e10;           

8 6e0d: 71,bf,2d             an2b  R2d,bf             [Flags_2D] &= bf;    
8 6e10: 9b,f8,3c,b0          cmpb  Rb0,[Rf8+3c]                            
8 6e14: da,1d                jle   6e33               if ((sig) [ECT] <= [Sc0083]) goto 6e33;
8 6e16: 8b,f8,38,ae          cmpw  Rae,[Rf8+38]                            
8 6e1a: d1,17                jleu  6e33               if ((uns) [Rpmx4] <= [RPMMIN]) goto 6e33;
8 6e1c: a3,f8,3a,14          ldw   R14,[Rf8+3a]       R14 = [LODNOK];      
//  is there a knock sensor ?                                                         //
8 6e20: b3,f8,4a,42          ldb   R42,[Rf8+4a]       R42 = [Kihp];        
//  engine load (VE? )                                                                //
8 6e24: 8b,74,de,14          cmpw  R14,[R74+de]                            
8 6e28: db,09                jc    6e33               if ((uns) R14 >= [Load]) goto 6e33;
8 6e2a: 98,42,00             cmpb  0,R42                                   
8 6e2d: db,04                jc    6e33               if ((uns) 0 >= R42) goto 6e33;
8 6e2f: 91,40,4f             orrb  R4f,40             [Flags_4F] |= 40;    
8 6e32: f0                   ret                      return;              

8 6e33: 36,4f,12             jnb   B6,R4f,6e48        if (!B6_[Flags_4F]) goto 6e48;
8 6e36: 71,bf,4f             an2b  R4f,bf             [Flags_4F] &= bf;    
8 6e39: ad,08,42             ldzbw R42,8              R42 = (uns)8;        

6e3c - Sub 8 6e3c:
8 6e3c: c7,43,2b,02,00       stb   [R42+22b],0        [R42+Spkadv] = 0;    
8 6e41: e0,42,f8             djnz  R42,6e3c           R42--; if (R42 !=  0) goto 6e3c;
8 6e44: c3,74,a0,00          stw   [R74+a0],0         [Tsladv] = 0;        
8 6e48: f0                   ret                      return;              

Do_SelfTest:
8 6e49: 71,fe,d9             an2b  Rd9,fe             [Vip_flags4] &= fe;  
//  Set up EGR flags                                                                  //
8 6e4c: 2a,48                scall 7096               Set_EGRFlags();      
8 6e4e: 71,f7,2c             an2b  R2c,f7             [Flags_2C] &= f7;    
//  jump if VIP enable is set                                                         //
8 6e51: 3a,2a,0c             jb    B2,R2a,6e60        if (B2_[VIP_flags]) goto 6e60;
//  Time since CPU power up - mS                                                      //
8 6e54: a3,72,b4,42          ldw   R42,[R72+b4]       R42 = [Putmr];       
//  compare whole seconds 16                                                          //
8 6e58: 99,10,43             cmpb  R43,10                                  
//  jmp if timer < 4096 msec (~ 4 secs)                                               //
8 6e5b: d3,03                jnc   6e60               if ((uns) R43 < 10) goto 6e60;
8 6e5d: 91,04,2a             orrb  R2a,4              [VIP_flags] |= 4;    
8 6e60: 36,2a,14             jnb   B6,R2a,6e77        if (!B6_[VIP_flags]) goto 6e77;
//  jump if EEC reset                                                                 //
8 6e63: 35,2b,05             jnb   B5,R2b,6e6b        if (!B5_[Flags_2B]) goto 6e6b;
//  jump if not CRANKING - EEC reset                                                  //
8 6e66: 37,a1,0b             jnb   B7,Ra1,6e74        if (!B7_[a1_Flags]) goto 6e74;
//  Enter KOEO (Engine off test)                                                      //
8 6e69: 20,a7                sjmp  6f12               goto 6f12;           

8 6e6b: 3b,d6,03             jb    B3,Rd6,6e71        if (B3_[STO_flags]) goto 6e71;
8 6e6e: 32,2b,03             jnb   B2,R2b,6e74        if (!B2_[Flags_2B]) goto 6e74;
8 6e71: ef,2c,09             call  77a0               clear_KAM();         

6e74 - Sub 8 6e74:
8 6e74: e7,c9,15             jump  8440               goto Sub0615;        

6e77 - Sub 8 6e77:
8 6e77: 35,2a,1e             jnb   B5,R2a,6e98        if (!B5_[VIP_flags]) goto 6e98;
//  STI input is low - EEC reset                                                      //
8 6e7a: 35,2b,f7             jnb   B5,R2b,6e74        if (!B5_[Flags_2B]) goto 6e74;
//  Transmission type                                                                 //
8 6e7d: b3,fe,02,42          ldb   R42,[Rfe+2]        R42 = [TRLOAD];      
//  3 = Manual Transmission, both clutch and gear switches.                           //
8 6e81: 99,03,42             cmpb  R42,3                                   
8 6e84: d3,08                jnc   6e8e               if ((uns) R42 < 3) goto 6e8e;
//  4 = Auto Transmission, non-electronic, neutral drive switch.                      //
8 6e86: 99,04,42             cmpb  R42,4                                   
8 6e89: d9,03                jgtu  6e8e               if ((uns) R42 > 4) goto 6e8e;
8 6e8b: 3f,e7,e6             jb    B7,Re7,6e74        if (B7_[Flag_e7]) goto 6e74;
8 6e8e: 36,e6,05             jnb   B6,Re6,6e96        if (!B6_[Flags_e6]) goto 6e96;
//  filter at 00CA[R78] use blend 116(EVP) to 380                                     //
8 6e91: ef,43,09             call  77d7               SrolavT([Fiept]);    
8 6e94: 80,03                                         #args                
8 6e96: 20,6d                sjmp  6f05               goto 6f05;           

8 6e98: 30,2a,1a             jnb   B0,R2a,6eb5        if (!B0_[VIP_flags]) goto 6eb5;
//  jump if STI input is low                                                          //
8 6e9b: 35,2b,12             jnb   B5,R2b,6eb0        if (!B5_[Flags_2B]) goto 6eb0;
//  Vehicle speed, MPH                                                                //
8 6e9e: b3,73,3d,01,42       ldb   R42,[R72+13d]      R42 = [Mph_FiltH];   
8 6ea3: 99,04,42             cmpb  R42,4                                   
//  Vehicle speed > 4 MPH                                                             //
8 6ea6: d9,08                jgtu  6eb0               if ((uns) R42 > 4) goto 6eb0;
//  SCCS on (Cruise Control)                                                          //
8 6ea8: 37,a0,05             jnb   B7,Ra0,6eb0        if (!B7_[Vsc_states]) goto 6eb0;
//  SCCS brake (cruise control)                                                       //
8 6eab: 3d,a0,02             jb    B5,Ra0,6eb0        if (B5_[Vsc_states]) goto 6eb0;
//  VSCDT? push proc D and execute it                                                 //
8 6eae: 20,91                sjmp  6f41               goto 6f41;           

6eb0 - Sub 8 6eb0:
8 6eb0: 91,20,2a             orrb  R2a,20             [VIP_flags] |= 20;   
//  EEC reset                                                                         //
8 6eb3: 27,bf                sjmp  6e74               goto 6e74;           

6eb5 - Sub 8 6eb5:
8 6eb5: 31,2a,08             jnb   B1,R2a,6ec0        if (!B1_[VIP_flags]) goto 6ec0;
//  jump if STI input is high to EEC reset                                            //
8 6eb8: 3d,2b,b9             jb    B5,R2b,6e74        if (B5_[Flags_2B]) goto 6e74;
//  jump if not CRANKING to EEC reset                                                 //
8 6ebb: 37,a1,b6             jnb   B7,Ra1,6e74        if (!B7_[a1_Flags]) goto 6e74;
//  VSCST? push proc C and execute it(STI low and engine off or starting)             //
8 6ebe: 20,7a                sjmp  6f3a               goto 6f3a;           

6ec0 - Sub 8 6ec0:
8 6ec0: 3f,a1,49             jb    B7,Ra1,6f0c        if (B7_[a1_Flags]) goto 6f0c;
//  jump if underspeed/cranking                                                       //
8 6ec3: 3a,a1,03             jb    B2,Ra1,6ec9        if (B2_[a1_Flags]) goto 6ec9;
//  jump if STI input is high                                                         //
8 6ec6: 3d,2b,02             jb    B5,R2b,6ecb        if (B5_[Flags_2B]) goto 6ecb;
8 6ec9: 20,82                sjmp  6f4d               goto 6f4d;           

6ecb - Sub 8 6ecb:
8 6ecb: b3,72,48,42          ldb   R42,[R72+48]       R42 = [Tsstil];      
//  1 second                                                                          //
8 6ecf: 99,08,42             cmpb  R42,8                                   
//  jmp if STI low timer < 1 second                                                   //
8 6ed2: d3,79                jnc   6f4d               if ((uns) R42 < 8) goto 6f4d;
//  jump if not VIP mode flag : VIP enable                                            //
8 6ed4: 32,2a,76             jnb   B2,R2a,6f4d        if (!B2_[VIP_flags]) goto 6f4d;
//  134 - PUTMR - Counts up after h/w reset                                           //
8 6ed7: a3,72,b4,42          ldw   R42,[R72+b4]       R42 = [Putmr];       
//  compare whole seconds 1800 msec (1/1024) = 6 seconds                              //
8 6edb: 99,18,43             cmpb  R43,18                                  
//  jmp if timer < 6 sec                                                              //
8 6ede: d3,6d                jnc   6f4d               if ((uns) R43 < 18) goto 6f4d;
8 6ee0: b3,78,c7,42          ldb   R42,[R78+c7]       R42 = [RCp+c7];      
8 6ee4: 99,02,42             cmpb  R42,2                                   
8 6ee7: d7,16                jne   6eff               if (R42 != 2) goto 6eff;
//  SCCS on (Cruise Control)                                                          //
8 6ee9: 37,a0,13             jnb   B7,Ra0,6eff        if (!B7_[Vsc_states]) goto 6eff;
//  jump if VIP mode flag : disable VSCDT set                                         //
8 6eec: 3f,2a,10             jb    B7,R2a,6eff        if (B7_[VIP_flags]) goto 6eff;
//  134 - PUTMR - Counts up after h/w reset                                           //
8 6eef: a3,72,b4,42          ldw   R42,[R72+b4]       R42 = [Putmr];       
//  compare whole seconds                                                             //
8 6ef3: 9b,79,f2,00,43       cmpb  R43,[R78+f2]                            
//  jmp if timer >= VVSCET?                                                           //
8 6ef8: db,05                jc    6eff               if ((uns) R43 >= [RCp+f2]) goto 6eff;
//  VIP mode flag : set VSCDT and DISABLE RUNNING                                     //
8 6efa: 91,09,2a             orrb  R2a,9              [VIP_flags] |= 9;    
//  jmp to BASE D procs                                                               //
8 6efd: 20,42                sjmp  6f41               goto 6f41;           

6eff - Sub 8 6eff:
8 6eff: 3b,2a,48             jb    B3,R2a,6f4a        if (B3_[VIP_flags]) goto 6f4a;
//  Set VIP mode flag : disable no start and disable VSCDT                            //
8 6f02: 91,a0,2a             orrb  R2a,a0             [VIP_flags] |= a0;   
8 6f05: 28,47                scall 6f4e               Sub0473();           
//  BASE A - computed jump                                                            //
8 6f07: cb,3b,7e,71          push  [R3a+717e]         push([R3a+VecLst8_013]);
8 6f0b: f0                   ret                      return;              

6f0c - Sub 8 6f0c:
8 6f0c: 35,2b,0a             jnb   B5,R2b,6f19        if (!B5_[Flags_2B]) goto 6f19;
//  jump VIP mode flag : disable no start                                             //
8 6f0f: 3c,2a,38             jb    B4,R2a,6f4a        if (B4_[VIP_flags]) goto 6f4a;
8 6f12: 28,3a                scall 6f4e               Sub0473();           
//  BASE B - push self test function proc ?                                           //
8 6f14: cb,3b,68,71          push  [R3a+7168]         push([R3a+VecLst8_012]);
//  test code - KOEO self test and others?                                            //
8 6f18: f0                   ret                      return;              

8 6f19: b3,78,c7,42          ldb   R42,[R78+c7]       R42 = [RCp+c7];      
8 6f1d: 99,02,42             cmpb  R42,2                                   
//  return                                                                            //
8 6f20: d7,2b                jne   6f4d               if (R42 != 2) goto 6f4d;
//  if SCCS ON state - return (exit if cruise control is ON)                          //
8 6f22: 37,a0,28             jnb   B7,Ra0,6f4d        if (!B7_[Vsc_states]) goto 6f4d;
//  134 - PUTMR - Counts up after h/w reset (msec)                                    //
8 6f25: a3,72,b4,42          ldw   R42,[R72+b4]       R42 = [Putmr];       
//  compare msec - 2800 * 1/1024 = 10 seconds                                         //
8 6f29: 99,28,43             cmpb  R43,28                                  
//  if Eng Runnung Timer >= 10seconds then return                                     //
8 6f2c: db,1f                jc    6f4d               if ((uns) R43 >= 28) goto 6f4d;
//  13E - timer? time since last PIP recieved (msec)                                  //
8 6f2e: a3,72,be,42          ldw   R42,[R72+be]       R42 = [Tslpip];      
//  400 msec(1/1024) seconds ~ 1 second                                               //
8 6f32: 99,04,43             cmpb  R43,4                                   
//  if time since PIP <= 1 sec then return                                            //
8 6f35: d1,16                jleu  6f4d               if ((uns) R43 <= 4) goto 6f4d;
//  Set VIP mode flag : VSCST                                                         //
8 6f37: 91,02,2a             orrb  R2a,2              [VIP_flags] |= 2;    
8 6f3a: 28,12                scall 6f4e               Sub0473();           
//  BASE C - computed jump in 7000 area                                               //
8 6f3c: cb,3b,c8,71          push  [R3a+71c8]         push([R3a+VecLst8_014]);
//  run the test routine                                                              //
8 6f40: f0                   ret                      return;              

8 6f41: 28,0b                scall 6f4e               Sub0473();           
//  BASE D - computed jump in 7000 area                                               //
8 6f43: cb,3b,d6,71          push  [R3a+71d6]         push([R3a+Sub0508]); 
//  run the test routine                                                              //
8 6f47: f0                   ret                      return;              

Sub0472:
8 6f48: 21,2b                sjmp  7075               goto Save_diag_vals; 

8 6f4a: 91,08,2c             orrb  R2c,8              [Flags_2C] |= 8;     
8 6f4d: f0                   ret                      return;              

Sub0473:
8 6f4e: 29,00                scall 7050               Get_diag_vals();     
//  function address index                                                            //
8 6f50: ac,38,3a             ldzbw R3a,R38            R3a = (uns)R38;      
//  X 2 - make into word index                                                        //
8 6f53: 09,01,3a             shlw  R3a,1              R3a = R3a * 2;       
//  original return address                                                           //
8 6f56: cc,42                pop   R42                R42 = pop();         
//  push extra address (save diag vals)                                               //
8 6f58: c9,48,6f             push  6f48               push(Sub0472);       
//  Zero 1st time only, This is return address of call x7026                          //
8 6f5b: 88,00,40             cmpw  R40,0                                   
//  jump if first time thru here                                                      //
8 6f5e: df,02                je    6f62               if (R40 == 0) goto 6f62;
//  return to 1st or 3rd caller                                                       //
8 6f60: 20,da                sjmp  703c               goto 703c;           

6f62 - Sub 8 6f62:
8 6f62: c8,42                push  R42                push(R42);           
8 6f64: f0                   ret                      return;              

Sub0475:
8 6f65: a1,10,55,d4          ldw   Rd4,5510           [Vip_code] = 5510;   
8 6f69: 7b,fe,07,d4          sb2b  Rd4,[Rfe+7]        [Vip_code] -= [PIPsC];
8 6f6d: 08,d4,d4             shrw  Rd4,d4             [Vip_code] = [Vip_code] >> [Vip_code];
8 6f70: 28,08                scall 6f7a               Sub0478();           
8 6f72: 20,6f                sjmp  6fe3               goto 6fe3;           

Sub0476:
8 6f74: ad,02,d4             ldzbw Rd4,2              [Vip_code] = (uns)2; 

Sub0477:
8 6f77: 91,02,d9             orrb  Rd9,2              [Vip_flags4] |= 2;   

Sub0478:
8 6f7a: 91,04,d9             orrb  Rd9,4              [Vip_flags4] |= 4;   
8 6f7d: 28,a7                scall 7026               Sub0489();           
8 6f7f: 71,fb,d9             an2b  Rd9,fb             [Vip_flags4] &= fb;  
8 6f82: f0                   ret                      return;              

Sub0479:
8 6f83: b1,10,19             ldb   R19,10             R19 = 10;            
//  is error stack empty?                                                             //
8 6f86: 98,30,00             cmpb  0,R30                                   
8 6f89: d7,04                jne   6f8f               if (0 != R30) goto 6f8f;
8 6f8b: ef,20,0c             call  7bae               SaveTCode1(11);      
8 6f8e: 11                                            #args                

6f8f - Sub 8 6f8f:
8 6f8f: ef,1c,0c             call  7bae               SaveTCode1(0);       
8 6f92: 00                                            #args                

6f93 - Sub 8 6f93:
8 6f93: a1,42,03,30          ldw   R30,342            R30 = 342;           

6f97 - Sub 8 6f97:
8 6f97: ae,31,32             ldzbw R32,[R30++]        R32 = (uns)[R30++];  
8 6f9a: 98,00,32             cmpb  R32,0                                   
//  zero is end of error codes?                                                       //
8 6f9d: df,08                je    6fa7               if (R32 == 0) goto 6fa7;
//  call this for every error                                                         //
8 6f9f: 28,45                scall 6fe6               Sub0483();           
//  342 + 13                                                                          //
8 6fa1: 89,55,03,30          cmpw  R30,355                                 
//  loop back small                                                                   //
8 6fa5: d3,f0                jnc   6f97               if ((uns) R30 < 355) goto 6f97;
8 6fa7: 30,d6,15             jnb   B0,Rd6,6fbf        if (!B0_[STO_flags]) goto 6fbf;
8 6faa: 34,d9,05             jnb   B4,Rd9,6fb2        if (!B4_[Vip_flags4]) goto 6fb2;
8 6fad: b1,04,33             ldb   R33,4              R33 = 4;             
8 6fb0: 21,06                sjmp  70b8               goto 70b8;           

8 6fb2: 28,67                scall 701b               Sub0488();           
8 6fb4: 71,fe,d6             an2b  Rd6,fe             [STO_flags] &= fe;   
8 6fb7: 32,d6,24             jnb   B2,Rd6,6fde        if (!B2_[STO_flags]) goto 6fde;
8 6fba: b1,08,19             ldb   R19,8              R19 = 8;             
//  loop back big                                                                     //
8 6fbd: 27,d4                sjmp  6f93               goto 6f93;           

8 6fbf: 32,d6,0e             jnb   B2,Rd6,6fd0        if (!B2_[STO_flags]) goto 6fd0;
8 6fc2: 71,fb,d6             an2b  Rd6,fb             [STO_flags] &= fb;   
8 6fc5: 36,2a,03             jnb   B6,R2a,6fcb        if (!B6_[VIP_flags]) goto 6fcb;
8 6fc8: 91,10,d9             orrb  Rd9,10             [Vip_flags4] |= 10;  
8 6fcb: 31,d6,10             jnb   B1,Rd6,6fde        if (!B1_[STO_flags]) goto 6fde;
//  loop back big                                                                     //
8 6fce: 27,c3                sjmp  6f93               goto 6f93;           

8 6fd0: 31,d6,13             jnb   B1,Rd6,6fe6        if (!B1_[STO_flags]) goto Sub0483;
8 6fd3: 34,d9,08             jnb   B4,Rd9,6fde        if (!B4_[Vip_flags4]) goto 6fde;
8 6fd6: 91,04,d6             orrb  Rd6,4              [STO_flags] |= 4;    
8 6fd9: b1,0a,33             ldb   R33,a              R33 = a;             
8 6fdc: 20,da                sjmp  70b8               goto 70b8;           

8 6fde: 71,fd,d6             an2b  Rd6,fd             [STO_flags] &= fd;   
8 6fe1: 28,38                scall 701b               Sub0488();           
8 6fe3: e7,28,0f             jump  7f0e               goto Sub0593;        

Sub0483:
8 6fe6: 09,04,32             shlw  R32,4              R32 = R32 * 10;      
8 6fe9: 17,33                incb  R33                R33++;               
8 6feb: 20,04                sjmp  6ff1               goto 6ff1;           

6fed - Sub 8 6fed:
8 6fed: 28,20                scall 700f               Sub0486();           
8 6fef: 28,21                scall 7012               Sub0487();           
8 6ff1: e0,33,f9             djnz  R33,6fed           R33--; if (R33 !=  0) goto 6fed;
8 6ff4: b1,03,33             ldb   R33,3              R33 = 3;             
8 6ff7: 28,19                scall 7012               Sub0487();           
8 6ff9: e0,33,fb             djnz  R33,6ff7           R33--; if (R33 !=  0) goto 6ff7;
8 6ffc: 38,32,07             jb    B0,R32,7006        if (B0_R32) goto 7006;
//  R32 << 4 (one hex digit)                                                          //
8 6fff: 09,04,32             shlw  R32,4              R32 = R32 * 10;      
8 7002: 17,32                incb  R32                R32++;               
8 7004: 27,e3                sjmp  6fe9               goto 6fe9;           

8 7006: b1,04,33             ldb   R33,4              R33 = 4;             

Sub0485:
8 7009: 28,07                scall 7012               Sub0487();           
8 700b: e0,33,fb             djnz  R33,7009           R33--; if (R33 !=  0) goto Sub0485;
8 700e: f0                   ret                      return;              

Sub0486:
8 700f: 91,80,d5             orrb  Rd5,80             Rd5 |= 80;           

Sub0487:
8 7012: e0,19,02             djnz  R19,7017           R19--; if (R19 !=  0) goto 7017;
8 7015: 20,0f                sjmp  7026               goto Sub0489;        

8 7017: 08,01,d4             shrw  Rd4,1              [Vip_code] = [Vip_code] / 2;
8 701a: f0                   ret                      return;              

Sub0488:
8 701b: 3c,19,07             jb    B4,R19,7025        if (B4_R19) goto 7025;
8 701e: 15,19                decb  R19                R19--;               
8 7020: 08,19,d4             shrw  Rd4,19             [Vip_code] = [Vip_code] >> R19;
8 7023: 28,01                scall 7026               Sub0489();           
8 7025: f0                   ret                      return;              

Sub0489:
8 7026: cc,40                pop   R40                R40 = pop();         
//  get & save grandcaller                                                            //
8 7028: cc,14                pop   R14                R14 = pop();         
//  STO fast codes                                                                    //
8 702a: 71,ef,d6             an2b  Rd6,ef             [STO_flags] &= ef;   
//  jump if STO high speed                                                            //
8 702d: 30,d6,03             jnb   B0,Rd6,7033        if (!B0_[STO_flags]) goto 7033;
8 7030: 91,10,d6             orrb  Rd6,10             [STO_flags] |= 10;   
8 7033: b1,10,19             ldb   R19,10             R19 = 10;            
8 7036: 91,20,d6             orrb  Rd6,20             [STO_flags] |= 20;   
//  Self Test Output trigger                                                          //
8 7039: 91,04,2b             orrb  R2b,4              [Flags_2B] |= 4;     
8 703c: 3a,2b,10             jb    B2,R2b,704f        if (B2_[Flags_2B]) goto 704f;
8 703f: 32,d9,03             jnb   B2,Rd9,7045        if (!B2_[Vip_flags4]) goto 7045;
//  return to grandcaller                                                             //
//  return to grandcaller                                                             //
8 7042: 3b,d6,0a             jb    B3,Rd6,704f        if (B3_[STO_flags]) goto 704f;

7045 - Sub 8 7045:
8 7045: c8,14                push  R14                push(R14);           
//  restore caller                                                                    //
8 7047: c8,40                push  R40                push(R40);           
8 7049: 01,40                clrw  R40                R40 = 0;             
//  Save diagnostic testing registers                                                 //
8 704b: 28,28                scall 7075               Save_diag_vals();    
8 704d: 01,d4                clrw  Rd4                [Vip_code] = 0;      
8 704f: f0                   ret                      return;              

Get_diag_vals:
8 7050: a3,72,50,30          ldw   R30,[R72+50]       R30 = [Code_cnt_ex]; 
8 7054: a3,72,5a,32          ldw   R32,[R72+5a]       R32 = [Code_ones_ex];
8 7058: a3,72,62,34          ldw   R34,[R72+62]       R34 = [Vip_nrm_ex];  
8 705c: a3,72,64,36          ldw   R36,[R72+64]       R36 = [Vip_nrm2_EX]; 
8 7060: b3,72,57,38          ldb   R38,[R72+57]       R38 = [Vip_cnt_ex];  
8 7064: a3,72,52,40          ldw   R40,[R72+52]       R40 = [Vip_stack_ex];
8 7068: a3,72,54,14          ldw   R14,[R72+54]       R14 = [Vip_stack_x2];
8 706c: b3,72,4a,18          ldb   R18,[R72+4a]       R18 = [Vip_timer_ex];
8 7070: b3,72,66,19          ldb   R19,[R72+66]       R19 = [Shift_cnt_ex];
8 7074: f0                   ret                      return;              

Save_diag_vals:
8 7075: c3,72,50,30          stw   [R72+50],R30       [Code_cnt_ex] = R30; 
8 7079: c3,72,5a,32          stw   [R72+5a],R32       [Code_ones_ex] = R32;
8 707d: c3,72,62,34          stw   [R72+62],R34       [Vip_nrm_ex] = R34;  
8 7081: c3,72,64,36          stw   [R72+64],R36       [Vip_nrm2_EX] = R36; 
8 7085: c7,72,57,38          stb   [R72+57],R38       [Vip_cnt_ex] = R38;  
8 7089: c3,72,52,40          stw   [R72+52],R40       [Vip_stack_ex] = R40;
8 708d: c3,72,54,14          stw   [R72+54],R14       [Vip_stack_x2] = R14;
8 7091: c7,72,66,19          stb   [R72+66],R19       [Shift_cnt_ex] = R19;
8 7095: f0                   ret                      return;              

Set_EGRFlags:
8 7096: 45,80,00,f2,78       ad3w  R78,Rf2,80         RCp = Ectmax;        
//  why does this REG need resetting                                                  //
8 709b: a1,80,01,72          ldw   R72,180            RRp = 180;           
//  0=sonic, 1=PFE, 2=none                                                            //
8 709f: b3,fa,31,42          ldb   R42,[Rfa+31]       R42 = [Egr_type];    
8 70a3: 71,bf,d9             an2b  Rd9,bf             [Vip_flags4] &= bf;  
8 70a6: 99,02,42             cmpb  R42,2                                   
//  branch ALWAYS in this ROM                                                         //
8 70a9: d7,03                jne   70ae               if (R42 != 2) goto 70ae;
8 70ab: 91,40,d9             orrb  Rd9,40             [Vip_flags4] |= 40;  
8 70ae: 71,bf,e6             an2b  Re6,bf             [Flags_e6] &= bf;    
8 70b1: e0,42,03             djnz  R42,70b7           R42--; if (R42 !=  0) goto 70b7;
//  - never happens in this ROM                                                       //
8 70b4: 91,40,e6             orrb  Re6,40             [Flags_e6] |= 40;    
8 70b7: f0                   ret                      return;              

8 70b8: 2f,4f                scall 7009               Sub0485();           
8 70ba: ad,10,32             ldzbw R32,10             R32 = (uns)10;       
//  process? a trouble code?                                                          //
8 70bd: 2f,27                scall 6fe6               Sub0483();           

70bf - Sub 8 70bf:
8 70bf: 28,5c                scall 711d               Sub0497();           
//  Low Speed Repeat                                                                  //
8 70c1: 30,d6,3f             jnb   B0,Rd6,7103        if (!B0_[STO_flags]) goto 7103;
8 70c4: ad,15,32             ldzbw R32,15             R32 = (uns)15;       
//  R30 = # 356 WORD                                                                  //
8 70c7: c2,30,32             stw   [R30],R32          [R30] = R32;         
8 70ca: 3e,d8,36             jb    B6,Rd8,7103        if (B6_[Vip_flags3]) goto 7103;
8 70cd: ad,11,32             ldzbw R32,11             R32 = (uns)11;       
//  save start code?                                                                  //
8 70d0: c2,30,32             stw   [R30],R32          [R30] = R32;         
8 70d3: 01,1a                clrw  R1a                R1a = 0;             
//  KAMINDEXLow                                                                       //
8 70d5: a1,c4,07,1c          ldw   R1c,7c4            R1c = 7c4;           
8 70d9: b1,08,1e             ldb   R1e,8              R1e = 8;             
//  take next value from 7C4 Table                                                    //
8 70dc: b2,1d,34             ldb   R34,[R1c++]        R34 = [R1c++];       
8 70df: 07,1a                incw  R1a                R1a++;               
//  loop for 25 entries (37)                                                          //
8 70e1: 89,25,00,1a          cmpw  R1a,25                                  
8 70e5: d9,18                jgtu  70ff               if ((uns) R1a > 25) goto 70ff;
8 70e7: 19,01,34             shlb  R34,1              R34 = R34 * 2;       
//  was bit bit set?                                                                  //
8 70ea: d3,0e                jnc   70fa               if (R34 * 2 <= ff) goto 70fa;
//  Table (index starts at 1 not zero)                                                //
8 70ec: 57,1b,42,71,00,1f    ad3b  R1f,0,[R1a+7142]   R1f = 0 + [R1a+OSt8_011_7142];
//  skip zeros                                                                        //
8 70f2: df,06                je    70fa               if (R1f == 0) goto 70fa;
//  write to 356+                                                                     //
8 70f4: c6,31,1f             stb   [R30++],R1f        [R30++] = R1f;       
//  mark as end in case of exit?                                                      //
8 70f7: c6,30,00             stb   [R30],0            [R30] = 0;           

70fa - Sub 8 70fa:
8 70fa: e0,1e,e2             djnz  R1e,70df           R1e--; if (R1e !=  0) goto 70df;
//  loop                                                                              //
8 70fd: 27,da                sjmp  70d9               goto 70d9;           

70ff - Sub 8 70ff:
8 70ff: 28,1c                scall 711d               Sub0497();           
//  Bubble sort Table                                                                 //
8 7101: 28,1f                scall 7122               Sub0498();           
8 7103: 56,31,00,32          ad3b  R32,0,[R30++]      R32 = 0 + [R30++];   
8 7107: df,04                je    710d               if (R32 == 0) goto 710d;
8 7109: 2e,db                scall 6fe6               Sub0483();           
8 710b: 27,f6                sjmp  7103               goto 7103;           

8 710d: 38,d6,08             jb    B0,Rd6,7118        if (B0_[STO_flags]) goto 7118;
8 7110: 32,d6,05             jnb   B2,Rd6,7118        if (!B2_[STO_flags]) goto 7118;
8 7113: 71,fb,d6             an2b  Rd6,fb             [STO_flags] &= fb;   
8 7116: 27,a7                sjmp  70bf               goto 70bf;           

8 7118: 71,ef,d9             an2b  Rd9,ef             [Vip_flags4] &= ef;  
8 711b: 26,95                sjmp  6fb2               goto 6fb2;           

Sub0497:
8 711d: a1,56,03,30          ldw   R30,356            R30 = 356;           
8 7121: f0                   ret                      return;              

Sub0498:
8 7122: 56,31,00,1c          ad3b  R1c,0,[R30++]      R1c = 0 + [R30++];   
//  exit and restore ptr                                                              //
8 7126: df,f5                je    711d               if (R1c == 0) goto Sub0497;
8 7128: a0,30,1a             ldw   R1a,R30            R1a = R30;           
8 712b: 56,1b,00,1d          ad3b  R1d,0,[R1a++]      R1d = 0 + [R1a++];   
8 712f: df,f1                je    7122               if (R1d == 0) goto Sub0498;
8 7131: 98,1c,1d             cmpb  R1d,R1c                                 
8 7134: db,f5                jc    712b               if ((uns) R1d >= R1c) goto 712b;
8 7136: c7,1a,ff,1c          stb   [R1a+ff],R1c       [R1a+ff] = R1c;      
8 713a: b0,1d,1c             ldb   R1c,R1d            R1c = R1d;           
8 713d: c7,30,ff,1c          stb   [R30+ff],R1c       [R30+ff] = R1c;      
8 7141: 27,e8                sjmp  712b               goto 712b;           
        Inc   8 7142: ostruct   OSt8_011_7142 - Other Structure 8 011


OSt8_011 - Other Structure 8 011:
8 7143: 51      ostruct   51
8 7144: 54      ostruct   54
8 7145: 61      ostruct   61
8 7146: 64      ostruct   64
8 7147: 53      ostruct   53
8 7148: 00      ostruct    0
8 7149: 63      ostruct   63
8 714a: 87      ostruct   87
8 714b: 00      ostruct    0
8 714c: 14      ostruct   14
8 714d: 18      ostruct   18
8 714e: 00      ostruct    0
8 714f: 22      ostruct   22
8 7150: 91      ostruct   91
8 7151: 41      ostruct   41
8 7152: 00      ostruct    0


8 7153: 31,32,33,34,35,00,00,00                       Unknown Operation/Structure
8 715b: 29,00,00,00,00,ff,ff,ff                       Unknown Operation/Structure
8 7163: 95,96,56,66,67                                Unknown Operation/Structure



VecLst8_012 - Vectors List 8 012:
8 7168: 0d,78                780d  Bank 8 Vector      Do_KOEO
//  Proc uses next word as a PARAM                                                    //
8 716a: 8c,80                808c  Bank 8 Vector      Sub0597


//  PARAM - interrupt mask address                                                    //
8 716c: 08,00,70,78,d2,78,e4,79                       Unknown Operation/Structure
//  Thermactor Air System test                                                        //
8 7174: ad,79,ce,79,83,6f,01,7b                       Unknown Operation/Structure
//  proc with odd h/w xor                                                             //
8 717c: 1b,7b                                         Unknown Operation/Structure



VecLst8_013 - Vectors List 8 013:
8 717e: e0,7b                7be0  Bank 8 Vector      Sub0562
//  clr STO, Hard Fault, ACT, ECT, TP, TPS ?                                          //
8 7180: 65,6f                6f65  Bank 8 Vector      Sub0475
//  high RPM test (If Engine Running)                                                 //
8 7182: 84,7c                7c84  Bank 8 Vector      Sub0563
8 7184: a3,7c                7ca3  Bank 8 Vector      Sub0565
8 7186: c9,7c                7cc9  Bank 8 Vector      Sub0566
8 7188: e5,7c                7ce5  Bank 8 Vector      Sub0567
8 718a: 11,7d                7d11  Bank 8 Vector      Sub0569
8 718c: 4a,7d                7d4a  Bank 8 Vector      Sub0572
8 718e: 68,7d                7d68  Bank 8 Vector      Sub0573
8 7190: 91,7d                7d91  Bank 8 Vector      Sub0575
8 7192: aa,7d                7daa  Bank 8 Vector      Sub0578
8 7194: 85,80                8085  Bank 8 Vector      Sub0596


//  PARAM  - for proc 8085                                                            //
8 7196: 5a,90,4c,7e,8f,7e,15,7f                       Unknown Operation/Structure
8 719e: 24,7f,37,7f,55,7f,62,7f                       Unknown Operation/Structure
8 71a6: 7f,7f,b1,7f,c8,7f,83,6f                       Unknown Operation/Structure
8 71ae: a6,80,c4,80,f2,80,fe,80                       Unknown Operation/Structure
8 71b6: 21,81,2d,81,77,81,8a,81                       Unknown Operation/Structure
8 71be: ba,81,34,84,79,80,83,6f                       Unknown Operation/Structure
//  in all three Tables at end                                                        //
8 71c6: 34,84                                         Unknown Operation/Structure



VecLst8_014 - Vectors List 8 014:
8 71c8: 92,72                7292  Bank 8 Vector      Sub0508
//  tweak flags                                                                       //
8 71ca: f4,71                71f4  Bank 8 Vector      Sub0499
//  SCCS something                                                                    //
8 71cc: ff,71                71ff  Bank 8 Vector      Sub0501
8 71ce: 73,72                7273  Bank 8 Vector      Sub0504
//  clr 1CA timer, incr R38 self test index, set bit flag and return                  //
8 71d0: 79,80                8079  Bank 8 Vector      Sub0594
//  dump out all 342 stack error codes to ?                                           //
8 71d2: 83,6f                6f83  Bank 8 Vector      Sub0479
//  in all three Tables at end                                                        //
8 71d4: 34,84                8434  Bank 8 Vector      Sub0614
//  STO off and output to low, zero VIP timer, incr R38 test index                    //
8 71d6: 92,72                7292  Bank 8 Vector      Sub0508
8 71d8: fa,71                71fa  Bank 8 Vector      Sub0500
8 71da: 7e,80                807e  Bank 8 Vector      Sub0595


//  PARAM - for proc 807e                                                             //
8 71dc: 69,91,a6,72,cc,72,7e,80                       Unknown Operation/Structure
//  PARAM - for proc 807e                                                             //
8 71e4: 6a,91,d6,72,dc,72,00,73                       Unknown Operation/Structure
//  HEGO - A/F ratio test?                                                            //
8 71ec: 04,73,79,80,83,6f,34,84                       Unknown Operation/Structure


Sub0499:
8 71f4: 91,fb,d7             orrb  Rd7,fb             [Tc_flags] |= fb;    
//  set code flags for clearing later                                                 //
8 71f7: 91,04,d7             orrb  Rd7,4              [Tc_flags] |= 4;     

Sub0500:
8 71fa: ef,77,fd             call  6f74               Sub0476();           
8 71fd: 20,98                sjmp  7297               goto Sub0509;        

Sub0501:
8 71ff: 37,b5,03             jnb   B7,Rb5,7205        if (!B7_[Vsc_flagsb]) goto 7205;
8 7202: 71,7f,d7             an2b  Rd7,7f             [Tc_flags] &= 7f;    
8 7205: 35,b5,03             jnb   B5,Rb5,720b        if (!B5_[Vsc_flagsb]) goto 720b;
8 7208: 71,bf,d7             an2b  Rd7,bf             [Tc_flags] &= bf;    
8 720b: 34,b5,03             jnb   B4,Rb5,7211        if (!B4_[Vsc_flagsb]) goto 7211;
8 720e: 71,df,d7             an2b  Rd7,df             [Tc_flags] &= df;    
8 7211: 33,b5,03             jnb   B3,Rb5,7217        if (!B3_[Vsc_flagsb]) goto 7217;
8 7214: 71,ef,d7             an2b  Rd7,ef             [Tc_flags] &= ef;    
8 7217: 91,08,d7             orrb  Rd7,8              [Tc_flags] |= 8;     
8 721a: 98,b5,00             cmpb  0,Rb5                                   
//  no SCCS buttons/mode                                                              //
8 721d: d7,03                jne   7222               if (0 != [Vsc_flagsb]) goto 7222;
8 721f: 71,f7,d7             an2b  Rd7,f7             [Tc_flags] &= f7;    
8 7222: 31,ea,05             jnb   B1,Rea,722a        if (!B1_[Flags_ea]) goto 722a;
//  Brake is on.                                                                      //
8 7225: 71,fd,d7             an2b  Rd7,fd             [Tc_flags] &= fd;    
8 7228: 20,03                sjmp  722d               goto 722d;           

8 722a: 71,fe,d7             an2b  Rd7,fe             [Tc_flags] &= fe;    
8 722d: 3f,e7,03             jb    B7,Re7,7233        if (B7_[Flag_e7]) goto 7233;
8 7230: 71,fb,d7             an2b  Rd7,fb             [Tc_flags] &= fb;    
8 7233: 51,fb,d7,42          an3b  R42,Rd7,fb         R42 = [Tc_flags] & fb;
8 7237: d7,03                jne   723c               if (R42 != 0) goto 723c;
8 7239: 32,d7,20             jnb   B2,Rd7,725c        if (!B2_[Tc_flags]) goto 725c;
8 723c: ef,fc,0b             call  7e3b               GetWord(Vipt1);      
8 723f: 66,91                                         #args                
8 7241: 3b,d7,15             jb    B3,Rd7,7259        if (B3_[Tc_flags]) goto 7259;
8 7244: 51,f0,d7,42          an3b  R42,Rd7,f0         R42 = [Tc_flags] & f0;
8 7248: df,12                je    725c               if (R42 == 0) goto 725c;
8 724a: 99,f0,42             cmpb  R42,f0                                  
8 724d: d7,05                jne   7254               if (R42 != f0) goto 7254;
//  E49 SPOUT signal defaulted or 1-2 shift error E40D                                //
8 724f: 28,52                scall 72a3               SaveTCode2(49);      
8 7251: 49                                            #args                
8 7252: 20,08                sjmp  725c               goto 725c;           

7254 - Sub 8 7254:
8 7254: 28,4d                scall 72a3               SaveTCode2(47);      
8 7256: 47                                            #args                
8 7257: 20,03                sjmp  725c               goto 725c;           

7259 - Sub 8 7259:
8 7259: 28,48                scall 72a3               SaveTCode2(48);      
8 725b: 48                                            #args                
8 725c: ef,e5,06             call  7944               Sub0544();           
8 725f: 32,d7,03             jnb   B2,Rd7,7265        if (!B2_[Tc_flags]) goto 7265;
//  E67 A/C input high                                                                //
8 7262: 28,3f                scall 72a3               SaveTCode2(67);      
8 7264: 67                                            #args                
8 7265: 31,d7,03             jnb   B1,Rd7,726b        if (!B1_[Tc_flags]) goto 726b;
//  E74 Brake circuit fail - not actuated                                             //
8 7268: 28,39                scall 72a3               SaveTCode2(74);      
8 726a: 74                                            #args                
8 726b: 30,d7,03             jnb   B0,Rd7,7271        if (!B0_[Tc_flags]) goto 7271;
//  E75 Brake circuit fail - always high                                              //
8 726e: 28,33                scall 72a3               SaveTCode2(75);      
8 7270: 75                                            #args                
8 7271: 20,24                sjmp  7297               goto Sub0509;        

Sub0504:
8 7273: ef,79,08             call  7aef               Sub0558();           
8 7276: c9,7f,72             push  727f               push(Sub0505);       
//  SCCS Open Circuit Check, pars = E81,limit,bit mask(=SCCS),IO                      //
8 7279: 28,12                scall 728d               OCC_chk1([681],[4610]);
8 727b: 81,06,10,46                                   #args                

Sub0505:
8 727f: 28,a4                scall 7325               Sub0512();           
//  LSO output line 4 ON (Speed Control Vent)                                         //
8 7281: 91,10,46             orrb  R46,10             [IO_Port_State] |= 10;
//  return from 7A76 to this address                                                  //
8 7284: c9,97,72             push  7297               push(Sub0509);       
//  DOL Open Circuit Check, E82,limit,bit mask(=DOL),IO                               //
8 7287: 28,06                scall 728f               OCC_chk2([482],[4601]);
8 7289: 82,04,01,46                                   #args                

OCC_chk1:
8 728d: 28,8a                scall 7319               Sub0511();           

OCC_chk2:
8 728f: e7,e4,07             jump  7a76               goto Test_IO;        

Sub0508:
8 7292: 01,30                clrw  R30                R30 = 0;             
//  set STO off flag, set STO output low, and set STO trigger                         //
8 7294: ef,1d,05             call  77b4               Reset_STO();         

Sub0509:
8 7297: c7,72,4a,00          stb   [R72+4a],0         [Vip_timer_ex] = 0;  
//  incr test index                                                                   //
8 729b: 17,38                incb  R38                R38++;               
8 729d: f0                   ret                      return;              


//  tweak flags, set STO on and return                                                //
8 729e: ef,0b,05,27,f4                                Unknown Operation/Structure


SaveTCode2:
8 72a3: e7,08,09             jump  7bae               goto SaveTCode1;     


//  From Diagnostic Proc Table D                                                      //
8 72a6: 91,20,d9,a3,79,e2,00,42                       Unknown Operation/Structure
8 72ae: c3,73,2e,01,42,6b,79,e0                       Unknown Operation/Structure
8 72b6: 00,42,8b,73,2c,01,42,d1                       Unknown Operation/Structure
8 72be: dc,ef,79,0b,67,91,2f,dd                       Unknown Operation/Structure
8 72c6: 36,b1,0c,38,20,4d,b1,80                       Unknown Operation/Structure
8 72ce: a0,28,48,91,10,46,27,c1                       Unknown Operation/Structure
//  From Diagnostic Proc Table D                                                      //
8 72d6: c3,72,70,aa,27,bb,4b,72                       Unknown Operation/Structure
8 72de: 70,aa,42,8b,79,ee,00,42                       Unknown Operation/Structure
8 72e6: da,05,2f,b9,28,27,da,03                       Unknown Operation/Structure
8 72ee: 42,8b,79,ec,00,42,da,05                       Unknown Operation/Structure
8 72f6: 2f,ab,27,27,cc,ef,3d,0b                       Unknown Operation/Structure
8 72fe: 68,91,28,17,27,93,a3,fa                       Unknown Operation/Structure
8 7306: 62,42,8b,73,2c,01,42,d9                       Unknown Operation/Structure
8 730e: 08,ef,29,0b,64,d0,2f,8d                       Unknown Operation/Structure
8 7316: 37,17,38                                      Unknown Operation/Structure


Sub0511:
8 7319: 71,df,d9             an2b  Rd9,df             [Vip_flags4] &= df;  
8 731c: 28,07                scall 7325               Sub0512();           
//  LSO output line 4 OFF (Speed Control Vent)                                        //
8 731e: 71,ef,46             an2b  R46,ef             [IO_Port_State] &= ef;
//  LSO output line 0 OFF (Speed Control Vacuum)                                      //
8 7321: 71,fe,46             an2b  R46,fe             [IO_Port_State] &= fe;
8 7324: f0                   ret                      return;              

Sub0512:
8 7325: b1,ff,42             ldb   R42,ff             R42 = ff;            
//  SCCS Count? R9B = R42 why such a strange instruction?                             //
8 7328: c7,73,1b,ff,42       stb   [R72+ff1b],R42     [1009b] = R42;       
8 732d: f0                   ret                      return;              

Chk_Sensors:
8 732e: 2d,66                scall 7096               Set_EGRFlags();      
8 7330: ef,aa,10             call  83dd               Sub0608();           
8 7333: 71,ef,2b             an2b  R2b,ef             [Flags_2B] &= ef;    
8 7336: 38,2a,03             jb    B0,R2a,733c        if (B0_[VIP_flags]) goto 733c;
8 7339: 71,df,d9             an2b  Rd9,df             [Vip_flags4] &= df;  
8 733c: 3a,2a,01             jb    B2,R2a,7340        if (B2_[VIP_flags]) goto 7340;
8 733f: f0                   ret                      return;              

8 7340: 30,2a,01             jnb   B0,R2a,7344        if (!B0_[VIP_flags]) goto 7344;
8 7343: f0                   ret                      return;              

8 7344: 71,f7,2b             an2b  R2b,f7             [Flags_2B] &= f7;    
8 7347: b3,78,f3,42          ldb   R42,[R78+f3]       R42 = [RCp+f3];      
8 734b: e0,42,13             djnz  R42,7361           R42--; if (R42 !=  0) goto 7361;
8 734e: 37,46,18             jnb   B7,R46,7369        if (!B7_[IO_Port_State]) goto 7369;
8 7351: 3a,a1,03             jb    B2,Ra1,7357        if (B2_[a1_Flags]) goto 7357;
8 7354: 91,80,d9             orrb  Rd9,80             [Vip_flags4] |= 80;  
8 7357: c7,72,46,00          stb   [R72+46],0         [Vip_fpmtmr] = 0;    
8 735b: 3c,df,03             jb    B4,Rdf,7361        if (B4_Rdf) goto 7361;
8 735e: 91,08,2b             orrb  R2b,8              [Flags_2B] |= 8;     
8 7361: ef,7c,03             call  76e0               updTCodes([4004],14);
8 7364: 04,40,14                                      #args                
8 7367: 20,2b                sjmp  7394               goto 7394;           

8 7369: 37,d9,18             jnb   B7,Rd9,7384        if (!B7_[Vip_flags4]) goto 7384;
8 736c: 71,7f,d9             an2b  Rd9,7f             [Vip_flags4] &= 7f;  
//  load diagnostic testing registers                                                 //
8 736f: ef,de,fc             call  7050               Get_diag_vals();     
//  call set HSO Time Hold = Master IO Timer Lo + # 0003                              //
8 7372: ef,7a,07             call  7aef               Sub0558();           
//  return to this address                                                            //
8 7375: c9,7f,73             push  737f               push(Sub0514);       
//  E8 Fuel Pump Open Circuit Check                                                   //
8 7378: ef,fb,06             call  7a76               Test_IO(INT_MASK,[4680]);
8 737b: 08,00,80,46                                   #args                

Sub0514:
8 737f: 90,1a,2b             orrb  R2b,R1a            [Flags_2B] |= R1a;   
8 7382: 20,16                sjmp  739a               goto 739a;           

8 7384: b3,72,46,42          ldb   R42,[R72+46]       R42 = [Vip_fpmtmr];  
8 7388: 9b,78,f5,42          cmpb  R42,[R78+f5]                            
8 738c: d3,06                jnc   7394               if ((uns) R42 < [RCp+f5]) goto 7394;
8 738e: 34,df,03             jnb   B4,Rdf,7394        if (!B4_Rdf) goto 7394;
8 7391: 91,08,2b             orrb  R2b,8              [Flags_2B] |= 8;     
8 7394: ef,49,03             call  76e0               updTCodes([8004],13);
8 7397: 04,80,13                                      #args                
8 739a: ef,43,03             call  76e0               updTCodes([TP_Filt],11);
8 739d: 00,01,11                                      #args                
8 73a0: 3b,2c,04             jb    B3,R2c,73a7        if (B3_[Flags_2C]) goto 73a7;
//  exit if CRANKING                                                                  //
8 73a3: 37,a1,01             jnb   B7,Ra1,73a7        if (!B7_[a1_Flags]) goto 73a7;
8 73a6: f0                   ret                      return;              

8 73a7: 71,7f,d8             an2b  Rd8,7f             [Vip_flags3] &= 7f;  
//  ECT raw from AD conversion                                                        //
8 73aa: ef,b7,05             call  7964               Compare([907e],[ECT_Raw]);
8 73ad: 7e,90,12,01                                   #args                
//  trouble code bit 2 - ECT open circuit trouble code                                //
8 73b1: ef,2c,03             call  76e0               updTCodes([2018],d); 
8 73b4: 18,20,0d                                      #args                
8 73b7: ef,aa,05             call  7964               Compare([ECT_Raw],[9080]);
8 73ba: 12,01,80,90                                   #args                
8 73be: ef,1f,03             call  76e0               updTCodes([8020],9); 
8 73c1: 20,80,09                                      #args                
8 73c4: ef,9d,05             call  7964               Compare([9068],[ACT_Raw]);
8 73c7: 68,90,14,01                                   #args                
8 73cb: 2b,13                scall 76e0               updTCodes([EC_1008],f);
8 73cd: 08,10,0f                                      #args                
8 73d0: ef,91,05             call  7964               Compare([ACT_Raw],[906a]);
8 73d3: 14,01,6a,90                                   #args                
8 73d7: 2b,07                scall 76e0               updTCodes([4010],b); 
8 73d9: 10,40,0b                                      #args                
8 73dc: 9b,f8,4b,00          cmpb  0,[Rf8+4b]                              
8 73e0: df,21                je    7403               if (0 == [Sc0085]) goto 7403;
8 73e2: b3,72,b6,42          ldb   R42,[R72+b6]       R42 = [Baptmr];      
8 73e6: 9b,79,96,00,42       cmpb  R42,[R78+96]                            
8 73eb: d1,05                jleu  73f2               if ((uns) R42 <= [RCp+96]) goto 73f2;
8 73ed: 91,08,2b             orrb  R2b,8              [Flags_2B] |= 8;     
8 73f0: 20,11                sjmp  7403               goto 7403;           

8 73f2: ef,6f,05             call  7964               Compare([BAP_Intvl],[9104]);
8 73f5: 0a,01,04,91                                   #args                
8 73f9: 3b,2b,07             jb    B3,R2b,7403        if (B3_[Flags_2B]) goto 7403;
8 73fc: ef,65,05             call  7964               Compare([9102],[BAP_Intvl]);
8 73ff: 02,91,0a,01                                   #args                
8 7403: 2a,db                scall 76e0               updTCodes([859],1);  
8 7405: 59,08,01                                      #args                
8 7408: 8b,79,92,00,ae       cmpw  Rae,[R78+92]                            
8 740d: db,07                jc    7416               if ((uns) [Rpmx4] >= [RCp+TPtr]) goto 7416;
8 740f: ef,52,05             call  7964               Compare([MAF_Raw],[910e]);
8 7412: 24,01,0e,91                                   #args                
8 7416: 2a,c8                scall 76e0               updTCodes([2054],c); 
8 7418: 54,20,0c                                      #args                
8 741b: 3a,a1,12             jb    B2,Ra1,7430        if (B2_[a1_Flags]) goto 7430;
8 741e: a3,72,be,42          ldw   R42,[R72+be]       R42 = [Tslpip];      
8 7422: 8b,79,86,00,42       cmpw  R42,[R78+86]                            
8 7427: d9,07                jgtu  7430               if ((uns) R42 > [RCp+86]) goto 7430;
8 7429: ef,38,05             call  7964               Compare([9110],[MAF_Raw]);
8 742c: 10,91,24,01                                   #args                
8 7430: 2a,ae                scall 76e0               updTCodes([EC_104c],10);
8 7432: 4c,10,10                                      #args                
8 7435: ef,2c,05             call  7964               Compare([9070],[TPS_Raw]);
8 7438: 70,90,22,01                                   #args                
8 743c: 2a,a2                scall 76e0               updTCodes([Pipacl],e);
8 743e: 38,02,0e                                      #args                
8 7441: ef,20,05             call  7964               Compare([TPS_Raw],[906e]);
8 7444: 22,01,6e,90                                   #args                
8 7448: 2a,96                scall 76e0               updTCodes([840],a);  
8 744a: 40,08,0a                                      #args                
8 744d: 33,2c,02             jnb   B3,R2c,7452        if (!B3_[Flags_2C]) goto 7452;
8 7450: 20,90                sjmp  74e2               goto 74e2;           

8 7452: b3,78,24,22          ldb   R22,[R78+24]       R22 = [RCp+Flags_24];
8 7456: e0,22,39             djnz  R22,7492           R22--; if (R22 !=  0) goto 7492;
//  test selector is 1D7 vs 1D6 BYTE here                                             //
8 7459: b3,72,56,20          ldb   R20,[R72+56]       R20 = [Ptcnt];       
8 745d: 98,00,d0             cmpb  Rd0,0                                   
8 7460: d7,03                jne   7465               if ([Apt] != 0) goto 7465;
8 7462: 91,80,e6             orrb  Re6,80             [Flags_e6] |= 80;    
8 7465: 37,d0,11             jnb   B7,Rd0,7479        if (!B7_[Apt]) goto 7479;
8 7468: 37,e6,0e             jnb   B7,Re6,7479        if (!B7_[Flags_e6]) goto 7479;
8 746b: 71,7f,e6             an2b  Re6,7f             [Flags_e6] &= 7f;    
//  increment test routine selector (R38)                                             //
8 746e: 17,20                incb  R20                R20++;               
8 7470: d3,03                jnc   7475               if (R20 <= ff) goto 7475;
//  max test is 00FF                                                                  //
8 7472: b1,ff,20             ldb   R20,ff             R20 = ff;            

7475 - Sub 8 7475:
8 7475: c7,72,56,20          stb   [R72+56],R20       [Ptcnt] = R20;       

7479 - Sub 8 7479:
8 7479: 9b,f3,a6,00,c9       cmpb  Rc9,[Rf2+a6]                            
8 747e: d9,02                jgtu  7482               if ((uns) [Atmr2] > [Vegotm]) goto 7482;
8 7480: 20,10                sjmp  7492               goto 7492;           

8 7482: b3,fe,0b,32          ldb   R32,[Rfe+b]        R32 = [Thrmhp];      
8 7486: e0,32,03             djnz  R32,748c           R32--; if (R32 !=  0) goto 748c;
//  if  Air management2 ON                                                            //
8 7489: 3c,47,06             jb    B4,R47,7492        if (B4_[Flags_47]) goto 7492;
8 748c: 51,b8,c5,32          an3b  R32,Rc5,b8         R32 = [Fmem_flags] & b8;
8 7490: df,0f                je    74a1               if (R32 == 0) goto 74a1;

7492 - Sub 8 7492:
8 7492: c7,72,56,00          stb   [R72+56],0         [Ptcnt] = 0;         
8 7496: 98,22,00             cmpb  0,R22                                   
8 7499: df,04                je    749f               if (0 == R22) goto 749f;
8 749b: 20,1c                sjmp  74b9               goto 74b9;           


//  Never gets here ?                                                                 //
8 749d: 20,02                                         Unknown Operation/Structure

8 749f: 20,41                sjmp  74e2               goto 74e2;           

8 74a1: 9b,f3,a7,00,20       cmpb  R20,[Rf2+a7]                            
8 74a6: d9,02                jgtu  74aa               if ((uns) R20 > [Vptcnt]) goto 74aa;
8 74a8: 20,38                sjmp  74e2               goto 74e2;           

8 74aa: b3,73,25,01,30       ldb   R30,[R72+125]      R30 = [Egoss1];      
8 74af: 9b,f3,a5,00,30       cmpb  R30,[Rf2+a5]                            
8 74b4: db,03                jc    74b9               if ((uns) R30 >= [Vegosw]) goto 74b9;
8 74b6: 91,08,2b             orrb  R2b,8              [Flags_2B] |= 8;     
8 74b9: 2a,25                scall 76e0               updTCodes([Mult_bp212A],8);
8 74bb: 01,02,08                                      #args                
8 74be: b3,fe,16,42          ldb   R42,[Rfe+16]       R42 = [No_hegos];    
8 74c2: 98,22,00             cmpb  0,R22                                   
8 74c5: d7,05                jne   74cc               if (0 != R22) goto 74cc;
8 74c7: 99,01,42             cmpb  R42,1                                   
8 74ca: d7,02                jne   74ce               if (R42 != 1) goto 74ce;
8 74cc: 20,0f                sjmp  74dd               goto 74dd;           

8 74ce: b3,73,26,01,30       ldb   R30,[R72+126]      R30 = [Egoss2];      
8 74d3: 9b,f3,a5,00,30       cmpb  R30,[Rf2+a5]                            
8 74d8: db,03                jc    74dd               if ((uns) R30 >= [Vegosw]) goto 74dd;
8 74da: 91,08,2b             orrb  R2b,8              [Flags_2B] |= 8;     
8 74dd: 2a,01                scall 76e0               updTCodes([401],12); 
8 74df: 01,04,12                                      #args                
8 74e2: b3,79,f9,00,42       ldb   R42,[R78+f9]       R42 = [RCp+f9];      
8 74e7: e0,42,65             djnz  R42,754f           R42--; if (R42 !=  0) goto 754f;
8 74ea: b3,78,c7,42          ldb   R42,[R78+c7]       R42 = [RCp+c7];      
8 74ee: 98,00,42             cmpb  R42,0                                   
8 74f1: df,5c                je    754f               if (R42 == 0) goto 754f;
8 74f3: b3,fe,02,42          ldb   R42,[Rfe+2]        R42 = [TRLOAD];      
8 74f7: 99,04,42             cmpb  R42,4                                   
8 74fa: db,1a                jc    7516               if ((uns) R42 >= 4) goto 7516;
8 74fc: a3,73,dc,00,42       ldw   R42,[R72+dc]       R42 = [Daspot];      
8 7501: 3c,c5,0e             jb    B4,Rc5,7512        if (B4_[Fmem_flags]) goto 7512;
8 7504: 37,d0,0b             jnb   B7,Rd0,7512        if (!B7_[Apt]) goto 7512;
8 7507: 8b,f3,14,01,42       cmpw  R42,[Rf2+114]                           
8 750c: d9,04                jgtu  7512               if ((uns) R42 > [Vsload]) goto 7512;
8 750e: 20,18                sjmp  7528               goto 7528;           


8 7510: 20,02                                         Unknown Operation/Structure

8 7512: 20,0e                sjmp  7522               goto 7522;           


8 7514: 20,0c                                         Unknown Operation/Structure

8 7516: 37,e7,09             jnb   B7,Re7,7522        if (!B7_[Flag_e7]) goto 7522;
8 7519: 8b,f3,74,01,ae       cmpw  Rae,[Rf2+174]                           
8 751e: d3,02                jnc   7522               if ((uns) [Rpmx4] < [Vsamin]) goto 7522;
8 7520: 20,06                sjmp  7528               goto 7528;           

8 7522: c7,72,49,00          stb   [R72+49],0         [Vsstmr] = 0;        
8 7526: 20,27                sjmp  754f               goto 754f;           

8 7528: 8b,f3,76,01,ae       cmpw  Rae,[Rf2+176]                           
8 752d: db,04                jc    7533               if ((uns) [Rpmx4] >= [Vsmmin]) goto 7533;
8 752f: 20,1e                sjmp  754f               goto 754f;           


8 7531: 20,0d                                         Unknown Operation/Structure

8 7533: b3,72,49,42          ldb   R42,[R72+49]       R42 = [Vsstmr];      
8 7537: 9b,f3,7a,01,42       cmpb  R42,[Rf2+17a]                           
8 753c: db,02                jc    7540               if ((uns) R42 >= [Vsstim]) goto 7540;
8 753e: 20,0f                sjmp  754f               goto 754f;           

8 7540: b3,73,3d,01,42       ldb   R42,[R72+13d]      R42 = [Mph_FiltH];   
8 7545: 9b,f3,78,01,42       cmpb  R42,[Rf2+178]                           
8 754a: db,03                jc    754f               if ((uns) R42 >= [Vssmn1]) goto 754f;
8 754c: 91,08,2b             orrb  R2b,8              [Flags_2B] |= 8;     
8 754f: 29,8f                scall 76e0               updTCodes([8003],2); 
8 7551: 03,80,02                                      #args                
8 7554: 36,d9,02             jnb   B6,Rd9,7559        if (!B6_[Vip_flags4]) goto 7559;
8 7557: 20,d9                sjmp  7632               goto 7632;           

8 7559: 3e,e6,0d             jb    B6,Re6,7569        if (B6_[Flags_e6]) goto 7569;
//  Lo,Hi limit, E hi = none, E Lo - PFE/EVP/ (sonic) voltage below closed limit      //
8 755c: ef,70,09             call  7ecf               ChkSensor([EVP_Raw],Vevpll,Evpmin,R32);
8 755f: 16,01,b4,90,b0,90,32,00                       #args                
8 7567: 20,1f                sjmp  7588               goto 7588;           

8 7569: 3f,d0,02             jb    B7,Rd0,756e        if (B7_[Apt]) goto 756e;
8 756c: 20,80                sjmp  75ee               goto 75ee;           

8 756e: a3,72,88,42          ldw   R42,[R72+88]       R42 = [RPM_Filt1];   
8 7572: 8b,79,c8,00,42       cmpw  R42,[R78+c8]                            
8 7577: db,f3                jc    756c               if ((uns) R42 >= [RCp+Atmr1]) goto 756c;
8 7579: 2a,5c                scall 77d7               SrolavT([Fiept]);    
8 757b: 80,03                                         #args                
//  PFE/EVP/ (sonic) voltage below closed limit, Defective PFE/EPT sensor ?           //
8 757d: ef,4f,09             call  7ecf               ChkSensor([Fiept],Veptil,Eptmin,[3432]);
8 7580: 80,03,40,91,34,91,32,34                       #args                
8 7588: b0,1a,40             ldb   R40,R1a            R40 = R1a;           
8 758b: 2a,60                scall 77ed               Set_TC(31);          
8 758d: 31                                            #args                
8 758e: 29,50                scall 76e0               updTCodes([802a],3); 
8 7590: 2a,80,03                                      #args                
8 7593: 2a,58                scall 77ed               Set_TC(35);          
8 7595: 35                                            #args                
8 7596: 29,48                scall 76e0               updTCodes([832],7);  
8 7598: 32,08,07                                      #args                
8 759b: 33,2c,08             jnb   B3,R2c,75a6        if (!B3_[Flags_2C]) goto 75a6;
8 759e: 71,bf,2c             an2b  R2c,bf             [Flags_2C] &= bf;    
8 75a1: 71,7f,2c             an2b  R2c,7f             [Flags_2C] &= 7f;    
8 75a4: 20,87                sjmp  762d               goto 762d;           

8 75a6: 2a,45                scall 77ed               Set_TC(32);          
8 75a8: 32                                            #args                
8 75a9: 29,35                scall 76e0               updTCodes([4002],4); 
8 75ab: 02,40,04                                      #args                
8 75ae: 36,e6,0a             jnb   B6,Re6,75bb        if (!B6_[Flags_e6]) goto 75bb;
8 75b1: 2a,3a                scall 77ed               Set_TC(34);          
8 75b3: 34                                            #args                
8 75b4: 29,2a                scall 76e0               updTCodes([EC_1002],6);
8 75b6: 02,10,06                                      #args                
8 75b9: 20,33                sjmp  75ee               goto 75ee;           

8 75bb: 3c,40,e0             jb    B4,R40,759e        if (B4_R40) goto 759e;
8 75be: 98,00,d3             cmpb  Rd3,0                                   
8 75c1: d7,28                jne   75eb               if (Rd3 != 0) goto 75eb;
8 75c3: 71,7f,2c             an2b  R2c,7f             [Flags_2C] &= 7f;    
8 75c6: 3e,2c,07             jb    B6,R2c,75d0        if (B6_[Flags_2C]) goto 75d0;
8 75c9: c7,72,4a,00          stb   [R72+4a],0         [Vip_timer_ex] = 0;  
8 75cd: 91,40,2c             orrb  R2c,40             [Flags_2C] |= 40;    
8 75d0: ef,91,03             call  7964               Compare([EVP_Raw],[90b6]);
8 75d3: 16,01,b6,90                                   #args                
8 75d7: 33,2b,0a             jnb   B3,R2b,75e4        if (!B3_[Flags_2B]) goto 75e4;
8 75da: b3,72,4a,18          ldb   R18,[R72+4a]       R18 = [Vip_timer_ex];
8 75de: 9b,78,3c,18          cmpb  R18,[R78+3c]                            
8 75e2: d3,4e                jnc   7632               if ((uns) R18 < [RCp+3c]) goto 7632;
8 75e4: 28,fa                scall 76e0               updTCodes([EC_1002],6);
8 75e6: 02,10,06                                      #args                
8 75e9: 20,42                sjmp  762d               goto 762d;           

8 75eb: 71,bf,2c             an2b  R2c,bf             [Flags_2C] &= bf;    
8 75ee: 9b,78,29,d3          cmpb  Rd3,[R78+29]                            
8 75f2: d3,aa                jnc   759e               if ((uns) Rd3 < [RCp+Flags_29]) goto 759e;
8 75f4: a3,73,dc,00,42       ldw   R42,[R72+dc]       R42 = [Daspot];      
8 75f9: 8b,78,2e,42          cmpw  R42,[R78+2e]                            
8 75fd: d9,9f                jgtu  759e               if ((uns) R42 > [RCp+Flags_2E]) goto 759e;
8 75ff: 3f,2c,07             jb    B7,R2c,7609        if (B7_[Flags_2C]) goto 7609;
8 7602: 91,80,2c             orrb  R2c,80             [Flags_2C] |= 80;    
8 7605: c7,72,4a,00          stb   [R72+4a],0         [Vip_timer_ex] = 0;  
8 7609: 3e,e6,09             jb    B6,Re6,7615        if (B6_[Flags_e6]) goto 7615;
8 760c: ef,55,03             call  7964               Compare([90ba],[EVP_Raw]);
8 760f: ba,90,16,01                                   #args                
8 7613: 20,0b                sjmp  7620               goto 7620;           

8 7615: 29,c0                scall 77d7               SrolavT([Cfiept]);   
8 7617: 7e,03                                         #args                
8 7619: ef,48,03             call  7964               Compare([Cfiept],[9146]);
8 761c: 7e,03,46,91                                   #args                
8 7620: 33,2b,0a             jnb   B3,R2b,762d        if (!B3_[Flags_2B]) goto 762d;
8 7623: b3,72,4a,18          ldb   R18,[R72+4a]       R18 = [Vip_timer_ex];
8 7627: 9b,78,28,18          cmpb  R18,[R78+28]                            
8 762b: d3,05                jnc   7632               if ((uns) R18 < [RCp+Flags_28]) goto 7632;
8 762d: 28,b1                scall 76e0               updTCodes([2002],5); 
8 762f: 02,20,05                                      #args                
8 7632: 71,f7,2b             an2b  R2b,f7             [Flags_2B] &= f7;    
8 7635: 8b,78,fa,ae          cmpw  Rae,[R78+fa]                            
8 7639: db,02                jc    763d               if ((uns) [Rpmx4] >= [RCp+fa]) goto 763d;
8 763b: 20,36                sjmp  7673               goto 7673;           

8 763d: 2b,25                scall 7964               Compare([Tslpip],[907c]);
8 763f: 3e,01,7c,90                                   #args                
8 7643: 33,2b,0b             jnb   B3,R2b,7651        if (!B3_[Flags_2B]) goto 7651;
8 7646: 91,01,2c             orrb  R2c,1              [Flags_2C] |= 1;     
8 7649: c7,72,3f,00          stb   [R72+3f],0         [Idm_fault_cnt] = 0; 
//  time in self test mode?                                                           //
8 764d: c3,72,44,00          stw   [R72+44],0         [Tslidm] = 0;        
8 7651: 28,8d                scall 76e0               updTCodes([4001],0); 
8 7653: 01,40,00                                      #args                
8 7656: 38,2c,0d             jb    B0,R2c,7666        if (B0_[Flags_2C]) goto 7666;
8 7659: 2b,09                scall 7964               Compare([Tslidm],[9078]);
8 765b: c4,01,78,90                                   #args                
8 765f: 28,7f                scall 76e0               updTCodes([2001],15);
8 7661: 01,20,15                                      #args                
8 7664: 20,11                sjmp  7677               goto 7677;           

8 7666: a3,72,44,42          ldw   R42,[R72+44]       R42 = [Tslidm];      
8 766a: 9b,f2,76,43          cmpb  R43,[Rf2+76]                            
8 766e: d1,07                jleu  7677               if ((uns) R43 <= [Vidmst]) goto 7677;
8 7670: 71,fe,2c             an2b  R2c,fe             [Flags_2C] &= fe;    
8 7673: c3,72,44,00          stw   [R72+44],0         [Tslidm] = 0;        
8 7677: 29,80                scall 77f9               upd_flflg(LIO_PORT,20);
8 7679: 03,00,20                                      #args                
8 767c: 29,7b                scall 77f9               upd_flflg(HSI_MASK,80);
8 767e: 0c,00,80                                      #args                
8 7681: 29,76                scall 77f9               upd_flflg(R30,40);   
8 7683: 30,00,40                                      #args                
8 7686: 29,71                scall 77f9               upd_flflg([Mkay],10);
8 7688: c0,00,10                                      #args                
8 768b: 29,6c                scall 77f9               upd_flflg([400],2);  
8 768d: 00,04,02                                      #args                
8 7690: 29,67                scall 77f9               upd_flflg([300],8);  
8 7692: 00,03,08                                      #args                
8 7695: 33,2c,09             jnb   B3,R2c,76a1        if (!B3_[Flags_2C]) goto 76a1;
8 7698: 37,d8,04             jnb   B7,Rd8,769f        if (!B7_[Vip_flags3]) goto 769f;
//  tweak flags, set STO on and return                                                //
8 769b: 29,0f                scall 77ac               Set_STO();           
8 769d: 20,02                sjmp  76a1               goto 76a1;           

769f - Sub 8 769f:
8 769f: 29,13                scall 77b4               Reset_STO();         
8 76a1: 39,25,3b             jb    B1,R25,76df        if (B1_[Flags_25]) goto 76df;
8 76a4: 3f,a1,38             jb    B7,Ra1,76df        if (B7_[a1_Flags]) goto 76df;
8 76a7: 3a,a1,35             jb    B2,Ra1,76df        if (B2_[a1_Flags]) goto 76df;
8 76aa: b3,73,2d,ff,14       ldb   R14,[R72+ff2d]     R14 = [100ad];       
8 76af: 9b,f2,6c,14          cmpb  R14,[Rf2+6c]                            
8 76b3: d6,2a                jge   76df               if ((sig) R14 >= [Vect5]) goto 76df;
8 76b5: 9b,f3,fe,00,b0       cmpb  Rb0,[Rf2+fe]                            
8 76ba: da,23                jle   76df               if ((sig) [ECT] <= [Vect3]) goto 76df;
8 76bc: 91,02,25             orrb  R25,2              [Flags_25] |= 2;     
8 76bf: 30,ef,1d             jnb   B0,Ref,76df        if (!B0_[Flags_ef]) goto 76df;
//  jump if STI input is high                                                         //
8 76c2: 3d,2b,1a             jb    B5,R2b,76df        if (B5_[Flags_2B]) goto 76df;
8 76c5: a1,17,00,38          ldw   R38,17             R38 = 17;            

76c9 - Sub 8 76c9:
8 76c9: b3,39,c9,07,3a       ldb   R3a,[R38+7c9]      R3a = [R38+Kam_index6];
8 76ce: 17,3a                incb  R3a                R3a++;               
8 76d0: d7,02                jne   76d4               if ([Flags_25] != R3a) goto 76d4;
//  clamp to FF max                                                                   //
8 76d2: 15,3a                decb  R3a                R3a--;               
8 76d4: c7,39,c9,07,3a       stb   [R38+7c9],R3a      [R38+Kam_index6] = R3a;
8 76d9: e0,38,ed             djnz  R38,76c9           R38--; if (R38 !=  0) goto 76c9;
8 76dc: 71,fe,ef             an2b  Ref,fe             [Flags_ef] &= fe;    
8 76df: f0                   ret                      return;              

updTCodes:
8 76e0: 28,dc                scall 77be               GetbytesR1a(3);      
8 76e2: 03                                            #args                
//  3rd param byte to word                                                            //
8 76e3: bc,1c,14             ldsbw R14,R1c            R14 = (sig)R1c;      
//  address 8E5A + data offset                                                        //
8 76e6: 44,f2,14,42          ad3w  R42,R14,Rf2        R42 = R14 + Rf2;     
//  read ROM at lookup address                                                        //
8 76ea: b3,43,d7,00,42       ldb   R42,[R42+d7]       R42 = [R42+Tc_flags];
//  same ROM address AGAIN                                                            //
8 76ef: 44,f2,14,3a          ad3w  R3a,R14,Rf2        R3a = R14 + Rf2;     
//  what is this byte RAM Table?                                                      //
8 76f3: b3,3b,c1,00,3a       ldb   R3a,[R3a+c1]       R3a = [R3a+c1];      
//  1st param byte to word                                                            //
8 76f8: ac,1a,18             ldzbw R18,R1a            R18 = (uns)R1a;      
//  mask out bottom 3 bits of first param (0 -7)                                      //
8 76fb: 71,07,18             an2b  R18,7              R18 &= 7;            
//  R18 is now a pointer to ?                                                         //
8 76fe: 65,c4,07,18          ad2w  R18,7c4            R18 += 7c4;          
8 7702: 01,1c                clrw  R1c                R1c = 0;             
//  first param >> 3 (shift out offset bits) 5 bits left                              //
8 7704: 18,03,1a             shrb  R1a,3              R1a = R1a / 8;       
//  zero value is special ( flag bits are biased up by one )                          //
8 7707: df,07                je    7710               if (R1a == 8) goto 7710;
8 7709: 15,1a                decb  R1a                R1a--;               
//  R1C = 0001 now                                                                    //
8 770b: 07,1c                incw  R1c                R1c++;               
//  creates a mask of bit # (R1A - 1)                                                 //
8 770d: 09,1a,1c             shlw  R1c,1a             R1c = R1c << R1a;    

7710 - Sub 8 7710:
8 7710: a3,73,02,02,34       ldw   R34,[R72+202]      R34 = [Fmem_monitor];
//  R14 is second param                                                               //
8 7715: b3,15,aa,01,30       ldb   R30,[R14+1aa]      R30 = [R14+C14FIL];  
//  value looked up above                                                             //
8 771a: 98,42,00             cmpb  0,R42                                   
8 771d: df,0d                je    772c               if (0 == R42) goto 772c;
8 771f: 33,2c,07             jnb   B3,R2c,7729        if (!B3_[Flags_2C]) goto 7729;
8 7722: b3,78,f2,3a          ldb   R3a,[R78+f2]       R3a = [RCp+f2];      
8 7726: b1,ff,42             ldb   R42,ff             R42 = ff;            
8 7729: 3b,2b,2a             jb    B3,R2b,7756        if (B3_[Flags_2B]) goto 7756;
8 772c: 98,00,30             cmpb  R30,0                                   
8 772f: df,02                je    7733               if (R30 == 0) goto 7733;
8 7731: 15,30                decb  R30                R30--;               
8 7733: 5b,78,7f,3a,3b       sb3b  R3b,R3a,[R78+7f]   R3b = R3a - [RCp+7f];
8 7738: 98,30,3b             cmpb  R3b,R30                                 
8 773b: d1,05                jleu  7742               if ((uns) R3b <= R30) goto 7742;
//  invert mask                                                                       //
8 773d: 02,1c                cplw  R1c                R1c = ~R1c;          
//  clear the error bit                                                               //
8 773f: 60,1c,34             an2w  R34,R1c            R34 &= R1c;          
8 7742: b1,28,42             ldb   R42,28             R42 = 28;            
//  R14 is still? 3rd param byte (0x76E3)                                             //
8 7745: 9b,15,ca,07,42       cmpb  R42,[R14+7ca]                           
8 774a: d9,08                jgtu  7754               if ((uns) R42 > [R14+K14CNT]) goto 7754;
8 774c: 12,1b                cplb  R1b                R1b = ~R1b;          
8 774e: 72,18,1b             an2b  R1b,[R18]          R1b &= [R18];        
8 7751: c6,18,1b             stb   [R18],R1b          [R18] = R1b;         
8 7754: 20,37                sjmp  778d               goto 778d;           

8 7756: 71,f7,2b             an2b  R2b,f7             [Flags_2B] &= f7;    
//  add second param and looked up ROm value                                          //
8 7759: 74,42,30             ad2b  R30,R42            R30 += R42;          
8 775c: d3,03                jnc   7761               if (R30 <= ff) goto 7761;
//  clamp max value                                                                   //
8 775e: b1,ff,30             ldb   R30,ff             R30 = ff;            

7761 - Sub 8 7761:
8 7761: 98,30,3a             cmpb  R3a,R30                                 
8 7764: db,27                jc    778d               if ((uns) R3a >= R30) goto 778d;
//  what is this address ?                                                            //
8 7766: 89,c6,07,18          cmpw  R18,7c6                                 
8 776a: d7,13                jne   777f               if (R18 != 7c6) goto 777f;
//  clr bits 0,1,2                                                                    //
8 776c: 51,f8,1b,33          an3b  R33,R1b,f8         R33 = R1b & f8;      
8 7770: df,0d                je    777f               if (R33 == 0) goto 777f;
8 7772: b2,18,33             ldb   R33,[R18]          R33 = [R18];         
//  clr bits 0,1,2                                                                    //
8 7775: 71,f8,33             an2b  R33,f8             R33 &= f8;           
8 7778: df,05                je    777f               if (R33 == f8) goto 777f;
8 777a: 70,1b,33             an2b  R33,R1b            R33 &= R1b;          
8 777d: df,0b                je    778a               if (R33 == R1b) goto 778a;
8 777f: 92,18,1b             orrb  R1b,[R18]          R1b |= [R18];        
8 7782: c6,18,1b             stb   [R18],R1b          [R18] = R1b;         
8 7785: c7,15,ca,07,00       stb   [R14+7ca],0        [R14+K14CNT] = 0;    

778a - Sub 8 778a:
8 778a: 80,1c,34             orrw  R34,R1c            R34 |= R1c;          
8 778d: 98,30,3a             cmpb  R3a,R30                                 
8 7790: db,03                jc    7795               if ((uns) R3a >= R30) goto 7795;
8 7792: 91,80,d8             orrb  Rd8,80             [Vip_flags3] |= 80;  

7795 - Sub 8 7795:
8 7795: c7,15,aa,01,30       stb   [R14+1aa],R30      [R14+C14FIL] = R30;  
//  382 error bit flags, bit 2 set = ECT grounded                                     //
8 779a: c3,73,02,02,34       stw   [R72+202],R34      [Fmem_monitor] = R34;
8 779f: f0                   ret                      return;              

clear_KAM:
8 77a0: ad,1d,16             ldzbw R16,1d             R16 = (uns)1d;       

77a3 - Sub 8 77a3:
8 77a3: c7,17,c3,07,00       stb   [R16+7c3],0        [R16+7c3] = 0;       
8 77a8: e0,16,f8             djnz  R16,77a3           R16--; if (R16 !=  0) goto 77a3;
8 77ab: f0                   ret                      return;              

Set_STO:
8 77ac: 91,80,d6             orrb  Rd6,80             [STO_flags] |= 80;   
//  LSO output line 5 (STO) ON (MIL)                                                  //
8 77af: 91,20,46             orrb  R46,20             [IO_Port_State] |= 20;
8 77b2: 20,06                sjmp  77ba               goto 77ba;           

Reset_STO:
8 77b4: 91,40,d6             orrb  Rd6,40             [STO_flags] |= 40;   
//  LSO output line 5 (STO) OFF (MIL)                                                 //
8 77b7: 71,df,46             an2b  R46,df             [IO_Port_State] &= df;

77ba - Sub 8 77ba:
8 77ba: 91,04,2b             orrb  R2b,4              [Flags_2B] |= 4;     
8 77bd: f0                   ret                      return;              

GetbytesR1a:
8 77be: a1,1a,00,16          ldw   R16,1a             R16 = 1a;            

Getbytes:
8 77c2: cc,3c                pop   R3c                R3c = pop();         
//  Get count of bytes, Inc return address                                            //
8 77c4: b2,3d,3a             ldb   R3a,[R3c++]        R3a = [R3c++];       
//  Get GrandCaller's return address                                                  //
8 77c7: cc,42                pop   R42                R42 = pop();         
8 77c9: b2,43,3b             ldb   R3b,[R42++]        R3b = [R42++];       
8 77cc: c6,17,3b             stb   [R16++],R3b        [R16++] = R3b;       
//  Get no of bytes into dest. addr                                                   //
8 77cf: e0,3a,f7             djnz  R3a,77c9           R3a--; if (R3a !=  0) goto 77c9;
8 77d2: c8,42                push  R42                push(R42);           
//  and push modded returns back.                                                     //
8 77d4: c8,3c                push  R3c                push(R3c);           
8 77d6: f0                   ret                      return;              

SrolavT:
8 77d7: 2f,e5                scall 77be               GetbytesR1a(2);      
8 77d9: 02                                            #args                
//  (address of) OLD AD sensor value                                                  //
8 77da: a2,1a,32             ldw   R32,[R1a]          R32 = [R1a];         
//  NEW AD sensor value 216 - raw EVP                                                 //
8 77dd: a3,72,96,34          ldw   R34,[R72+96]       R34 = [EVP_Raw];     
//  manged filter factor                                                              //
8 77e1: a3,79,ca,00,36       ldw   R36,[R78+ca]       R36 = [RCp+Flag_ca]; 
//  filter                                                                            //
8 77e6: ef,7a,be             call  3663               Urolav();            
//  save updated value                                                                //
8 77e9: c2,1a,3e             stw   [R1a],R3e          [R1a] = R3e;         
8 77ec: f0                   ret                      return;              

Set_TC:
8 77ed: 2f,cf                scall 77be               GetbytesR1a(1);      
8 77ef: 01                                            #args                
8 77f0: 98,1a,40             cmpb  R40,R1a                                 
8 77f3: d7,03                jne   77f8               if (R40 != R1a) goto 77f8;
8 77f5: 91,08,2b             orrb  R2b,8              [Flags_2B] |= 8;     
8 77f8: f0                   ret                      return;              

upd_flflg:
8 77f9: 2f,c3                scall 77be               GetbytesR1a(3);      
8 77fb: 03                                            #args                
//  382 word                                                                          //
8 77fc: 63,73,02,02,1a       an2w  R1a,[R72+202]      R1a &= [Fmem_monitor];
8 7801: df,04                je    7807               if (R1a == [Fmem_monitor]) goto 7807;
8 7803: 90,1c,c5             orrb  Rc5,R1c            [Fmem_flags] |= R1c; 
8 7806: f0                   ret                      return;              

8 7807: 12,1c                cplb  R1c                R1c = ~R1c;          
8 7809: 70,1c,c5             an2b  Rc5,R1c            [Fmem_flags] &= R1c; 
8 780c: f0                   ret                      return;              

Do_KOEO:
8 780d: 3d,2c,25             jb    B5,R2c,7835        if (B5_[Flags_2C]) goto 7835;
//  set STO off flag, set STO output low, and set STO trigger                         //
8 7810: ef,a1,ff             call  77b4               Reset_STO();         
//  do h/w RAM/ROM/CPU checks                                                         //
8 7813: ef,67,0a             call  827d               HW_Check();          
//  load diagnostic testing registers                                                 //
8 7816: ef,37,f8             call  7050               Get_diag_vals();     
//  jump if not VIP mode flag : disable no start                                      //
8 7819: 34,2a,05             jnb   B4,R2a,7821        if (!B4_[VIP_flags]) goto 7821;

781c - Sub 8 781c:
8 781c: ef,8d,ff             call  77ac               Set_STO();           
//  *HANG* - h/w error                                                                //
8 781f: 27,fb                sjmp  781c               goto 781c;           

7821 - Sub 8 7821:
8 7821: ef,20,00             call  7844               Do_Csum();           
//  test selector set to zero                                                         //
8 7824: 11,38                clrb  R38                R38 = 0;             
8 7826: 38,30,0c             jb    B0,R30,7835        if (B0_R30) goto 7835;
//  STO very fast readout set                                                         //
8 7829: 91,10,2c             orrb  R2c,10             [Flags_2C] |= 10;    
8 782c: ad,05,d4             ldzbw Rd4,5              [Vip_code] = (uns)5; 
//  the skip two returns do not return here                                           //
8 782f: ef,45,f7             call  6f77               Sub0477();           
//  clear STO very fast readout                                                       //
8 7832: 71,ef,2c             an2b  R2c,ef             [Flags_2C] &= ef;    

7835 - Sub 8 7835:
8 7835: 91,20,2c             orrb  R2c,20             [Flags_2C] |= 20;    
//  Set VIP mode flag : no start                                                      //
8 7838: 91,40,2a             orrb  R2a,40             [VIP_flags] |= 40;   
//  if LSO output line 7 is ON (Fuel Pump)                                            //
8 783b: 3f,46,05             jb    B7,R46,7843        if (B7_[IO_Port_State]) goto 7843;
//  jump if not VIP mode flag : VIP enable                                            //
8 783e: 32,2a,02             jnb   B2,R2a,7843        if (!B2_[VIP_flags]) goto 7843;
//  zero 1CA VIP TIMER EX, incr R38 self test index, and return                       //
8 7841: 20,88                sjmp  78cb               goto 78cb;           

8 7843: f0                   ret                      return;              

Do_Csum:
8 7844: 01,30                clrw  R30                R30 = 0;             
8 7846: 01,3c                clrw  R3c                R3c = 0;             
//  Start address (2000)                                                              //
8 7848: a1,6a,78,42          ldw   R42,786a           R42 = ChkStartAdr;   

784c - Sub 8 784c:
8 784c: 46,43,00,3a          ad3w  R3a,0,[R42++]      R3a = 0 + [R42++];   
//  If real end address                                                               //
8 7850: df,0d                je    785f               if (R3a == 0) goto 785f;
8 7852: a2,43,3e             ldw   R3e,[R42++]        R3e = [R42++];       

7855 - Sub 8 7855:
8 7855: 66,3b,3c             ad2w  R3c,[R3a++]        R3c += [R3a++];      
//  end address reached?                                                              //
8 7858: 88,3e,3a             cmpw  R3a,R3e                                 
//  loop                                                                              //
8 785b: d1,f8                jleu  7855               if ((uns) R3a <= R3e) goto 7855;
//  load next ROM range                                                               //
8 785d: 27,ed                sjmp  784c               goto 784c;           

8 785f: 88,3c,00             cmpw  0,R3c                                   
//  checksum zero ?                                                                   //
8 7862: df,03                je    7867               if (0 == R3c) goto 7867;
//  E15 - EEC ROM fail                                                                //
8 7864: 2b,48                scall 7bae               SaveTCode1(15);      
8 7866: 15                                            #args                

7867 - Sub 8 7867:
8 7867: 20,62                sjmp  78cb               goto 78cb;           


8 7869: ff                                            Unknown Operation/Structure



ChkStartAdr - Checksum Start Address:
8 786a: 20,00             ChkStartAdr       oword      2000                8192

ChkEndAdr - Checksum End Address:
8 786c: 9f,fe             ChkEndAdr         oword      9ffe               40958

ScScSadDir022:
8 786e: 00,00             ScScSadDir022     oword         0                   0



Test1:
//                                                                                    //
8 7870: b0,30,32,28,f7,7e,90,12                       Unknown Operation/Structure
8 7878: 01,61,28,f0,12,01,80,90                       Unknown Operation/Structure
8 7880: 51,98,30,32,d7,09,2b,38                       Unknown Operation/Structure
8 7888: 12,01,f8,90,f6,90,21,9b                       Unknown Operation/Structure
8 7890: f8,4b,00,df,1a,b3,72,b6                       Unknown Operation/Structure
8 7898: 42,9b,f3,16,01,42,d1,05                       Unknown Operation/Structure
//  22 MAP/BP sensor out of range                                                     //
8 78a0: 2b,0c,22,20,0a,ef,18,03                       Unknown Operation/Structure
8 78a8: 0a,01,02,91,04,91,22,a3                       Unknown Operation/Structure
8 78b0: 72,a4,42,8b,79,88,00,42                       Unknown Operation/Structure
8 78b8: d3,11,8b,79,8e,00,42,d3                       Unknown Operation/Structure
8 78c0: 05,b1,56,1a,20,03,b1,26                       Unknown Operation/Structure
8 78c8: 1a,2a,e7                                      Unknown Operation/Structure


78cb - Sub 8 78cb:
8 78cb: c7,72,4a,00          stb   [R72+4a],0         [Vip_timer_ex] = 0;  
8 78cf: 17,38                incb  R38                R38++;               
8 78d1: f0                   ret                      return;              



Test2:
8 78d2: 28,70,b0,30,32,28,93,68                       Unknown Operation/Structure
8 78da: 90,14,01,64,28,8c,14,01                       Unknown Operation/Structure
8 78e2: 6a,90,54,98,30,32,d7,09                       Unknown Operation/Structure
//  24 ACT sensor out of range                                                        //
8 78ea: 2a,d4,14,01,f0,90,ee,90                       Unknown Operation/Structure
8 78f2: 24,3e,d9,1b,3e,e6,0d,ef                       Unknown Operation/Structure
8 78fa: d3,05,16,01,b4,90,b0,90                       Unknown Operation/Structure
8 7902: 32,34,20,0b,ef,c6,05,16                       Unknown Operation/Structure
8 790a: 01,38,91,34,91,34,34,b3                       Unknown Operation/Structure
8 7912: fe,02,42,99,03,42,d3,0b                       Unknown Operation/Structure
8 791a: 99,04,42,d9,06,37,e7,03                       Unknown Operation/Structure
//  67 NPS circuit open with Air conditioning on                                      //
8 7922: 2a,8a,67,37,ee,03,2a,84                       Unknown Operation/Structure
8 792a: 79,b3,f6,14,42,99,01,42                       Unknown Operation/Structure
8 7932: d7,07,34,27,04,ef,74,02                       Unknown Operation/Structure
8 793a: 52,28,2f,52,90,0c,01,19                       Unknown Operation/Structure
8 7942: 20,97                                         Unknown Operation/Structure


Sub0544:
8 7944: b0,30,32             ldb   R32,R30            R32 = R30;           
//  63 TP sensor circuit below min voltage                                            //
8 7947: 28,23                scall 796c               CompareTC(Tapmin,[TPS_Raw],63);
8 7949: 70,90,22,01,63                                #args                
//  53 TP sensor circuit open, above max voltage                                      //
8 794e: 28,1c                scall 796c               CompareTC([TPS_Raw],Tapmax,53);
8 7950: 22,01,6e,90,53                                #args                
8 7955: 98,30,32             cmpb  R32,R30                                 
8 7958: d7,09                jne   7963               if (R32 != R30) goto 7963;
//  23 - TP out of range during self test                                             //
8 795a: 2a,64                scall 7bc0               ChkRngeTC([TPS_Raw],Vtap1,Vtap2,23);
8 795c: 22,01,5c,90,5e,90,23                          #args                
8 7963: f0                   ret                      return;              

Compare:
8 7964: 91,08,2b             orrb  R2b,8              [Flags_2B] |= 8;     
//  copy 4 bytes from caller to R1A onwards                                           //
8 7967: 2e,55                scall 77be               GetbytesR1a(4);      
8 7969: 04                                            #args                
8 796a: 20,03                sjmp  796f               goto 796f;           

CompareTC:
8 796c: 2e,50                scall 77be               GetbytesR1a(5);      
8 796e: 05                                            #args                

796f - Sub 8 796f:
8 796f: 28,1a                scall 798b               GetAddr(R1a);        
8 7971: 1a,00                                         #args                
//  make R1c,d into true address                                                      //
8 7973: 28,16                scall 798b               GetAddr(R1c);        
8 7975: 1c,00                                         #args                
8 7977: a2,1a,42             ldw   R42,[R1a]          R42 = [R1a];         
8 797a: 8a,1c,42             cmpw  R42,[R1c]                               
//  Jump if PASSED (no codes)                                                         //
8 797d: d1,08                jleu  7987               if ((uns) R42 <= [R1c]) goto 7987;
//  jump if 4 params                                                                  //
8 797f: 3b,2b,08             jb    B3,R2b,798a        if (B3_[Flags_2B]) goto 798a;
//  5 params, error code                                                              //
8 7982: b0,1e,1a             ldb   R1a,R1e            R1a = R1e;           
//  save errorno in (342) TROUBLE CODE Table                                          //
8 7985: 2a,2b                scall 7bb2               SaveTCode();         

7987 - Sub 8 7987:
8 7987: 71,f7,2b             an2b  R2b,f7             [Flags_2B] &= f7;    
8 798a: f0                   ret                      return;              

GetAddr:
8 798b: a1,3e,00,16          ldw   R16,3e             R16 = 3e;            
//  get address (from args in caller)                                                 //
8 798f: 2e,31                scall 77c2               Getbytes(2);         
8 7991: 02                                            #args                
//  get data from address                                                             //
8 7992: a2,3e,42             ldw   R42,[R3e]          R42 = [R3e];         
//  address not encoded - return unchanged                                            //
8 7995: 37,43,14             jnb   B7,R43,79ac        if (!B7_R43) goto 79ac;
//  Hi byte of value                                                                  //
8 7998: ac,43,3a             ldzbw R3a,R43            R3a = (uns)R43;      
//  Clear top nibble.  R42 = Offset address                                           //
8 799b: 71,0f,43             an2b  R43,f              R43 &= f;            
//  Clear bottom nibble and flag                                                      //
8 799e: 71,70,3a             an2b  R3a,70             R3a &= 70;           
//  Rbase register (0-14 times 2 effectively)                                         //
8 79a1: 08,03,3a             shrw  R3a,3              R3a = R3a / 8;       
//  R42 += Rbase register (as pointer)                                                //
8 79a4: 67,3b,f0,00,42       ad2w  R42,[R3a+f0]       R42 += [R3a+f0];     
//  update input pointer to new address                                               //
8 79a9: c2,3e,42             stw   [R3e],R42          [R3e] = R42;         
8 79ac: f0                   ret                      return;              


8 79ad: b3,78,f3,3a,e0,3a,03,30                       Unknown Operation/Structure
8 79b5: c4,04,17,38                                   Unknown Operation/Structure
//  zero 1CA timer, incr R38 self test index, and return                              //
8 79b9: 27,10,91,01,d9,91,80,46                       Unknown Operation/Structure
8 79c1: ef,77,04,74,90,3c,df,03                       Unknown Operation/Structure
//  E96 - Themactor Air System inoperative                                            //
8 79c9: 29,e3,96,26,fd,ef,6a,04                       Unknown Operation/Structure
8 79d1: 74,90,34,df,03,29,d6,95                       Unknown Operation/Structure
//  zero 1CA timer, incr R38 self test index, and return                              //
8 79d9: 26,f0,71,df,e6,a1,f9,79                       Unknown Operation/Structure
8 79e1: 34,26,e7,3d,e6,02,29,06                       Unknown Operation/Structure
8 79e9: b1,20,42,c7,73,a2,00,42                       Unknown Operation/Structure
8 79f1: c7,73,a1,00,42,c8,34,f0                       Unknown Operation/Structure
//  9E65 thermactor present switch = 1.0                                              //
8 79f9: b3,fe,0b,3a,e0,3a,0c,28                       Unknown Operation/Structure
8 7a01: 74,81,f6,10,47,28,6e,82                       Unknown Operation/Structure
8 7a09: f8,08,47,b1,14,42,c7,72                       Unknown Operation/Structure
8 7a11: ae,42,28,7c,85,fe,2d,01                       Unknown Operation/Structure
8 7a19: 28,5b,87,00,80,46,98,30                       Unknown Operation/Structure
8 7a21: 00,df,0d,b3,31,41,03,3a                       Unknown Operation/Structure
8 7a29: 99,87,3a,d7,03,91,01,c4                       Unknown Operation/Structure
8 7a31: 3e,d9,06,28,5b,84,fc,d3                       Unknown Operation/Structure
8 7a39: 00,91,20,e6,b3,f6,74,42                       Unknown Operation/Structure
8 7a41: e0,42,11,c7,72,4a,00,28                       Unknown Operation/Structure
8 7a49: 2c,88,02,20,47,ef,ea,03                       Unknown Operation/Structure
8 7a51: bd,90,28,9a,b3,f6,75,42                       Unknown Operation/Structure
8 7a59: e0,42,0f,c7,72,4a,00,28                       Unknown Operation/Structure
8 7a61: 14,83,fa,40,47,ef,d2,03                       Unknown Operation/Structure
8 7a69: be,90,71,df,e6,28,7f,91                       Unknown Operation/Structure
8 7a71: 10,d9,e7,03,06                                Unknown Operation/Structure


Test_IO:
8 7a76: 28,29                scall 7aa1               Sub0552();           
//  fourth param byte to word                                                         //
8 7a78: ac,1d,20             ldzbw R20,R1d            R20 = (uns)R1d;      
//  load contents of SFR                                                              //
8 7a7b: b2,20,1d             ldb   R1d,[R20]          R1d = [R20];         
//  mask contents with third param                                                    //
8 7a7e: 94,1c,1d             xrb   R1d,R1c            R1d ^= R1c;          
//  store back in [SFR]                                                               //
8 7a81: c6,20,1d             stb   [R20],R1d          [R20] = R1d;         
//  read OCC and compare to level before - set Trouble code if out of range           //
8 7a84: 28,37                scall 7abd               Sub0553();           
8 7a86: 3d,e6,06             jb    B5,Re6,7a8f        if (B5_[Flags_e6]) goto 7a8f;
//  xor 3rd and fourth param (if calls did not change them)                           //
8 7a89: 94,1c,1d             xrb   R1d,R1c            R1d ^= R1c;          
//  store fourth param? to [SFR]                                                      //
8 7a8c: c6,20,1d             stb   [R20],R1d          [R20] = R1d;         

7a8f - Sub 8 7a8f:
8 7a8f: 20,0d                sjmp  7a9e               goto 7a9e;           



OpenCChk:
//  load params from stack & OCC base line test of circuit                            //
8 7a91: 28,0e,b1,80,42,c6,1c,42                       Unknown Operation/Structure
//  read OCC and compre to level before - set Trouble code if out of range            //
8 7a99: 28,22,c6,1c,00                                Unknown Operation/Structure

8 7a9e: cc,34                pop   R34                R34 = pop();         
8 7aa0: f0                   ret                      return;              

Sub0552:
8 7aa1: 28,33                scall 7ad6               Sub0556();           
//  back up stack by one call                                                         //
8 7aa3: cc,1e                pop   R1e                R1e = pop();         
//  Get 4 bytes from Grandcaller into R1A                                             //
8 7aa5: 2d,17                scall 77be               GetbytesR1a(4);      
8 7aa7: 04                                            #args                
//  restore stack                                                                     //
8 7aa8: c8,1e                push  R1e                push(R1e);           
//  circuit test param 2 - ROM location selector                                      //
8 7aaa: bc,1b,1e             ldsbw R1e,R1b            R1e = (sig)R1b;      
8 7aad: 65,2c,01,1e          ad2w  R1e,12c            R1e += 12c;          
//  R1E + ROM 8E5A + 12C = 8F86 + R1E                                                 //
8 7ab1: 64,f2,1e             ad2w  R1e,Rf2            R1e += Rf2;          
//  10E - OCC - Open Circuit Check AD value                                           //
8 7ab4: a3,72,8e,16          ldw   R16,[R72+8e]       R16 = [OCC_Raw];     
//  1DE - OCC reference level save value                                              //
8 7ab8: c3,72,5e,16          stw   [R72+5e],R16       [Occsav] = R16;      
8 7abc: f0                   ret                      return;              

Sub0553:
8 7abd: 28,17                scall 7ad6               Sub0556();           
//  1DE - OCC reference level save value                                              //
8 7abf: a3,72,5e,16          ldw   R16,[R72+5e]       R16 = [Occsav];      
//  10E - OCC - Open Circuit Check AD value - difference                              //
8 7ac3: 6b,72,8e,16          sb2w  R16,[R72+8e]       R16 -= [OCC_Raw];    
//  jmp if positive                                                                   //
8 7ac7: db,02                jc    7acb               if (R16 >= 0) goto 7acb;
//  ABS OCC value                                                                     //
8 7ac9: 03,16                negw  R16                R16 = -R16;          

7acb - Sub 8 7acb:
8 7acb: 8a,1e,16             cmpw  R16,[R1e]                               
//  jmp if OCC >= ROM Limit - GOOD                                                    //
8 7ace: db,03                jc    7ad3               if ((uns) R16 >= [R1e]) goto 7ad3;
//  Post Trouble Code (in R1a) - open circuit error for X                             //
8 7ad0: e7,32,04             jump  7f05               goto Sub0592;        

7ad3 - Sub 8 7ad3:
8 7ad3: 11,1a                clrb  R1a                R1a = 0;             
8 7ad5: f0                   ret                      return;              

Sub0556:
8 7ad6: c0,3c,06             stw   R3c,R06            R3c = IO_TIMER;      

7ad9 - Sub 8 7ad9:
8 7ad9: 48,3c,06,3e          sb3w  R3e,R06,R3c        R3e = IO_TIMER - R3c;
//  loop until 5161 IO times have passed                                              //
8 7add: 89,61,51,3e          cmpw  R3e,5161                                
8 7ae1: db,0b                jc    7aee               if ((uns) R3e >= 5161) goto 7aee;
//  Save diagnostic testing registers                                                 //
8 7ae3: ef,8f,f5             call  7075               Save_diag_vals();    
//  read all the AD channels                                                          //
8 7ae6: ef,45,a7             call  222e               Read_AD();           
//  reload diagnostic testing registers                                               //
8 7ae9: ef,64,f5             call  7050               Get_diag_vals();     
8 7aec: 27,eb                sjmp  7ad9               goto 7ad9;           

8 7aee: f0                   ret                      return;              

Sub0558:
8 7aef: a1,00,20,46          ldw   R46,2000           [IO_Port_State] = 2000;
8 7af3: 45,03,00,06,0e       ad3w  R0e,R06,3          HSO_TIME = IO_TIMER + 3;
8 7af8: 01,d2                clrw  Rd2                [Egrdc] = 0;         
8 7afa: 01,b8                clrw  Rb8                [Iscdty] = 0;        
8 7afc: c7,72,ac,00          stb   [R72+ac],0         [Purgdc] = 0;        
8 7b00: f0                   ret                      return;              


8 7b01: 3b,d6,08                                      Unknown Operation/Structure
//  incr self test index                                                              //
8 7b04: 17,38,2f,e7,85,00,00,46                       Unknown Operation/Structure
8 7b0c: c3,72,42,00,71,f7,d8,71                       Unknown Operation/Structure
8 7b14: cf,e6,c7,72,4a,00,f0,ef                       Unknown Operation/Structure
8 7b1c: 07,f8,3b,d6,f9,a3,78,e4                       Unknown Operation/Structure
8 7b24: 1c,8b,72,a2,1c,db,3b,91                       Unknown Operation/Structure
8 7b2c: 08,d8,3d,46,35,b3,f6,75                       Unknown Operation/Structure
8 7b34: 42,e0,42,17,9b,78,40,18                       Unknown Operation/Structure
8 7b3c: d1,11,3c,e6,0c,71,df,e6                       Unknown Operation/Structure
8 7b44: 91,10,e6,ad,05,d4,ef,2a                       Unknown Operation/Structure
8 7b4c: f4,20,16,b3,f6,74,42,e0                       Unknown Operation/Structure
8 7b54: 42,10,9b,78,3f,18,d1,09                       Unknown Operation/Structure
8 7b5c: 3d,e6,06,91,20,e6,ef,0f                       Unknown Operation/Structure
8 7b64: f4,f0,33,d8,37,a3,78,e6                       Unknown Operation/Structure
8 7b6c: 1c,8b,72,a2,1c,d1,2d,35                       Unknown Operation/Structure
8 7b74: 46,02,27,8e,85,71,1a,46                       Unknown Operation/Structure
8 7b7c: 35,e6,03,95,20,47,34,e6                       Unknown Operation/Structure
8 7b84: 03,95,40,47,a1,00,80,42                       Unknown Operation/Structure
8 7b8c: c0,d2,42,c0,b8,42,b1,10                       Unknown Operation/Structure
8 7b94: 1e,45,03,00,06,0e,c7,72                       Unknown Operation/Structure
8 7b9c: ac,43,27,6c,a3,72,42,1a                       Unknown Operation/Structure
8 7ba4: 89,58,02,1a,d1,02,27,5a                       Unknown Operation/Structure
8 7bac: 27,68                                         Unknown Operation/Structure


SaveTCode1:
8 7bae: ef,0d,fc             call  77be               GetbytesR1a(1);      
8 7bb1: 01                                            #args                

SaveTCode:
8 7bb2: 89,13,00,30          cmpw  R30,13                                  
8 7bb6: db,07                jc    7bbf               if ((uns) R30 >= 13) goto 7bbf;
//  342 is base of Hard Trouble Code Error Table                                      //
8 7bb8: c7,31,42,03,1a       stb   [R30+342],R1a      [R30+Serv_code_tab] = R1a;
8 7bbd: 07,30                incw  R30                R30++;               
8 7bbf: f0                   ret                      return;              

ChkRngeTC:
8 7bc0: ef,fb,fb             call  77be               GetbytesR1a(7);      
8 7bc3: 07                                            #args                
//  decode R1c value if high bit set                                                  //
8 7bc4: 2d,c5                scall 798b               GetAddr(R1c);        
8 7bc6: 1c,00                                         #args                
//  decode R1e value if high bit set                                                  //
8 7bc8: 2d,c1                scall 798b               GetAddr(R1e);        
8 7bca: 1e,00                                         #args                
//  actual AD value to check                                                          //
8 7bcc: a2,1a,42             ldw   R42,[R1a]          R42 = [R1a];         
//  limit low                                                                         //
8 7bcf: 8a,1c,42             cmpw  R42,[R1c]                               
8 7bd2: d3,05                jnc   7bd9               if ((uns) R42 < [R1c]) goto 7bd9;
//  limit high                                                                        //
8 7bd4: 8a,1e,42             cmpw  R42,[R1e]                               
8 7bd7: d1,06                jleu  7bdf               if ((uns) R42 <= [R1e]) goto 7bdf;
8 7bd9: b0,20,1a             ldb   R1a,R20            R1a = R20;           
//  save specified trouble code in Table                                              //
8 7bdc: ef,d3,ff             call  7bb2               SaveTCode();         
8 7bdf: f0                   ret                      return;              

Sub0562:
8 7be0: ef,d1,fb             call  77b4               Reset_STO();         
8 7be3: 01,30                clrw  R30                R30 = 0;             
//  clear Self Test Output trigger                                                    //
8 7be5: 71,fd,2b             an2b  R2b,fd             [Flags_2B] &= fd;    
8 7be8: 71,fe,2b             an2b  R2b,fe             [Flags_2B] &= fe;    
//  112 - clear ECT raw ?                                                             //
8 7beb: c7,73,92,00,00       stb   [R72+92],0         [ECT_Raw] = 0;       
8 7bf0: 71,ef,2b             an2b  R2b,ef             [Flags_2B] &= ef;    
8 7bf3: 9b,f3,8e,00,00       cmpb  0,[Rf2+8e]                              
8 7bf8: d7,42                jne   7c3c               if (0 != [Vdisfm]) goto 7c3c;
8 7bfa: 51,b8,c5,22          an3b  R22,Rc5,b8         R22 = [Fmem_flags] & b8;
8 7bfe: df,3c                je    7c3c               if (R22 == 0) goto 7c3c;
//  E98 - Hard Fault present                                                          //
8 7c00: 2f,ac                scall 7bae               SaveTCode1(98);      
8 7c02: 98                                            #args                
8 7c03: a3,73,02,02,22       ldw   R22,[R72+202]      R22 = [Fmem_monitor];
8 7c08: 30,22,03             jnb   B0,R22,7c0e        if (!B0_R22) goto 7c0e;
//  E64 - ACT sensor grounded                                                         //
8 7c0b: 2f,a1                scall 7bae               SaveTCode1(64);      
8 7c0d: 64                                            #args                
8 7c0e: 31,22,03             jnb   B1,R22,7c14        if (!B1_R22) goto 7c14;
//  E54 - ACT sensor open                                                             //
8 7c11: 2f,9b                scall 7bae               SaveTCode1(54);      
8 7c13: 54                                            #args                
8 7c14: 32,22,03             jnb   B2,R22,7c1a        if (!B2_R22) goto 7c1a;
//  E61 - ECT sensor grounded                                                         //
8 7c17: 2f,95                scall 7bae               SaveTCode1(61);      
8 7c19: 61                                            #args                
8 7c1a: 33,22,03             jnb   B3,R22,7c20        if (!B3_R22) goto 7c20;
//  E51 - ECT sensor open                                                             //
8 7c1d: 2f,8f                scall 7bae               SaveTCode1(51);      
8 7c1f: 51                                            #args                
8 7c20: 36,22,03             jnb   B6,R22,7c26        if (!B6_R22) goto 7c26;
//  E63 - TP sensor  below min voltage                                                //
8 7c23: 2f,89                scall 7bae               SaveTCode1(63);      
8 7c25: 63                                            #args                
8 7c26: 37,22,03             jnb   B7,R22,7c2c        if (!B7_R22) goto 7c2c;
//  E53 - TP sensor  above max voltage                                                //
8 7c29: 2f,83                scall 7bae               SaveTCode1(53);      
8 7c2b: 53                                            #args                
8 7c2c: 31,23,03             jnb   B1,R23,7c32        if (!B1_R23) goto 7c32;
//  E56 - TPS sensor below min voltage                                                //
8 7c2f: 2f,7d                scall 7bae               SaveTCode1(56);      
8 7c31: 56                                            #args                
8 7c32: 30,23,03             jnb   B0,R23,7c38        if (!B0_R23) goto 7c38;
//  E66 - TPS sensor above max voltage                                                //
8 7c35: 2f,77                scall 7bae               SaveTCode1(66);      
8 7c37: 66                                            #args                
8 7c38: b1,22,38             ldb   R38,22             R38 = 22;            
8 7c3b: f0                   ret                      return;              

8 7c3c: a3,fe,2c,1c          ldw   R1c,[Rfe+2c]       R1c = [Sc0164];      
//  HEGO1 delta time initial value?                                                   //
8 7c40: c3,73,8a,00,1c       stw   [R72+8a],R1c       [BAP_Intvl] = R1c;   
//  HEGO2 delta time initial value?                                                   //
8 7c45: c3,73,8c,00,1c       stw   [R72+8c],R1c       [Key_Pwr] = R1c;     
8 7c4a: a3,fe,32,3e          ldw   R3e,[Rfe+32]       R3e = [Sc0165];      
8 7c4e: c3,72,6e,3e          stw   [R72+6e],R3e       [Rviprpm] = R3e;     
//  clr Knock Enabled                                                                 //
8 7c52: 71,bf,4f             an2b  R4f,bf             [Flags_4F] &= bf;    
8 7c55: 01,9e                clrw  R9e                [Eftr] = 0;          
8 7c57: a1,00,01,42          ldw   R42,100            R42 = 100;           
8 7c5b: c3,73,34,06,42       stw   [R72+634],R42      [Kamrf1] = R42;      
8 7c60: c3,73,36,06,42       stw   [R72+636],R42      [Kamrf2] = R42;      
8 7c65: a3,78,d0,c2          ldw   Rc2,[R78+d0]       [Saf] = [RCp+Apt];   
8 7c69: 01,d2                clrw  Rd2                [Egrdc] = 0;         
//  LSO output line 6 ON (Wide Open THrottle A/C cutout)                              //
8 7c6b: 91,40,46             orrb  R46,40             [IO_Port_State] |= 40;
//  LSO output line 3 OFF (Idle Speed Control)                                        //
8 7c6e: 71,f7,46             an2b  R46,f7             [IO_Port_State] &= f7;
//  R47 bit 4 OFF (Air management2)                                                   //
8 7c71: 71,ef,47             an2b  R47,ef             [Flags_47] &= ef;    
//  12C                                                                               //
8 7c74: c7,72,ac,00          stb   [R72+ac],0         [Purgdc] = 0;        
//  DOO trouble codes ?                                                               //
8 7c78: 91,03,d7             orrb  Rd7,3              [Tc_flags] |= 3;     
8 7c7b: 71,f3,e6             an2b  Re6,f3             [Flags_e6] &= f3;    
8 7c7e: ef,98,f6             call  7319               Sub0511();           
8 7c81: e7,8a,02             jump  7f0e               goto Sub0593;        

Sub0563:
8 7c84: 29,b5                scall 7e3b               GetWord(St0008);     
8 7c86: 30,f0                                         #args                
8 7c88: a3,fe,32,32          ldw   R32,[Rfe+32]       R32 = [Sc0165];      
8 7c8c: 09,05,32             shlw  R32,5              R32 = R32 * 20;      
//  - filtered RPM                                                                    //
8 7c8f: 6b,72,88,32          sb2w  R32,[R72+88]       R32 -= [RPM_Filt1];  
8 7c93: d6,02                jge   7c97               if ((sig) R32 >= 0) goto 7c97;
8 7c95: 03,32                negw  R32                R32 = -R32;          

7c97 - Sub 8 7c97:
8 7c97: 2c,d3                scall 796c               CompareTC(R32,St0009,12);
8 7c99: 32,00,34,f0,12                                #args                
8 7c9e: 91,10,2b             orrb  R2b,10             [Flags_2B] |= 10;    
8 7ca1: 22,6b                sjmp  7f0e               goto Sub0593;        

Sub0565:
8 7ca3: 2f,1b                scall 7bc0               ChkRngeTC([ECT_Raw],Viect4,Viect3,21);
8 7ca5: 12,01,fc,90,fa,90,21                          #args                
//  E26 - MAF ? sensor out of range during self test                                  //
8 7cac: 2f,12                scall 7bc0               ChkRngeTC([MAF_Raw],Vmafr1,Vmafr2,26);
8 7cae: 24,01,0a,91,0c,91,26                          #args                
//  E23 - TP sensor out of range during self test                                     //
8 7cb5: 2f,09                scall 7bc0               ChkRngeTC([TPS_Raw],Vtap3,Vtap4,23);
8 7cb7: 22,01,60,90,62,90,23                          #args                
//  E24 - ACT sensor out of range during self test                                    //
8 7cbe: 2f,00                scall 7bc0               ChkRngeTC([ACT_Raw],Viact4,Viact3,24);
8 7cc0: 14,01,f4,90,f2,90,24                          #args                
8 7cc7: 22,45                sjmp  7f0e               goto Sub0593;        

Sub0566:
8 7cc9: a3,72,88,42          ldw   R42,[R72+88]       R42 = [RPM_Filt1];   
8 7ccd: 8b,78,d8,42          cmpw  R42,[R78+d8]                            
8 7cd1: db,04                jc    7cd7               if ((uns) R42 >= [RCp+Vip_flags3]) goto 7cd7;
8 7cd3: b1,12,38             ldb   R38,12             R38 = 12;            
8 7cd6: f0                   ret                      return;              

8 7cd7: 91,e0,d7             orrb  Rd7,e0             [Tc_flags] |= e0;    
8 7cda: 28,ff                scall 7ddb               Sub0581();           
8 7cdc: d7,03                jne   7ce1               if (R42 != 2) goto 7ce1;
8 7cde: 91,1c,d7             orrb  Rd7,1c             [Tc_flags] |= 1c;    
8 7ce1: 29,53                scall 7e36               Sub0589();           
8 7ce3: 22,29                sjmp  7f0e               goto Sub0593;        

Sub0567:
8 7ce5: 37,2b,03             jnb   B7,R2b,7ceb        if (!B7_[Flags_2B]) goto 7ceb;
8 7ce8: 71,bf,d7             an2b  Rd7,bf             [Tc_flags] &= bf;    

7ceb - Sub 8 7ceb:
8 7ceb: 36,2b,03             jnb   B6,R2b,7cf1        if (!B6_[Flags_2B]) goto 7cf1;
8 7cee: 71,f7,d7             an2b  Rd7,f7             [Tc_flags] &= f7;    
8 7cf1: 3e,d7,07             jb    B6,Rd7,7cfb        if (B6_[Tc_flags]) goto 7cfb;
8 7cf4: 3b,d7,04             jb    B3,Rd7,7cfb        if (B3_[Tc_flags]) goto 7cfb;
8 7cf7: 29,3d                scall 7e36               Sub0589();           
8 7cf9: 22,13                sjmp  7f0e               goto Sub0593;        

8 7cfb: 28,eb                scall 7de8               Scale_time_delta2(Viplr1);
8 7cfd: 56,90                                         #args                
8 7cff: 29,3a                scall 7e3b               GetWord(St0007);     
8 7d01: 2e,f0                                         #args                
8 7d03: 36,d7,03             jnb   B6,Rd7,7d09        if (!B6_[Tc_flags]) goto 7d09;
//  #E42 - EGO sensor indicates system rich                                           //
8 7d06: 2e,a6                scall 7bae               SaveTCode1(42);      
8 7d08: 42                                            #args                
8 7d09: 33,d7,03             jnb   B3,Rd7,7d0f        if (!B3_[Tc_flags]) goto 7d0f;
8 7d0c: 2e,a0                scall 7bae               SaveTCode1(92);      
8 7d0e: 92                                            #args                
8 7d0f: 20,b7                sjmp  7dc8               goto 7dc8;           

Sub0569:
8 7d11: 3f,2b,03             jb    B7,R2b,7d17        if (B7_[Flags_2B]) goto 7d17;
8 7d14: 71,7f,d7             an2b  Rd7,7f             [Tc_flags] &= 7f;    

7d17 - Sub 8 7d17:
8 7d17: 3e,2b,03             jb    B6,R2b,7d1d        if (B6_[Flags_2B]) goto 7d1d;
8 7d1a: 71,ef,d7             an2b  Rd7,ef             [Tc_flags] &= ef;    
8 7d1d: 3f,d7,05             jb    B7,Rd7,7d25        if (B7_[Tc_flags]) goto 7d25;
8 7d20: 3c,d7,02             jb    B4,Rd7,7d25        if (B4_[Tc_flags]) goto 7d25;
8 7d23: 21,e9                sjmp  7f0e               goto Sub0593;        

7d25 - Sub 8 7d25:
8 7d25: 28,bc                scall 7de3               Scale_Time_delta(Viprr1);
8 7d27: 54,90                                         #args                
8 7d29: a3,73,8a,00,42       ldw   R42,[R72+8a]       R42 = [BAP_Intvl];   
8 7d2e: 8b,fe,28,42          cmpw  R42,[Rfe+28]                            
8 7d32: d1,04                jleu  7d38               if ((uns) R42 <= [Sc0162]) goto 7d38;
8 7d34: 15,38                decb  R38                R38--;               
8 7d36: 21,d6                sjmp  7f0e               goto Sub0593;        

8 7d38: 29,01                scall 7e3b               GetWord(St0004);     
8 7d3a: 87,b0                                         #args                
8 7d3c: 37,d7,03             jnb   B7,Rd7,7d42        if (!B7_[Tc_flags]) goto 7d42;
//  #E41 - EGO sensor indicates system lean                                           //
8 7d3f: 2e,6d                scall 7bae               SaveTCode1(41);      
8 7d41: 41                                            #args                
8 7d42: 34,d7,03             jnb   B4,Rd7,7d48        if (!B4_[Tc_flags]) goto 7d48;
//  #E91 - Air/Fuel mixture not with Self test range                                  //
8 7d45: 2e,67                scall 7bae               SaveTCode1(91);      
8 7d47: 91                                            #args                
8 7d48: 20,7e                sjmp  7dc8               goto 7dc8;           

Sub0572:
8 7d4a: b3,78,cd,1a          ldb   R1a,[R78+cd]       R1a = [RCp+Nactmr];  
8 7d4e: 30,1a,77             jnb   B0,R1a,7dc8        if (!B0_R1a) goto 7dc8;
//  Thermactor present?                                                               //
8 7d51: b3,fe,0b,1a          ldb   R1a,[Rfe+b]        R1a = [Thrmhp];      
8 7d55: 30,1a,70             jnb   B0,R1a,7dc8        if (!B0_R1a) goto 7dc8;
//  'filter' to scale time delta (ROM range limited to 10A)                           //
8 7d58: 28,89                scall 7de3               Scale_Time_delta(Viprr1);
8 7d5a: 54,90                                         #args                
8 7d5c: 28,dd                scall 7e3b               GetWord(Vdly1);      
8 7d5e: 56,91                                         #args                
//  (Air management1)                                                                 //
8 7d60: 91,08,47             orrb  R47,8              [Flags_47] |= 8;     
//  (Air management2)                                                                 //
8 7d63: 91,10,47             orrb  R47,10             [Flags_47] |= 10;    
8 7d66: 21,a6                sjmp  7f0e               goto Sub0593;        

Sub0573:
8 7d68: 37,2b,03             jnb   B7,R2b,7d6e        if (!B7_[Flags_2B]) goto 7d6e;
8 7d6b: 71,df,d7             an2b  Rd7,df             [Tc_flags] &= df;    

7d6e - Sub 8 7d6e:
8 7d6e: 36,2b,03             jnb   B6,R2b,7d74        if (!B6_[Flags_2B]) goto 7d74;
8 7d71: 71,fb,d7             an2b  Rd7,fb             [Tc_flags] &= fb;    
8 7d74: 3d,d7,03             jb    B5,Rd7,7d7a        if (B5_[Tc_flags]) goto 7d7a;
8 7d77: 32,d7,12             jnb   B2,Rd7,7d8c        if (!B2_[Tc_flags]) goto 7d8c;
8 7d7a: 28,bf                scall 7e3b               GetWord(Viptm2);     
8 7d7c: 58,91                                         #args                
8 7d7e: 32,d7,03             jnb   B2,Rd7,7d84        if (!B2_[Tc_flags]) goto 7d84;
//  #E94 Thermactor Air System inoperative                                            //
8 7d81: 2e,2b                scall 7bae               SaveTCode1(94);      
8 7d83: 94                                            #args                
8 7d84: 35,d7,03             jnb   B5,Rd7,7d8a        if (!B5_[Tc_flags]) goto 7d8a;
//  #E44 Thermactor Air System inoperative                                            //
8 7d87: 2e,25                scall 7bae               SaveTCode1(44);      
8 7d89: 44                                            #args                
8 7d8a: 20,36                sjmp  7dc2               goto 7dc2;           

8 7d8c: 71,ef,47             an2b  R47,ef             [Flags_47] &= ef;    
8 7d8f: 21,7d                sjmp  7f0e               goto Sub0593;        

Sub0575:
8 7d91: 28,48                scall 7ddb               Sub0581();           
8 7d93: d7,03                jne   7d98               if (R42 != 2) goto 7d98;
//  HEGO2 cross over voltage detected                                                 //
8 7d95: 36,2b,0a             jnb   B6,R2b,7da2        if (!B6_[Flags_2B]) goto 7da2;

7d98 - Sub 8 7d98:
8 7d98: 37,2b,07             jnb   B7,R2b,7da2        if (!B7_[Flags_2B]) goto 7da2;
8 7d9b: 28,9e                scall 7e3b               GetWord(Vatmr2);     
8 7d9d: 59,91                                         #args                
//  #E45 Thermactor air upstream during Self test                                     //
8 7d9f: 2e,0d                scall 7bae               SaveTCode1(45);      
8 7da1: 45                                            #args                

7da2 - Sub 8 7da2:
8 7da2: 71,f7,47             an2b  R47,f7             [Flags_47] &= f7;    
//  R47 bit 4 ON (Air management2)                                                    //
8 7da5: 91,10,47             orrb  R47,10             [Flags_47] |= 10;    
8 7da8: 21,64                sjmp  7f0e               goto Sub0593;        

Sub0578:
8 7daa: b3,78,ce,1a          ldb   R1a,[R78+ce]       R1a = [RCp+Mfatmr];  
8 7dae: 30,1a,11             jnb   B0,R1a,7dc2        if (!B0_R1a) goto 7dc2;
8 7db1: 28,88                scall 7e3b               GetWord(Vdly2);      
8 7db3: 57,91                                         #args                
8 7db5: 28,24                scall 7ddb               Sub0581();           
8 7db7: d7,03                jne   7dbc               if (R42 != 2) goto 7dbc;
//  HEGO2 cross over voltage detected                                                 //
8 7db9: 36,2b,06             jnb   B6,R2b,7dc2        if (!B6_[Flags_2B]) goto 7dc2;

7dbc - Sub 8 7dbc:
8 7dbc: 37,2b,03             jnb   B7,R2b,7dc2        if (!B7_[Flags_2B]) goto 7dc2;
//  #E46 Thermactor air not by-passed during Self test                                //
8 7dbf: 2d,ed                scall 7bae               SaveTCode1(46);      
8 7dc1: 46                                            #args                

7dc2 - Sub 8 7dc2:
8 7dc2: 71,ef,47             an2b  R47,ef             [Flags_47] &= ef;    
//  Air management1                                                                   //
8 7dc5: 71,f7,47             an2b  R47,f7             [Flags_47] &= f7;    
8 7dc8: a3,fe,2c,1c          ldw   R1c,[Rfe+2c]       R1c = [Sc0164];      
8 7dcc: c3,73,8a,00,1c       stw   [R72+8a],R1c       [BAP_Intvl] = R1c;   
8 7dd1: c3,73,8c,00,1c       stw   [R72+8c],R1c       [Key_Pwr] = R1c;     
8 7dd6: b1,0a,38             ldb   R38,a              R38 = a;             
8 7dd9: 21,33                sjmp  7f0e               goto Sub0593;        

Sub0581:
8 7ddb: b3,fe,16,42          ldb   R42,[Rfe+16]       R42 = [No_hegos];    
8 7ddf: 99,02,42             cmpb  R42,2                                   
8 7de2: f0                   ret                      return;              

Scale_Time_delta:
8 7de3: 91,10,28             orrb  R28,10             [Flags_28] |= 10;    
8 7de6: 20,03                sjmp  7deb               goto 7deb;           

Scale_time_delta2:
8 7de8: 71,ef,28             an2b  R28,ef             [Flags_28] &= ef;    

7deb - Sub 8 7deb:
8 7deb: ef,d0,f9             call  77be               GetbytesR1a(2);      
8 7dee: 02                                            #args                
//  mangle the value at 001A into ROM if high bit set                                 //
8 7def: ef,99,fb             call  798b               GetAddr(R1a);        
8 7df2: 1a,00                                         #args                
//  00E0 IO time since last visit to this proc                                        //
8 7df4: 4b,72,60,06,34       sb3w  R34,R06,[R72+60]   R34 = IO_TIMER - [Viplatm];
//  time since ? * ?                                                                  //
8 7df9: 6d,44,28,34          ml2w  R34,2844           R34 *= 2844;         
//  R36 is Hi 16 bits of prior result times "filter"                                  //
8 7dfd: 4e,1a,36,3c          ml3w  R3c,R36,[R1a]      R3c = R36 * [R1a];   
8 7e01: 34,28,16             jnb   B4,R28,7e1a        if (!B4_[Flags_28]) goto 7e1a;
//  10A ? MAP/BP ? time?                                                              //
8 7e04: a3,73,8a,00,1c       ldw   R1c,[R72+8a]       R1c = [BAP_Intvl];   
//  time delta * # 2844 * filterFactor                                                //
8 7e09: 68,3e,1c             sb2w  R1c,R3e            R1c -= R3e;          
8 7e0c: d1,06                jleu  7e14               if ((uns) R1c <= 0) goto 7e14;
//  9E82 - 6000                                                                       //
8 7e0e: 8b,fe,28,1c          cmpw  R1c,[Rfe+28]                            
8 7e12: db,18                jc    7e2c               if ((uns) R1c >= [Sc0162]) goto 7e2c;

7e14 - Sub 8 7e14:
8 7e14: a3,fe,28,1c          ldw   R1c,[Rfe+28]       R1c = [Sc0162];      
8 7e18: 20,12                sjmp  7e2c               goto 7e2c;           

7e1a - Sub 8 7e1a:
8 7e1a: 47,73,8a,00,3e,1c    ad3w  R1c,R3e,[R72+8a]   R1c = R3e + [BAP_Intvl];
8 7e20: db,06                jc    7e28               if (R1c > ffff) goto 7e28;
//  9E84 - A666                                                                       //
8 7e22: 8b,fe,2a,1c          cmpw  R1c,[Rfe+2a]                            
8 7e26: d1,04                jleu  7e2c               if ((uns) R1c <= [Sc0163]) goto 7e2c;

7e28 - Sub 8 7e28:
8 7e28: a3,fe,2a,1c          ldw   R1c,[Rfe+2a]       R1c = [Sc0163];      

7e2c - Sub 8 7e2c:
8 7e2c: c3,73,8a,00,1c       stw   [R72+8a],R1c       [BAP_Intvl] = R1c;   
//  10C - ? store to raw KEYPWR?                                                      //
8 7e31: c3,73,8c,00,1c       stw   [R72+8c],R1c       [Key_Pwr] = R1c;     

Sub0589:
8 7e36: c3,72,60,06          stw   [R72+60],R06       [Viplatm] = IO_TIMER;
8 7e3a: f0                   ret                      return;              

GetWord:
8 7e3b: ef,80,f9             call  77be               GetbytesR1a(2);      
8 7e3e: 02                                            #args                
//  mangle the value at 001A into ROM if high bit set                                 //
8 7e3f: ef,49,fb             call  798b               GetAddr(R1a);        
8 7e42: 1a,00                                         #args                
8 7e44: 9a,1a,18             cmpb  R18,[R1a]                               
8 7e47: db,02                jc    7e4b               if ((uns) R18 >= [R1a]) goto 7e4b;
//  nasty! return back two addresses                                                  //
8 7e49: cc,00                pop   0                  0 = pop();           
8 7e4b: f0                   ret                      return;              


8 7e4c: 36,d9,04,b1,0f,38,f0,3e                       Unknown Operation/Structure
8 7e54: e6,1b                                         Unknown Operation/Structure
//  limit Low,Limit High,Trouble Codes, Lo limit,Hi limit                             //
8 7e56: 28,77,16,01,b4,90,b0,90                       Unknown Operation/Structure
8 7e5e: 32,34,34,1a,04,b1,0f,38                       Unknown Operation/Structure
8 7e66: f0,a3,72,96,42,c3,72,70                       Unknown Operation/Structure
8 7e6e: 42,20,18,28,5c,80,03,3c                       Unknown Operation/Structure
8 7e76: 91,34,91,32,34,34,1a,02                       Unknown Operation/Structure
8 7e7e: 20,47,a3,73,00,02,42,c3                       Unknown Operation/Structure
8 7e86: 72,70,42,b3,78,2b,d3,20                       Unknown Operation/Structure
8 7e8e: 7f,3e,e6,0e,a3,72,96,42                       Unknown Operation/Structure
8 7e96: 6b,72,70,42,8b,78,38,42                       Unknown Operation/Structure
8 7e9e: 20,0e,a3,72,70,42,6b,73                       Unknown Operation/Structure
8 7ea6: 00,02,42,8b,79,c4,00,42                       Unknown Operation/Structure
8 7eae: d2,17,9b,78,2c,d3,db,0e                       Unknown Operation/Structure
8 7eb6: 5f,78,2a,18,42,08,03,42                       Unknown Operation/Structure
8 7ebe: 57,78,2b,42,d3,f0,2c,e8                       Unknown Operation/Structure
8 7ec6: 33,a0,00,d2,b1,0e,38,20                       Unknown Operation/Structure
8 7ece: 3f                                            Unknown Operation/Structure


ChkSensor:
8 7ecf: ef,ec,f8             call  77be               GetbytesR1a(8);      
8 7ed2: 08                                            #args                
8 7ed3: ef,b5,fa             call  798b               GetAddr(R1c);        
8 7ed6: 1c,00                                         #args                
8 7ed8: ef,b0,fa             call  798b               GetAddr(R1e);        
8 7edb: 1e,00                                         #args                
8 7edd: a2,1a,42             ldw   R42,[R1a]          R42 = [R1a];         
8 7ee0: 01,1a                clrw  R1a                R1a = 0;             
8 7ee2: 8a,1d,42             cmpw  R42,[R1c++]                             
8 7ee5: db,0d                jc    7ef4               if ((uns) R42 >= [R1c++]) goto 7ef4;
//  35 - PFE/EPT/EVP below min voltage                                                //
8 7ee7: b1,31,1a             ldb   R1a,31             R1a = 31;            
8 7eea: 8a,1e,42             cmpw  R42,[R1e]                               
8 7eed: d1,16                jleu  7f05               if ((uns) R42 <= [R1e]) goto Sub0592;
8 7eef: b0,20,1a             ldb   R1a,R20            R1a = R20;           
8 7ef2: 20,11                sjmp  7f05               goto Sub0592;        

8 7ef4: 8a,1c,42             cmpw  R42,[R1c]                               
8 7ef7: d1,14                jleu  7f0d               if ((uns) R42 <= [R1c]) goto 7f0d;
8 7ef9: b0,21,1a             ldb   R1a,R21            R1a = R21;           
8 7efc: 8b,1e,02,42          cmpw  R42,[R1e+2]                             
8 7f00: d3,03                jnc   7f05               if ((uns) R42 < [R1e+2]) goto Sub0592;
//  35 - PFE/EPT/EVP above max voltage                                                //
8 7f02: b1,35,1a             ldb   R1a,35             R1a = 35;            

Sub0592:
8 7f05: 51,62,2a,42          an3b  R42,R2a,62         R42 = [VIP_flags] & 62;
8 7f09: df,02                je    7f0d               if (R42 == 0) goto 7f0d;
//  save R1A in 342 TROUBLE CODE Table                                                //
8 7f0b: 2c,a5                scall 7bb2               SaveTCode();         
8 7f0d: f0                   ret                      return;              

Sub0593:
8 7f0e: c7,72,4a,00          stb   [R72+4a],0         [Vip_timer_ex] = 0;  
8 7f12: 17,38                incb  R38                R38++;               
8 7f14: f0                   ret                      return;              


8 7f15: b3,79,d4,00,42,e0,42,33                       Unknown Operation/Structure
8 7f1d: a3,79,d2,00,c2,27,ea,2f                       Unknown Operation/Structure
8 7f25: 15,55,91,a3,72,88,42,c3                       Unknown Operation/Structure
8 7f2d: 72,6a,42,a3,79,d0,00,c2                       Unknown Operation/Structure
8 7f35: 27,d7,2f,02,55,91,a3,79                       Unknown Operation/Structure
8 7f3d: ce,00,22,67,72,6a,22,ef                       Unknown Operation/Structure
8 7f45: 25,fa,22,00,08,01,18,a3                       Unknown Operation/Structure
8 7f4d: 78,d0,c2,b1,11,38                             Unknown Operation/Structure
//  18 - SPOUT circuit open (grounded? )                                              //
8 7f53: 27,b9,a3,fe,3a,3e,c3,72                       Unknown Operation/Structure
8 7f5b: 6e,3e,71,ef,2b,27,ac,2e                       Unknown Operation/Structure
8 7f63: d7,36,f0,a3,fe,3a,32,09                       Unknown Operation/Structure
8 7f6b: 05,32,6b,72,88,32,d6,02                       Unknown Operation/Structure
8 7f73: 03,32,ef,f4,f9,32,00,38                       Unknown Operation/Structure
8 7f7b: f0,13,27,8f,9b,78,0c,00                       Unknown Operation/Structure
8 7f83: d7,05,b1,16,38,20,ba,9b                       Unknown Operation/Structure
8 7f8b: f8,4a,00,df,1f,91,02,2c                       Unknown Operation/Structure
8 7f93: a3,78,08,c2,a3,79,80,00                       Unknown Operation/Structure
8 7f9b: 42,c3,73,8a,00,42,c3,73                       Unknown Operation/Structure
8 7fa3: 8c,00,42,af,78,0d,1a,c3                       Unknown Operation/Structure
8 7fab: 73,a8,00,1a,27,5d,2e,88                       Unknown Operation/Structure
8 7fb3: 2f,f0,91,f0,d7,a3,72,88                       Unknown Operation/Structure
8 7fbb: 1c,c3,72,6a,1c,71,f7,d9                       Unknown Operation/Structure
8 7fc3: ef,ae,ef,27,46,31,2c,0a                       Unknown Operation/Structure
8 7fcb: 33,d9,07,71,7f,d7,a3,f2                       Unknown Operation/Structure
8 7fd3: 50,c2,4b,72,6a,ae,1c,d3                       Unknown Operation/Structure
8 7fdb: 0a,8b,f3,86,00,1c,d3,03                       Unknown Operation/Structure
8 7fe3: 71,ef,d7,4b,72,70,aa,42                       Unknown Operation/Structure
8 7feb: d6,02,03,42,8b,f3,8a,00                       Unknown Operation/Structure
8 7ff3: 42,d3,03,71,cf,d7,35,d7                       Unknown Operation/Structure
8 7ffb: 03,3c,d7,12,39,d8,0f,91                       Unknown Operation/Structure
8 8003: 02,d8,b3,f3,84,00,1a,79                       Unknown Operation/Structure
8 800b: 0c,1a,c7,72,4a,1a,2e,28                       Unknown Operation/Structure
8 8013: 84,90,31,2c,0e,a3,fe,2c                       Unknown Operation/Structure
8 801b: 42,c3,73,8a,00,42,c3,73                       Unknown Operation/Structure
8 8023: 8c,00,42,34,d7,06,ef,82                       Unknown Operation/Structure
8 802b: fb,77,20,11,35,d7,04,ef                       Unknown Operation/Structure
8 8033: 79,fb,73,31,2c,07,37,d7                       Unknown Operation/Structure
8 803b: 04,ef,6f,fb,25,a3,78,d0                       Unknown Operation/Structure
8 8043: c2,b3,78,12,42,e0,42,15                       Unknown Operation/Structure
8 804b: b3,f6,13,42,e0,42,0e,31                       Unknown Operation/Structure
8 8053: d7,04,ef,56,fb,74,30,d7                       Unknown Operation/Structure
8 805b: 04,ef,4f,fb,75,b3,79,cc                       Unknown Operation/Structure
8 8063: 00,42,e0,42,11,b3,f6,14                       Unknown Operation/Structure
8 806b: 42,e0,42,0a,32,e6,03,3b                       Unknown Operation/Structure
8 8073: e6,04,ef,36,fb,52                             Unknown Operation/Structure


Sub0594:
8 8079: 91,07,d6             orrb  Rd6,7              [STO_flags] |= 7;    
8 807c: 26,90                sjmp  7f0e               goto Sub0593;        

Sub0595:
8 807e: a3,3b,d8,71,1a       ldw   R1a,[R3a+71d8]     R1a = [R3a+71d8];    
8 8083: 20,0c                sjmp  8091               goto 8091;           

Sub0596:
8 8085: a3,3b,80,71,1a       ldw   R1a,[R3a+7180]     R1a = [R3a+7180];    
8 808a: 20,05                sjmp  8091               goto 8091;           

Sub0597:
8 808c: a3,3b,6a,71,1a       ldw   R1a,[R3a+716a]     R1a = [R3a+716a];    
8 8091: 37,1b,08             jnb   B7,R1b,809c        if (!B7_R1b) goto 809c;
8 8094: ef,f4,f8             call  798b               GetAddr(R1a);        
8 8097: 1a,00                                         #args                
8 8099: b2,1a,1a             ldb   R1a,[R1a]          R1a = [R1a];         
8 809c: 98,1a,18             cmpb  R18,R1a                                 
8 809f: d9,01                jgtu  80a2               if ((uns) R18 > R1a) goto 80a2;
8 80a1: f0                   ret                      return;              

8 80a2: 17,38                incb  R38                R38++;               
8 80a4: 26,68                sjmp  7f0e               goto Sub0593;        


8 80a6: b1,04,36,38,2b,0b,9b,78                       Unknown Operation/Structure
8 80ae: 1f,00,df,05,de,08,31,2b                       Unknown Operation/Structure
8 80b6: 05,b1,1f,38,26,52,71,fe                       Unknown Operation/Structure
8 80be: 2b,b1,1e,38,27,f6,ef,74                       Unknown Operation/Structure
8 80c6: fd,9e,90,39,2b,06,a3,78                       Unknown Operation/Structure
8 80ce: 18,1c,20,14,a3,72,74,1c                       Unknown Operation/Structure
8 80d6: 67,78,16,1c,db,06,8b,78                       Unknown Operation/Structure
8 80de: 14,1c,d1,04,a3,78,14,1c                       Unknown Operation/Structure
8 80e6: c3,72,74,1c,91,10,2b,b1                       Unknown Operation/Structure
8 80ee: 19,38,27,c8,28,d6,ef,44                       Unknown Operation/Structure
8 80f6: fd,a0,90,fa,28,e4,26,10                       Unknown Operation/Structure
8 80fe: 28,ca,ef,38,fd,a2,90,fa                       Unknown Operation/Structure
8 8106: 28,f0,a1,00,80,1c,6b,72                       Unknown Operation/Structure
8 810e: 74,1c,6f,72,72,1c,0d,01                       Unknown Operation/Structure
8 8116: 1c,c0,36,1e                                   Unknown Operation/Structure
//  store to raw ECT AD                                                               //
8 811a: c7,73,92,00,34,25,ed,28                       Unknown Operation/Structure
8 8122: a7,ef,15,fd,a1,90,fa,28                       Unknown Operation/Structure
8 812a: b5,25,e1,28,9b,ef,09,fd                       Unknown Operation/Structure
8 8132: a3,90,fa,28,c1,88,1c,36                       Unknown Operation/Structure
8 813a: d9,09,b0,34,1a,19,04,1a                       Unknown Operation/Structure
//  save R1A in 342 TROUBLE CODE Table                                                //
8 8142: ef,6d,fa,c7,73,92,00,00                       Unknown Operation/Structure
8 814a: e0,34,9d,a3,fe,3a,1a,c3                       Unknown Operation/Structure
8 8152: 72,6e,1a,71,ef,2b,a3,fe                       Unknown Operation/Structure
8 815a: 2c,42,c3,73,8a,00,42,c3                       Unknown Operation/Structure
8 8162: 73,8c,00,42,88,30,00,d7                       Unknown Operation/Structure
8 816a: 04,ef,40,fa,90,91,02,2b                       Unknown Operation/Structure
8 8172: b1,1d,38,25,97,33,d6,05                       Unknown Operation/Structure
8 817a: c7,72,4a,00,f0,99,20,18                       Unknown Operation/Structure
8 8182: db,01,f0,b1,16,38,26,ef                       Unknown Operation/Structure
8 818a: 3f,d0,03,91,01,2b,30,2b                       Unknown Operation/Structure
8 8192: 27,37,d0,24,71,fe,2b,01                       Unknown Operation/Structure
8 819a: 30,b3,fe,07,34,a3,78,1c                       Unknown Operation/Structure
8 81a2: 1a,c3,72,6e,1a,a3,78,1a                       Unknown Operation/Structure
8 81aa: 42,c3,73,8a,00,42,c3,73                       Unknown Operation/Structure
8 81b2: 8c,00,42,b1,18,38,27,00                       Unknown Operation/Structure
8 81ba: 99,f0,18,d1,0a,c7,72,4a                       Unknown Operation/Structure
8 81c2: 00,15,36,d2,02,25,49,f0                       Unknown Operation/Structure
8 81ca: 3f,d0,12,c7,73,92,00,00                       Unknown Operation/Structure
8 81d2: 01,30,ef,d7,f9,77,91,01                       Unknown Operation/Structure
8 81da: 2b,cc,00,27,6e,f0,c3,72                       Unknown Operation/Structure
8 81e2: 76,00,a3,73,4e,01,1c,c3                       Unknown Operation/Structure
8 81ea: 72,78,1c,af,73,50,01,1c                       Unknown Operation/Structure
8 81f2: c3,72,7a,1c,fb,f0,a3,72                       Unknown Operation/Structure
8 81fa: 76,1a,a3,73,4e,01,20,af                       Unknown Operation/Structure
8 8202: 73,50,01,22,fb,6b,72,78                       Unknown Operation/Structure
8 820a: 20,bb,72,7a,22,8c,1a,20                       Unknown Operation/Structure
8 8212: af,fe,07,1a,a3,1b,9c,3d                       Unknown Operation/Structure
8 821a: 1e,a3,1b,a2,3d,1c,8c,20                       Unknown Operation/Structure
8 8222: 1c,c3,72,72,1c,f0                             Unknown Operation/Structure


Sub0598:
8 8228: 31,ea,05             jnb   B1,Rea,8230        if (!B1_[Flags_ea]) goto 8230;
8 822b: 71,fd,d7             an2b  Rd7,fd             [Tc_flags] &= fd;    
8 822e: 20,03                sjmp  8233               goto 8233;           

8 8230: 71,fe,d7             an2b  Rd7,fe             [Tc_flags] &= fe;    

8233 - Sub 8 8233:
8 8233: 34,27,05             jnb   B4,R27,823b        if (!B4_[Flags_27]) goto 823b;
8 8236: 91,08,e6             orrb  Re6,8              [Flags_e6] |= 8;     
8 8239: 20,03                sjmp  823e               goto 823e;           

8 823b: 91,04,e6             orrb  Re6,4              [Flags_e6] |= 4;     
8 823e: f0                   ret                      return;              

CHk_HEGO:
8 823f: ef,54,ee             call  7096               Set_EGRFlags();      
//  OLD average HEGO1                                                                 //
8 8242: a3,72,4c,32          ldw   R32,[R72+4c]       R32 = [Egobar1];     
//  NEW value - raw HEGO1                                                             //
8 8246: a3,72,9c,34          ldw   R34,[R72+9c]       R34 = [EGO1_Raw];    
//  filter factor                                                                     //
8 824a: a3,78,02,36          ldw   R36,[R78+2]        R36 = [RCp+2];       
//  filter HEGO1                                                                      //
8 824e: ef,12,b4             call  3663               Urolav();            
//  save new filtered value                                                           //
8 8251: c3,72,4c,3e          stw   [R72+4c],R3e       [Egobar1] = R3e;     
//  clear HEGO1 cross over voltage detected                                           //
8 8255: 71,7f,2b             an2b  R2b,7f             [Flags_2B] &= 7f;    
//  O2S TRIP VOLTAGE                                                                  //
8 8258: 89,c0,d5,3e          cmpw  R3e,d5c0                                
8 825c: d1,03                jleu  8261               if ((uns) R3e <= d5c0) goto 8261;
//  signal HEGO1 voltage cross?                                                       //
8 825e: 91,80,2b             orrb  R2b,80             [Flags_2B] |= 80;    

8261 - Sub 8 8261:
8 8261: a3,72,4e,32          ldw   R32,[R72+4e]       R32 = [Egobar2];     
//  NEW value HEGO2 raw                                                               //
8 8265: a3,72,9e,34          ldw   R34,[R72+9e]       R34 = [EGO2_Raw];    
//  filter oxygen sensor?                                                             //
8 8269: ef,f9,b3             call  3665               Srolav();            
//  filtered value (new HEGO2 avg)                                                    //
8 826c: c3,72,4e,3e          stw   [R72+4e],R3e       [Egobar2] = R3e;     
//  clear HEGO2 cross over voltage detected                                           //
8 8270: 71,bf,2b             an2b  R2b,bf             [Flags_2B] &= bf;    
//  O2S TRIP VOLTAGE                                                                  //
8 8273: 89,c0,d5,3e          cmpw  R3e,d5c0                                
8 8277: d1,03                jleu  827c               if ((uns) R3e <= d5c0) goto 827c;
//  signal HEGO2 voltage cross?                                                       //
8 8279: 91,40,2b             orrb  R2b,40             [Flags_2B] |= 40;    
8 827c: f0                   ret                      return;              

HW_Check:
8 827d: fa                   di                       disable ints;        
8 827e: ff                   ff                       827e => 827f         
//  save old stack ptr                                                                //
8 8280: c3,73,46,01,10       stw   [R72+146],R10      [SvStack] = STACK;   
8 8285: ff                   ff                                            
//  set new stack pointer                                                             //
8 8286: a1,58,00,10          ldw   R10,58             STACK = 58;          
8 828a: a1,7c,a1,3c          ldw   R3c,a17c           R3c = a17c;          
8 828e: a1,7c,a1,3a          ldw   R3a,a17c           R3a = a17c;          
8 8292: 05,3a                decw  R3a                R3a--;               
8 8294: 88,3a,3c             cmpw  R3c,R3a                                 
8 8297: ff                   ff                                            
8 8298: db,03                jc    829d               if ((uns) R3c >= R3a) goto 829d;

829a - Sub 8 829a:
8 829a: 20,e2                sjmp  837e               goto Sub0604;        


//  safety catch ?                                                                    //
8 829c: f8                                            Unknown Operation/Structure

8 829d: d3,fb                jnc   829a               if ((uns) R3c < R3a) goto 829a;
8 829f: 65,63,75,3c          ad2w  R3c,7563           R3c += 7563;         
8 82a3: db,04                jc    82a9               if (R3c > ffff) goto 82a9;
8 82a5: 27,f3                sjmp  829a               goto 829a;           


//  safety catch ?                                                                    //
8 82a7: ff,f8                                         Unknown Operation/Structure

8 82a9: d3,ef                jnc   829a               if (R3c <= ffff) goto 829a;
8 82ab: f9                   stc                      CY = 1;              
8 82ac: 00                   skip  82ae               goto 82ae;           
8 82ad: f8                   clc                      CY = 0;              
8 82ae: d3,ea                jnc   829a               if (CY == 0) goto 829a;
8 82b0: a1,e5,4b,3a          ldw   R3a,4be5           R3a = 4be5;          
//  test ADD                                                                          //
8 82b4: 64,3a,3c             ad2w  R3c,R3a            R3c += R3a;          
8 82b7: 89,c4,62,3c          cmpw  R3c,62c4                                
8 82bb: d7,dd                jne   829a               if (R3c != 62c4) goto 829a;
8 82bd: 09,01,3c             shlw  R3c,1              R3c = R3c * 2;       
//  test SHIFT and SUB                                                                //
8 82c0: 69,63,75,3c          sb2w  R3c,7563           R3c -= 7563;         
8 82c4: 89,25,50,3c          cmpw  R3c,5025                                
8 82c8: d7,d0                jne   829a               if (R3c != 5025) goto 829a;
8 82ca: 85,82,b0,3c          xrw   R3c,b082           R3c ^= b082;         
//  test XOR                                                                          //
8 82ce: 85,82,b0,3c          xrw   R3c,b082           R3c ^= b082;         
8 82d2: 89,25,50,3c          cmpw  R3c,5025                                
8 82d6: d7,c2                jne   829a               if (R3c != 5025) goto 829a;
//  test AND                                                                          //
8 82d8: 61,82,b0,3c          an2w  R3c,b082           R3c &= b082;         
8 82dc: 89,00,10,3c          cmpw  R3c,1000                                
8 82e0: d7,b8                jne   829a               if (R3c != 1000) goto 829a;
//  test OR                                                                           //
8 82e2: 81,31,ce,3c          orrw  R3c,ce31           R3c |= ce31;         
8 82e6: 89,31,de,3c          cmpw  R3c,de31                                
8 82ea: d7,ae                jne   829a               if (R3c != de31) goto 829a;
8 82ec: b1,31,33             ldb   R33,31             R33 = 31;            
8 82ef: c7,73,0f,02,33       stb   [R72+20f],R33      [Xram2H] = R33;      
8 82f4: b1,92,33             ldb   R33,92             R33 = 92;            
8 82f7: 57,73,0f,02,33,32    ad3b  R32,R33,[R72+20f]  R32 = R33 + [Xram2H];
8 82fd: 99,c3,32             cmpb  R32,c3                                  
8 8300: d7,7c                jne   837e               if (R32 != c3) goto Sub0604;
8 8302: b1,7b,30             ldb   R30,7b             R30 = 7b;            
8 8305: b1,c5,32             ldb   R32,c5             R32 = c5;            
8 8308: 5c,30,32,34          ml3b  R34,R32,R30        R34 = R32 * R30;     
8 830c: 89,a7,5e,34          cmpw  R34,5ea7                                
8 8310: d7,6c                jne   837e               if (R34 != 5ea7) goto Sub0604;
8 8312: 9c,32,34             divb  R34,R32            R34 = R34W / R32;    
8 8315: 99,7b,34             cmpb  R34,7b                                  
8 8318: d7,64                jne   837e               if (R34 != 7b) goto Sub0604;
8 831a: 01,30                clrw  R30                R30 = 0;             
8 831c: 01,32                clrw  R32                R32 = 0;             
8 831e: 11,3c                clrb  R3c                R3c = 0;             
//  test norml                                                                        //
8 8320: 0f,3c,30             norm  R30,R3c            R3cL = Norm R30L;    
8 8323: 99,7b,34             cmpb  R34,7b                                  
8 8326: d7,56                jne   837e               if (R34 != 7b) goto Sub0604;
8 8328: 99,1f,3c             cmpb  R3c,1f                                  
8 832b: d7,51                jne   837e               if (R3c != 1f) goto Sub0604;
8 832d: a1,7c,a1,3c          ldw   R3c,a17c           R3c = a17c;          
8 8331: c3,73,0c,02,3c       stw   [R72+20c],R3c      [Xram1L] = R3c;      
//  stack test - push and pop                                                         //
8 8336: 28,4b                scall 8383               POP_test();          
8 8338: 8b,73,0e,02,3c       cmpw  R3c,[R72+20e]                           
8 833d: d7,3f                jne   837e               if (R3c != [Xram2L]) goto Sub0604;
8 833f: 8b,73,10,02,3c       cmpw  R3c,[R72+210]                           
8 8344: d7,38                jne   837e               if (R3c != [Xram3L]) goto Sub0604;
8 8346: 88,30,3c             cmpw  R3c,R30                                 
8 8349: d7,33                jne   837e               if (R3c != R30) goto Sub0604;
//  stack to absolute address test locations                                          //
8 834b: a1,00,04,10          ldw   R10,400            STACK = 400;         
8 834f: a1,75,55,3c          ldw   R3c,5575           R3c = 5575;          
8 8353: c3,73,0c,02,3c       stw   [R72+20c],R3c      [Xram1L] = R3c;      
//  test stack push/pop                                                               //
8 8358: 28,29                scall 8383               POP_test();          
8 835a: 8b,73,0e,02,3c       cmpw  R3c,[R72+20e]                           
8 835f: d7,1d                jne   837e               if (R3c != [Xram2L]) goto Sub0604;
8 8361: 8b,73,10,02,3c       cmpw  R3c,[R72+210]                           
8 8366: d7,16                jne   837e               if (R3c != [Xram3L]) goto Sub0604;
8 8368: 88,30,3c             cmpw  R3c,R30                                 
8 836b: d7,11                jne   837e               if (R3c != R30) goto Sub0604;
//  indexed fetch test                                                                //
8 836d: b1,aa,30             ldb   R30,aa             R30 = aa;            
8 8370: c7,73,0f,02,30       stb   [R72+20f],R30      [Xram2H] = R30;      
8 8375: a1,8f,03,32          ldw   R32,38f            R32 = 38f;           
8 8379: 9a,32,30             cmpb  R30,[R32]                               
//  OK if equal, run RAM test                                                         //
8 837c: df,1c                je    839a               if (R30 == [R32]) goto RAM_test;

Sub0604:
8 837e: 91,10,2a             orrb  R2a,10             [VIP_flags] |= 10;   
//  reset stack ptr, enable ints and return                                           //
8 8381: 20,50                sjmp  83d3               goto 83d3;           

POP_test:
8 8383: cb,73,0c,02          push  [R72+20c]          push([Xram1L]);      
8 8387: cf,73,0e,02          pop   [R72+20e]          [Xram2L] = pop();    
8 838b: cb,73,0e,02          push  [R72+20e]          push([Xram2L]);      
8 838f: cc,30                pop   R30                R30 = pop();         
8 8391: c8,30                push  R30                push(R30);           
8 8393: cf,73,10,02          pop   [R72+210]          [Xram3L] = pop();    
8 8397: f0                   ret                      return;              


8 8398: 27,e4                                         Unknown Operation/Structure


RAM_test:
8 839a: a1,ff,08,3a          ldw   R3a,8ff            R3a = 8ff;           
8 839e: a1,00,01,42          ldw   R42,100            R42 = 100;           
8 83a2: a1,aa,aa,30          ldw   R30,aaaa           R30 = aaaa;          
8 83a6: a1,55,55,32          ldw   R32,5555           R32 = 5555;          
8 83aa: 95,40,02             xrb   R02,40             CPU_OK ^= 40;        
8 83ad: 17,05                incb  R05                WD_TIMER++;          
//  backup contents of test location                                                  //
8 83af: a2,42,34             ldw   R34,[R42]          R34 = [R42];         
8 83b2: 95,40,02             xrb   R02,40             CPU_OK ^= 40;        
//  test odd bits                                                                     //
8 83b5: c2,42,30             stw   [R42],R30          [R42] = R30;         
8 83b8: a2,42,36             ldw   R36,[R42]          R36 = [R42];         
8 83bb: 88,30,36             cmpw  R36,R30                                 
8 83be: d7,1a                jne   83da               if (R36 != R30) goto 83da;
//  test even bits                                                                    //
8 83c0: c2,42,32             stw   [R42],R32          [R42] = R32;         
8 83c3: a2,42,36             ldw   R36,[R42]          R36 = [R42];         
8 83c6: 88,32,36             cmpw  R36,R32                                 
8 83c9: d7,0f                jne   83da               if (R36 != R32) goto 83da;
//  restore contents of test location                                                 //
8 83cb: c2,43,34             stw   [R42++],R34        [R42++] = R34;       
8 83ce: 88,3a,42             cmpw  R42,R3a                                 
//  loop to end                                                                       //
8 83d1: d3,d7                jnc   83aa               if ((uns) R42 < R3a) goto 83aa;
8 83d3: a3,73,46,01,10       ldw   R10,[R72+146]      STACK = [SvStack];   
8 83d8: fb                   ei                       enable ints;         
8 83d9: f0                   ret                      return;              

83da - Sub 8 83da:
8 83da: e7,a1,ff             jump  837e               goto Sub0604;        

Sub0608:
8 83dd: 35,2b,05             jnb   B5,R2b,83e5        if (!B5_[Flags_2B]) goto 83e5;

Sub0609:
8 83e0: c3,72,40,00          stw   [R72+40],0         [Miltmr] = 0;        
8 83e4: f0                   ret                      return;              

8 83e5: 3f,a1,36             jb    B7,Ra1,841e        if (B7_[a1_Flags]) goto 841e;
8 83e8: 51,fa,c5,34          an3b  R34,Rc5,fa         R34 = [Fmem_flags] & fa;
8 83ec: d7,16                jne   8404               if (R34 != 0) goto 8404;
8 83ee: b3,72,32,42          ldb   R42,[R72+32]       R42 = [C41FIL];      
8 83f2: 9b,78,49,42          cmpb  R42,[R78+49]                            
8 83f6: d9,0c                jgtu  8404               if ((uns) R42 > [RCp+49]) goto 8404;
8 83f8: b3,72,3c,42          ldb   R42,[R72+3c]       R42 = [C91FIL];      
8 83fc: 9b,78,53,42          cmpb  R42,[R78+53]                            
8 8400: d9,02                jgtu  8404               if ((uns) R42 > [RCp+53]) goto 8404;
8 8402: 20,27                sjmp  842b               goto 842b;           

8404 - Sub 8 8404:
8 8404: a3,79,98,00,40       ldw   R40,[R78+98]       R40 = [RCp+98];      
//  Check Engine LP?                                                                  //
8 8409: 6b,72,40,40          sb2w  R40,[R72+40]       R40 -= [Miltmr];     
8 840d: db,1e                jc    842d               if (R40 >= 0) goto 842d;
8 840f: 01,42                clrw  R42                R42 = 0;             
8 8411: 8f,79,9c,00,40       divw  R40,[R78+9c]       R40 = R40L / [RCp+Anpip1];
8 8416: dd,03                jv    841b               if (OV) goto Sub0611;
8 8418: 38,40,12             jb    B0,R40,842d        if (B0_R40) goto 842d;

Sub0611:
8 841b: e7,8e,f3             jump  77ac               goto Set_STO;        

841e - Sub 8 841e:
8 841e: 3c,2a,0a             jb    B4,R2a,842b        if (B4_[VIP_flags]) goto 842b;
8 8421: 3c,2d,07             jb    B4,R2d,842b        if (B4_[Flags_2D]) goto 842b;
8 8424: 8b,79,9a,00,00       cmpw  0,[R78+9a]                              
8 8429: d7,05                jne   8430               if (0 != [RCp+Bg_point]) goto 8430;
8 842b: 2f,b3                scall 83e0               Sub0609();           

842d - Sub 8 842d:
8 842d: e7,84,f3             jump  77b4               goto Reset_STO;      

8 8430: 2f,e9                scall 841b               Sub0611();           
8 8432: 27,ac                sjmp  83e0               goto Sub0609;        

Sub0614:
8 8434: 3b,d6,4d             jb    B3,Rd6,8484        if (B3_[STO_flags]) goto 8484;
8 8437: 3a,2b,4a             jb    B2,R2b,8484        if (B2_[Flags_2B]) goto 8484;
8 843a: 30,2a,03             jnb   B0,R2a,8440        if (!B0_[VIP_flags]) goto Sub0615;
8 843d: 91,20,2a             orrb  R2a,20             [VIP_flags] |= 20;   

Sub0615:
8 8440: fa                   di                       disable ints;        
8 8441: ff                   ff                                            
//  force new stack pointer ?                                                         //
8 8442: a1,8c,04,10          ldw   R10,48c            STACK = 48c;         
//  Reset Low speed outputs ?                                                         //
8 8446: ef,a6,f6             call  7aef               Sub0558();           
//  clear all LSO outputs                                                             //
8 8449: 01,46                clrw  R46                [IO_Port_State] = 0; 
8 844b: 31,2a,03             jnb   B1,R2a,8451        if (!B1_[VIP_flags]) goto 8451;
8 844e: 91,40,2a             orrb  R2a,40             [VIP_flags] |= 40;   

8451 - Sub 8 8451:
8 8451: ef,de,9b             call  2032               Reset_All();         
8 8454: 30,2a,06             jnb   B0,R2a,845d        if (!B0_[VIP_flags]) goto 845d;
8 8457: 71,fe,2a             an2b  R2a,fe             [VIP_flags] &= fe;   
8 845a: 91,80,2a             orrb  R2a,80             [VIP_flags] |= 80;   
8 845d: 31,2a,0c             jnb   B1,R2a,846c        if (!B1_[VIP_flags]) goto 846c;
8 8460: 71,bd,2a             an2b  R2a,bd             [VIP_flags] &= bd;   
8 8463: a1,00,28,42          ldw   R42,2800           R42 = 2800;          
//  Counts up after h/w reset                                                         //
8 8467: c3,01,34,01,42       stw   [134],R42          [Putmr] = R42;       

846c - Sub 8 846c:
8 846c: 35,2a,06             jnb   B5,R2a,8475        if (!B5_[VIP_flags]) goto 8475;
8 846f: 71,db,2a             an2b  R2a,db             [VIP_flags] &= db;   
8 8472: 91,18,2a             orrb  R2a,18             [VIP_flags] |= 18;   
8 8475: 36,2a,06             jnb   B6,R2a,847e        if (!B6_[VIP_flags]) goto 847e;
8 8478: 71,bb,2a             an2b  R2a,bb             [VIP_flags] &= bb;   
8 847b: 91,10,2a             orrb  R2a,10             [VIP_flags] |= 10;   

847e - Sub 8 847e:
8 847e: ef,33,f3             call  77b4               Reset_STO();         
8 8481: e7,cd,9c             jump  2151               goto Backg_loop;     

8 8484: f0                   ret                      return;              

Idm_inth:
8 8485: 71,7f,87             an2b  R87,7f             [New_irqs] &= 7f;    
8 8488: 37,90,03             jnb   B7,R90,848e        if (!B7_[Last_HSI]) goto 848e;
8 848b: 91,10,4e             orrb  R4e,10             [Flags_4E] |= 10;    
8 848e: f0                   ret                      return;              

Set_ign_timers:
8 848f: 37,4e,07             jnb   B7,R4e,8499        if (!B7_[Flags_4E]) goto 8499;
8 8492: 71,7f,4e             an2b  R4e,7f             [Flags_4E] &= 7f;    
8 8495: c3,72,be,00          stw   [R72+be],0         [Tslpip] = 0;        
8 8499: 38,2c,0a             jb    B0,R2c,84a6        if (B0_[Flags_2C]) goto 84a6;
8 849c: 34,4e,07             jnb   B4,R4e,84a6        if (!B4_[Flags_4E]) goto 84a6;
8 849f: 71,ef,4e             an2b  R4e,ef             [Flags_4E] &= ef;    
8 84a2: c3,72,44,00          stw   [R72+44],0         [Tslidm] = 0;        
8 84a6: 36,4e,07             jnb   B6,R4e,84b0        if (!B6_[Flags_4E]) goto 84b0;
8 84a9: 71,bf,4e             an2b  R4e,bf             [Flags_4E] &= bf;    
8 84ac: c7,72,b6,00          stb   [R72+b6],0         [Baptmr] = 0;        
8 84b0: f0                   ret                      return;              

Check_ConsoleD:
8 84b1: fa                   di                       disable ints;        

Check_console:
8 84b2: a3,01,00,0d,14       ldw   R14,[d00]          R14 = [CC_d00];      
8 84b7: 99,2a,15             cmpb  R15,2a                                  
//  console present?                                                                  //
8 84ba: d7,2c                jne   84e8               if (R15 != 2a) goto 84e8;
8 84bc: 3c,24,1b             jb    B4,R24,84da        if (B4_[Flags_24]) goto 84da;
8 84bf: 38,0a,18             jb    B0,R0a,84da        if (B0_HSO_OVF) goto 84da;
//  add 5D to current IOTime                                                          //
8 84c2: 47,01,0e,20,06,80    ad3w  R80,R06,[200e]     [HSO_time] = IO_TIMER + [CCEXETIME];
8 84c8: d7,02                jne   84cc               if ([HSO_time] != 0) goto 84cc;
//  increment past zero                                                               //
8 84ca: 07,80                incw  R80                [HSO_time]++;        

84cc - Sub 8 84cc:
8 84cc: c3,01,1a,c1,80       stw   [c11a],R80         [CC_c11a] = [HSO_time];
8 84d1: a0,80,0e             ldw   R0e,R80            HSO_TIME = [HSO_time];
//  request interrupt (in 5D IOtimes)                                                 //
8 84d4: b1,0f,0d             ldb   R0d,f              HSO_CMD = f;         
//  Console call                                                                      //
8 84d7: ef,2c,4b             call  d006               CC_d006();           

84da - Sub 8 84da:
8 84da: a3,01,80,0c,14       ldw   R14,[c80]          R14 = [CC_c80];      
8 84df: 36,14,06             jnb   B6,R14,84e8        if (!B6_R14) goto 84e8;
//  use these calibration pointers for console                                        //
8 84e2: a1,00,c2,14          ldw   R14,c200           R14 = CC_c200;       
8 84e6: 20,09                sjmp  84f1               goto 84f1;           

84e8 - Sub 8 84e8:
8 84e8: c7,01,00,c0,00       stb   [c000],0           [CC_c000] = 0;       
//  calibration Table pointers                                                        //
8 84ed: a1,22,20,14          ldw   R14,2022           R14 = RBASEADR_01;   

84f1 - Sub 8 84f1:
8 84f1: 3c,24,01             jb    B4,R24,84f5        if (B4_[Flags_24]) goto 84f5;
8 84f4: fb                   ei                       enable ints;         

84f5 - Sub 8 84f5:
8 84f5: a1,f0,00,18          ldw   R18,f0             R18 = f0;            
8 84f9: b3,01,20,20,1a       ldb   R1a,[2020]         R1a = [LEVNUM];      

84fe - Sub 8 84fe:
8 84fe: a2,15,1c             ldw   R1c,[R14++]        R1c = [R14++];       
8 8501: c2,19,1c             stw   [R18++],R1c        [R18++] = R1c;       
//  loop                                                                              //
8 8504: e0,1a,f7             djnz  R1a,84fe           R1a--; if (R1a !=  0) goto 84fe;
//  exit                                                                              //
8 8507: 3c,24,22             jb    B4,R24,852c        if (B4_[Flags_24]) goto Sub0629;
//  console value ?                                                                   //
8 850a: a3,01,f2,1f,42       ldw   R42,[1ff2]         R42 = [EC_1ff2];     
//  console signature?                                                                //
8 850f: 89,1c,1f,42          cmpw  R42,1f1c                                
8 8513: d7,17                jne   852c               if (R42 != 1f1c) goto Sub0629;
8 8515: a1,a5,a5,42          ldw   R42,a5a5           R42 = a5a5;          
//  read/write console ?                                                              //
8 8519: c3,01,f6,1f,42       stw   [1ff6],R42         [EC_1ff6] = R42;     
8 851e: 8b,01,f6,1f,42       cmpw  R42,[1ff6]                              
8 8523: d7,07                jne   852c               if (R42 != [EC_1ff6]) goto Sub0629;
//  return address                                                                    //
8 8525: c9,2c,85             push  852c               push(Sub0629);       
//  call here if 1FF6 is a R/W register                                               //
8 8528: cb,01,f2,1f          push  [1ff2]             push([EC_1ff2]);     

Sub0629:
8 852c: 71,ef,24             an2b  R24,ef             [Flags_24] &= ef;    
8 852f: f0                   ret                      return;              

Evp_?:
8 8530: 36,e6,6f             jnb   B6,Re6,85a2        if (!B6_[Flags_e6]) goto 85a2;
8 8533: b3,01,c0,07,16       ldb   R16,[7c0]          R16 = [Kam_flags];   
8 8538: a3,72,b4,14          ldw   R14,[R72+b4]       R14 = [Putmr];       
8 853c: 8b,f8,50,14          cmpw  R14,[Rf8+50]                            
8 8540: db,0c                jc    854e               if ((uns) R14 >= [Sc0088]) goto 854e;
8 8542: 71,fd,28             an2b  R28,fd             [Flags_28] &= fd;    
8 8545: 3f,28,03             jb    B7,R28,854b        if (B7_[Flags_28]) goto 854b;
8 8548: 3f,16,03             jb    B7,R16,854e        if (B7_R16) goto 854e;
8 854b: 91,20,ec             orrb  Rec,20             [Flag_ec] |= 20;     
8 854e: 3a,a1,09             jb    B2,Ra1,855a        if (B2_[a1_Flags]) goto 855a;
8 8551: 9b,f8,56,c8          cmpb  Rc8,[Rf8+56]                            
8 8555: d1,03                jleu  855a               if ((uns) [Atmr1] <= [Sc0091]) goto 855a;
8 8557: 71,7f,16             an2b  R16,7f             R16 &= 7f;           
8 855a: 35,ec,40             jnb   B5,Rec,859d        if (!B5_[Flag_ec]) goto 859d;
8 855d: 39,28,3d             jb    B1,R28,859d        if (B1_[Flags_28]) goto 859d;
8 8560: 8b,f8,52,14          cmpw  R14,[Rf8+52]                            
8 8564: d3,37                jnc   859d               if ((uns) R14 < [Sc0089]) goto 859d;
8 8566: 8b,f8,54,14          cmpw  R14,[Rf8+54]                            
8 856a: d9,31                jgtu  859d               if ((uns) R14 > [Sc0090]) goto 859d;
8 856c: a1,80,a2,3e          ldw   R3e,a280           R3e = a280;          
8 8570: a3,72,96,34          ldw   R34,[R72+96]       R34 = [EVP_Raw];     
8 8574: 8b,f3,38,01,34       cmpw  R34,[Rf2+138]                           
8 8579: d1,1d                jleu  8598               if ((uns) R34 <= [Veptll]) goto 8598;
8 857b: 8b,f3,3a,01,34       cmpw  R34,[Rf2+13a]                           
8 8580: db,16                jc    8598               if ((uns) R34 >= [Vepthl]) goto 8598;
8 8582: 67,f8,4e,34          ad2w  R34,[Rf8+4e]       R34 += [Sc0087];     
8 8586: d3,03                jnc   858b               if (R34 <= ffff) goto 858b;
8 8588: bd,ff,34             ldsbw R34,ff             R34 = (sig)ff;       

858b - Sub 8 858b:
8 858b: a3,01,ee,07,32       ldw   R32,[7ee]          R32 = [KEptzer];     
//  new value in R34                                                                  //
8 8590: ef,cb,b0             call  365e               Srolav1T([d048]);    
8 8593: 48,d0                                         #args                
8 8595: 91,80,16             orrb  R16,80             R16 |= 80;           

8598 - Sub 8 8598:
8 8598: c3,01,ee,07,3e       stw   [7ee],R3e          [KEptzer] = R3e;     
8 859d: c7,01,c0,07,16       stb   [7c0],R16          [Kam_flags] = R16;   
8 85a2: f0                   ret                      return;              

Check_Kam_1:
8 85a3: ad,56,30             ldzbw R30,56             R30 = (uns)56;       
//  start new csum                                                                    //
8 85a6: 01,38                clrw  R38                R38 = 0;             

85a8 - Sub 8 85a8:
8 85a8: af,31,03,07,3a       ldzbw R3a,[R30+703]      R3a = (uns)[R30+KCsumh];
8 85ad: 64,3a,38             ad2w  R38,R3a            R38 += R3a;          
//  Table 2                                                                           //
8 85b0: af,31,59,07,3a       ldzbw R3a,[R30+759]      R3a = (uns)[R30+Ktmtb185];
8 85b5: 64,3a,38             ad2w  R38,R3a            R38 += R3a;          
//  loop                                                                              //
8 85b8: e0,30,ed             djnz  R30,85a8           R30--; if (R30 !=  0) goto 85a8;
//  current csum                                                                      //
8 85bb: a3,01,02,07,3a       ldw   R3a,[702]          R3a = [KCsuml];      
8 85c0: 68,38,3a             sb2w  R3a,R38            R3a -= R38;          
8 85c3: db,02                jc    85c7               if (R3a >= 0) goto 85c7;
8 85c5: 03,3a                negw  R3a                R3a = -R3a;          
8 85c7: 89,01,00,3a          cmpw  R3a,1                                   
8 85cb: d9,06                jgtu  85d3               if ((uns) R3a > 1) goto Sub0635;
//  OK, save new csum                                                                 //
8 85cd: c3,01,02,07,38       stw   [702],R38          [KCsuml] = R38;      
8 85d2: f0                   ret                      return;              

Sub0635:
8 85d3: b1,80,3a             ldb   R3a,80             R3a = 80;            
8 85d6: ad,56,30             ldzbw R30,56             R30 = (uns)56;       

85d9 - Sub 8 85d9:
8 85d9: c7,31,03,07,3a       stb   [R30+703],R3a      [R30+KCsumh] = R3a;  
//  Table 2                                                                           //
8 85de: c7,31,59,07,3a       stb   [R30+759],R3a      [R30+Ktmtb185] = R3a;
8 85e3: e0,30,f3             djnz  R30,85d9           R30--; if (R30 !=  0) goto 85d9;
//  new csum = (56+56)*128                                                            //
8 85e6: a1,00,56,38          ldw   R38,5600           R38 = 5600;          
//  save sum                                                                          //
8 85ea: c3,01,02,07,38       stw   [702],R38          [KCsuml] = R38;      
8 85ef: c7,01,e0,07,00       stb   [7e0],0            [Kwuctr] = 0;        
8 85f4: f0                   ret                      return;              

Check_Kam_2:
8 85f5: a1,08,00,30          ldw   R30,8              R30 = 8;             
8 85f9: 01,32                clrw  R32                R32 = 0;             

85fb - Sub 8 85fb:
8 85fb: 67,31,e2,07,32       ad2w  R32,[R30+7e2]      R32 += [R30+Kamqc];  
8 8600: 79,02,30             sb2b  R30,2              R30 -= 2;            
8 8603: d7,f6                jne   85fb               if (R30 != 0) goto 85fb;
//  old sum (cksum? )                                                                 //
8 8605: 4b,01,ec,07,32,34    sb3w  R34,R32,[7ec]      R34 = R32 - [KIsksum];
8 860b: d6,02                jge   860f               if ((sig) R34 >= 0) goto 860f;
8 860d: 03,34                negw  R34                R34 = -R34;          
8 860f: 89,01,00,34          cmpw  R34,1                                   
8 8613: d1,0e                jleu  8623               if ((uns) R34 <= 1) goto 8623;
8 8615: a1,08,00,32          ldw   R32,8              R32 = 8;             
8 8619: a1,e4,07,30          ldw   R30,7e4            R30 = 7e4;           

861d - Sub 8 861d:
8 861d: c6,31,00             stb   [R30++],0          [R30++] = 0;         
8 8620: e0,32,fa             djnz  R32,861d           R32--; if (R32 !=  0) goto 861d;

8623 - Sub 8 8623:
8 8623: c3,01,ec,07,32       stw   [7ec],R32          [KIsksum] = R32;     
8 8628: f0                   ret                      return;              


8 8629: ff                                            Unknown Operation/Structure



ScScSadDir023:
8 862a: 00,00             ScScSadDir023     oword         0                   0      //  high byte address = 0  //

ScScSadDir024:
8 862c: 86,50             ScScSadDir024     oword      8650               34384      //  next list, and end of this one  //


//  start of 1st init list                                                            //
8 862e: ee,04,a1,84,4f,01,c1,80                       Unknown Operation/Structure
//  #$9c                                                                              //
8 8636: 9c,01,9d,01,ae,40,af,06                       Unknown Operation/Structure
//  #$b0                                                                              //
8 863e: b0,1e,b1,1e,c2,28,dc,01                       Unknown Operation/Structure
//  #$d0                                                                              //
8 8646: d0,ff,c6,01,46,10,47,40                       Unknown Operation/Structure
//  #$9b                                                                              //
8 864e: 9b,01                                         Unknown Operation/Structure



ScScSadDir025:
8 8650: 86,5a             ScScSadDir025     oword      865a               34394      //  next list start  //

ScScSadDir026:
8 8652: ff,ff             ScScSadDir026     oword      ffff               65535

ScScSadDir027:
8 8654: ff,ff             ScScSadDir027     oword      ffff               65535

ScScSadDir028:
8 8656: ff,ff             ScScSadDir028     oword      ffff               65535

ScScSadDir029:
8 8658: ff,ff             ScScSadDir029     oword      ffff               65535

ScScSadDir030:
8 865a: 01,00             ScScSadDir030     oword       100                 256      //  Addresses + 0x100 for this list  //

ScScSadDir031:
8 865c: 86,8e             ScScSadDir031     oword      868e               34446      //  start of next list  //


//  #$100 = 0x5bc0                                                                    //
8 865e: 00,c0,01,5b,02,c0,03,4c                       Unknown Operation/Structure
//  #$104 = 0xa280                                                                    //
8 8666: 04,80,05,a2,08,40,09,06                       Unknown Operation/Structure
//  #$116 = 0x4cc0                                                                    //
8 866e: 16,c0,17,4c,26,80,27,3e                       Unknown Operation/Structure
//  #$128                                                                             //
8 8676: 28,c0,29,4c,31,d8,41,08                       Unknown Operation/Structure
//  #$152                                                                             //
8 867e: 52,01,53,20,69,01,70,c0                       Unknown Operation/Structure
//  #$171                                                                             //
8 8686: 71,4c,7c,80,7d,a2,fe,d8                       Unknown Operation/Structure



ScScSadDir032:
8 868e: 86,98             ScScSadDir032     oword      8698               34456      //  next list  //

ScScSadDir033:
8 8690: ff,ff             ScScSadDir033     oword      ffff               65535

ScScSadDir034:
8 8692: ff,ff             ScScSadDir034     oword      ffff               65535

ScScSadDir035:
8 8694: ff,ff             ScScSadDir035     oword      ffff               65535

ScScSadDir036:
8 8696: ff,ff             ScScSadDir036     oword      ffff               65535

ScScSadDir037:
8 8698: 02,00             ScScSadDir037     oword       200                 512      //  Addresses + 0x200 for this list  //

ScScSadDir038:
8 869a: 86,ca             ScScSadDir038     oword      86ca               34506


//  #$20b                                                                             //
8 869c: 0b,80,0d,80,11,c8,16,ff                       Unknown Operation/Structure
//  #$217                                                                             //
8 86a4: 17,ff,26,99,27,79,2a,80                       Unknown Operation/Structure
//  #$22b                                                                             //
8 86ac: 2b,3e,3a,22,3b,08,68,01                       Unknown Operation/Structure
//  #$269                                                                             //
8 86b4: 69,01,6a,01,6b,01,bb,ff                       Unknown Operation/Structure
//  #$2b9                                                                             //
8 86bc: b9,0a,c5,03,d4,ff,e0,ff                       Unknown Operation/Structure
//  #$2ea                                                                             //
8 86c4: ea,ff,f4,ff,fe,ff                             Unknown Operation/Structure



ScScSadDir039:
8 86ca: 86,d4             ScScSadDir039     oword      86d4               34516

ScScSadDir040:
8 86cc: ff,ff             ScScSadDir040     oword      ffff               65535

ScScSadDir041:
8 86ce: ff,ff             ScScSadDir041     oword      ffff               65535

ScScSadDir042:
8 86d0: ff,ff             ScScSadDir042     oword      ffff               65535

ScScSadDir043:
8 86d2: ff,ff             ScScSadDir043     oword      ffff               65535

ScScSadDir044:
8 86d4: 03,00             ScScSadDir044     oword       300                 768      //  Addresses + 0x300 for this list  //

ScScSadDir045:
8 86d6: 86,e6             ScScSadDir045     oword      86e6               34534


//  #$308                                                                             //
8 86d8: 08,ff,12,ff,1c,ff,22,ff                       Unknown Operation/Structure
//  #$3c3                                                                             //
8 86e0: c3,19,c0,6c,c1,05                             Unknown Operation/Structure



ScScSadDir046:
8 86e6: ff,ff             ScScSadDir046     oword      ffff               65535      //  end of all lists  //


8 86e8 -> 8bff                     fill               ff



Rf0_EndAddr - Rbase Rf0 end next address:
8 8c00: 5a,8e             Rf0 Rf0_EndAddr     word      8e5a               36442
                           B15 B14 B13 B12 B11 B10 B9 B8 B7 B6 B5 B4 B3 B2 B1 B0
                             0   0   1   1   1   1  1  0  1  0  0  0  0  0  0  0
8 8c02: 80,3e             Rf0+2 Sc0002        word      3e80               16000
8 8c04: 54,00             Rf0+4 Sc0003        word        54                  84
8 8c06: fa,00             Rf0+6 Sc0004        word        fa                 250
8 8c08: e8,03             Rf0+8 Sc0005        word       3e8                1000

Ssfctr:
8 8c0a: 48,01             Rf0+a Ssfctr        word       148                 328
8 8c0c: 60,3b             Rf0+c Sc0006        word      3b60               15200
8 8c0e: 20,4e             Rf0+e Sc0007        word      4e20               20000

8 8c10: 0c                Rf0+10 Sc0008       byte         c                  12
8 8c11: 20                Rf0+11 Sc0009       byte        20                  32


ScScSadDir047:
8 8c12: 83,07             8 8c12 ScScSadDir047    word       783                1923      //  4.615mS - 4 cyl  //

ScScSadDir048:
8 8c14: 02,05             8 8c14 ScScSadDir048    word       502                1282      //  3.076mS - 6 cyl  //

Min_pip:
8 8c16: c1,03             8 8c16 Min_pip      word       3c1                 961      //  2.306ms - 8 cyl (min pip period, = 6250000/rpm)  //

Fc001 - Function 001:
8 8c18: 7f,19             func                  7f,       19                 127,       25
8 8c1a: 23,19             func                  23,       19                  35,       25
8 8c1c: 1e,2d             func                  1e,       2d                  30,       45
8 8c1e: 80,2d             func                  80,       2d                -128,       45
8 8c20: 80,2d             func                  80,       2d                -128,       45
8 8c22: 80,2d             func                  80,       2d                -128,       45
8 8c24: 80,2d             func                  80,       2d                -128,       45

Fn394F:
8 8c26: 7f,03             func                  7f,        3                 127,        3
8 8c28: 80,03             func                  80,        3                -128,        3
8 8c2a: 80,03             func                  80,        3                -128,        3
8 8c2c: 80,03             func                  80,        3                -128,        3
8 8c2e: 80,03             func                  80,        3                -128,        3
8 8c30: 80,03             func                  80,        3                -128,        3
8 8c32: 80,03             func                  80,        3                -128,        3

Fn651:
8 8c34: ff,7f,00,00       func                7fff,        0               32767,        0
8 8c38: 55,00,00,00       func                  55,        0                  85,        0
8 8c3c: 41,00,a0,0f       func                  41,      fa0                  65,     4000
8 8c40: 00,80,a0,0f       func                8000,      fa0              -32768,     4000
8 8c44: 00,80,a0,0f       func                8000,      fa0              -32768,     4000
8 8c48: 00,80,a0,0f       func                8000,      fa0              -32768,     4000
8 8c4c: 00,80,a0,0f       func                8000,      fa0              -32768,     4000

Fn652A:
8 8c50: ff,ff,80,3e       func                ffff,     3e80               65535,    16000
8 8c54: 9a,59,80,3e       func                599a,     3e80               22938,    16000
8 8c58: 33,33,10,27       func                3333,     2710               13107,    10000
8 8c5c: 9a,19,00,1e       func                199a,     1e00                6554,     7680
8 8c60: 00,00,00,1e       func                   0,     1e00                   0,     7680
8 8c64: 00,00,00,1e       func                   0,     1e00                   0,     7680
8 8c68: 00,00,00,1e       func                   0,     1e00                   0,     7680
8 8c6c: 00,00,00,1e       func                   0,     1e00                   0,     7680
8 8c70: 00,00,00,1e       func                   0,     1e00                   0,     7680
8 8c74: 00,00,00,1e       func                   0,     1e00                   0,     7680

Bapxfr:
8 8c78: ff,ff,d1,f7       func                ffff,     f7d1               65535,    63441
8 8c7c: 41,a2,d1,f7       func                a241,     f7d1               41537,    63441
8 8c80: 56,8a,75,b8       func                8a56,     b875               35414,    47221
8 8c84: d8,74,a3,78       func                74d8,     78a3               29912,    30883
8 8c88: 00,00,a3,78       func                   0,     78a3                   0,    30883
8 8c8c: 00,00,a3,78       func                   0,     78a3                   0,    30883

Fn018:
8 8c90: ff,70             func                  ff,       70                 255,        7
8 8c92: 2d,70             func                  2d,       70                  45,        7
8 8c94: 0f,40             func                   f,       40                  15,        4
8 8c96: 0a,30             func                   a,       30                  10,        3
8 8c98: 06,20             func                   6,       20                   6,        2
8 8c9a: 00,00             func                   0,        0                   0,        0
8 8c9c: 00,00             func                   0,        0                   0,        0

Fn019B:
8 8c9e: ff,70             func                  ff,       70                 255,        7
8 8ca0: f4,70             func                  f4,       70                 244,        7
8 8ca2: 22,00             func                  22,        0                  34,        0
8 8ca4: 00,00             func                   0,        0                   0,        0
8 8ca6: 00,00             func                   0,        0                   0,        0

Fn020B:
8 8ca8: 7f      struct     7f


8 8ca9: 60,7d,60,e7,00,80,00,80               Unknown Calibration        60, 7d, 60, e7,  0, 80,  0, 80         96, 125,  96, 231,   0, 128,   0, 128
8 8cb1: 00                                    Unknown Calibration                                     0                                             0


Emm_lscale:
8 8cb2: ff,ff,00,07       func                ffff,      700               65535,        7
8 8cb6: 00,60,00,07       func                6000,      700               24576,        7
8 8cba: cd,4c,00,06       func                4ccd,      600               19661,        6
8 8cbe: cd,0c,00,01       func                 ccd,      100                3277,        1
8 8cc2: 66,06,00,00       func                 666,        0                1638,        0
8 8cc6: 00,00,00,00       func                   0,        0                   0,        0
8 8cca: 00,00,00,00       func                   0,        0                   0,        0
8 8cce: 00,00,00,00       func                   0,        0                   0,        0

Ectflscale:
8 8cd2: 7f      struct     7f


8 8cd3: 90,78,90,f1,00,80,00,80               Unknown Calibration        90, 78, 90, f1,  0, 80,  0, 80        144, 120, 144, 241,   0, 128,   0, 128
8 8cdb: 00,80,00                              Unknown Calibration                             0, 80,  0                                   0, 128,   0


Rpmscale:
8 8cde: ff,ff,00,09       func                ffff,      900               65535,        9
8 8ce2: 80,3e,00,09       func                3e80,      900               16000,        9
8 8ce6: e0,2e,00,08       func                2ee0,      800               12000,        8
8 8cea: 70,17,00,05       func                1770,      500                6000,        5
8 8cee: d0,07,00,00       func                 7d0,        0                2000,        0
8 8cf2: 00,00,00,00       func                   0,        0                   0,        0
8 8cf6: 00,00,00,00       func                   0,        0                   0,        0

Ldscale:
8 8cfa: ff,ff,00,07       func                ffff,      700               65535,        7
8 8cfe: 00,60,00,07       func                6000,      700               24576,        7
8 8d02: cd,4c,00,06       func                4ccd,      600               19661,        6
8 8d06: cd,0c,00,01       func                 ccd,      100                3277,        1
8 8d0a: 66,06,00,00       func                 666,        0                1638,        0
8 8d0e: 00,00,00,00       func                   0,        0                   0,        0
8 8d12: 00,00,00,00       func                   0,        0                   0,        0

Fn072A:
8 8d16: ff,ff,70,00       func                ffff,       70               65535,        7
8 8d1a: 33,73,70,00       func                7333,       70               29491,        7
8 8d1e: 9a,59,50,00       func                599a,       50               22938,        5
8 8d22: 33,33,30,00       func                3333,       30               13107,        3
8 8d26: 33,13,10,00       func                1333,       10                4915,        1
8 8d2a: 9a,09,00,00       func                 99a,        0                2458,        0
8 8d2e: 00,00,00,00       func                   0,        0                   0,        0

Fn082:
8 8d32: ff,ff,00,02       func                ffff,      200               65535,        2
8 8d36: 8f,42,00,02       func                428f,      200               17039,        2
8 8d3a: 7b,24,00,01       func                247b,      100                9339,        1
8 8d3e: ae,17,00,00       func                17ae,        0                6062,        0
8 8d42: 00,00,00,00       func                   0,        0                   0,        0

Fn083:
8 8d46: ff,ff,00,03       func                ffff,      300               65535,        3
8 8d4a: 40,1f,00,03       func                1f40,      300                8000,        3
8 8d4e: 10,0e,00,00       func                 e10,        0                3600,        0
8 8d52: 00,00,00,00       func                   0,        0                   0,        0

Fn087:
8 8d56: ff,ff,ff,00       func                ffff,       ff               65535,      255
8 8d5a: 00,8c,ff,00       func                8c00,       ff               35840,      255
8 8d5e: 00,8c,00,00       func                8c00,        0               35840,        0
8 8d62: 00,00,00,00       func                   0,        0                   0,        0
8 8d66: 00,00,00,00       func                   0,        0                   0,        0
8 8d6a: 00,00,00,00       func                   0,        0                   0,        0

Fn339:
8 8d6e: ff,ff             func                  ff,       ff                 255,      255
8 8d70: cd,c8             func                  cd,       c8                 205,      200
8 8d72: 9a,a2             func                  9a,       a2                 154,      162
8 8d74: 58,80             func                  58,       80                  88,      128
8 8d76: 00,80             func                   0,       80                   0,      128

Fn342:
8 8d78: ff,00             func                  ff,        0                 255,        0
8 8d7a: 58,00             func                  58,        0                  88,        0
8 8d7c: 33,22             func                  33,       22                  51,       34
8 8d7e: 1a,40             func                  1a,       40                  26,       64
8 8d80: 0a,59             func                   a,       59                  10,       89
8 8d82: 05,65             func                   5,       65                   5,      101
8 8d84: 00,80             func                   0,       80                   0,      128

Fn344:
8 8d86: ff,5b             func                  ff,       5b                 255,       91
8 8d88: e6,5b             func                  e6,       5b                 230,       91
8 8d8a: 9a,6e             func                  9a,       6e                 154,      110
8 8d8c: 58,80             func                  58,       80                  88,      128
8 8d8e: 00,80             func                   0,       80                   0,      128

Fn346:
8 8d90: ff,f3             func                  ff,       f3                 255,      243
8 8d92: e6,f3             func                  e6,       f3                 230,      243
8 8d94: cd,7a             func                  cd,       7a                 205,      122
8 8d96: b3,52             func                  b3,       52                 179,       82
8 8d98: 9a,3e             func                  9a,       3e                 154,       62
8 8d9a: 80,32             func                  80,       32                 128,       50
8 8d9c: 57,27             func                  57,       27                  87,       39
8 8d9e: 1a,19             func                  1a,       19                  26,       25
8 8da0: 05,14             func                   5,       14                   5,       20
8 8da2: 00,10             func                   0,       10                   0,       16
8 8da4: 00,10             func                   0,       10                   0,       16

Fn378:
8 8da6: ff,80             func                  ff,       80                 255,      128
8 8da8: f0,80             func                  f0,       80                 240,      128
8 8daa: e0,70             func                  e0,       70                 224,      112
8 8dac: a0,50             func                  a0,       50                 160,       80
8 8dae: 00,40             func                   0,       40                   0,       64

Fn703A:
8 8db0: ff,ec             func                  ff,       ec                 255,      -20
8 8db2: e8,ec             func                  e8,       ec                 232,      -20
8 8db4: e0,fb             func                  e0,       fb                 224,       -5
8 8db6: d1,0a             func                  d1,        a                 209,       10
8 8db8: b8,17             func                  b8,       17                 184,       23
8 8dba: 49,43             func                  49,       43                  73,       67
8 8dbc: 25,5a             func                  25,       5a                  37,       90
8 8dbe: 14,6f             func                  14,       6f                  20,      111
8 8dc0: 0d,7f             func                   d,       7f                  13,      127
8 8dc2: 00,7f             func                   0,       7f                   0,      127

Fn825A:
8 8dc4: 7f,06             func                  7f,        6                 127,        6
8 8dc6: 6e,06             func                  6e,        6                 110,        6
8 8dc8: 67,00             func                  67,        0                 103,        0
8 8dca: 5a,00             func                  5a,        0                  90,        0
8 8dcc: 50,09             func                  50,        9                  80,        9
8 8dce: 37,09             func                  37,        9                  55,        9
8 8dd0: f3,29             func                  f3,       29                 -13,       41
8 8dd2: 80,29             func                  80,       29                -128,       41

Fn825B:
8 8dd4: 7f,09             func                  7f,        9                 127,        9
8 8dd6: 71,09             func                  71,        9                 113,        9
8 8dd8: 64,06             func                  64,        6                 100,        6
8 8dda: 58,00             func                  58,        0                  88,        0
8 8ddc: 80,00             func                  80,        0                -128,        0
8 8dde: 80,00             func                  80,        0                -128,        0
8 8de0: 80,00             func                  80,        0                -128,        0

Maf_tfr:
8 8de2: ff,ff,4d,0a       func                ffff,      a4d               65535,     2637
8 8de6: 4a,4c,4d,0a       func                4c4a,      a4d               19530,     2637
8 8dea: 17,47,93,08       func                4717,      893               18199,     2195
8 8dee: d5,42,59,07       func                42d5,      759               17109,     1881
8 8df2: 2d,3e,29,06       func                3e2d,      629               15917,     1577
8 8df6: b4,38,ec,04       func                38b4,      4ec               14516,     1260
8 8dfa: ae,35,49,04       func                35ae,      449               13742,     1097
8 8dfe: 62,32,a5,03       func                3262,      3a5               12898,      933
8 8e02: 8f,2e,00,03       func                2e8f,      300               11919,      768
8 8e06: 1b,2b,7d,02       func                2b1b,      27d               11035,      637
8 8e0a: 50,29,40,02       func                2950,      240               10576,      576
8 8e0e: 33,27,fd,01       func                2733,      1fd               10035,      509
8 8e12: 0e,25,c1,01       func                250e,      1c1                9486,      449
8 8e16: 77,22,7b,01       func                2277,      17b                8823,      379
8 8e1a: d3,1f,3c,01       func                1fd3,      13c                8147,      316
8 8e1e: 3d,1e,1d,01       func                1e3d,      11d                7741,      285
8 8e22: d9,1c,04,01       func                1cd9,      104                7385,      260
8 8e26: 0e,1b,e6,00       func                1b0e,       e6                6926,      230
8 8e2a: 2f,19,c5,00       func                192f,       c5                6447,      197
8 8e2e: 7d,17,ab,00       func                177d,       ab                6013,      171
8 8e32: 23,15,8d,00       func                1523,       8d                5411,      141
8 8e36: e9,12,74,00       func                12e9,       74                4841,      116
8 8e3a: 75,11,67,00       func                1175,       67                4469,      103
8 8e3e: 25,0e,4b,00       func                 e25,       4b                3621,       75
8 8e42: 00,0c,3b,00       func                 c00,       3b                3072,       59
8 8e46: 23,09,2b,00       func                 923,       2b                2339,       43
8 8e4a: 00,00,2b,00       func                   0,       2b                   0,       43
8 8e4e: 00,00,2b,00       func                   0,       2b                   0,       43
8 8e52: 00,00,2b,00       func                   0,       2b                   0,       43
8 8e56: 00,00,2b,00       func                   0,       2b                   0,       43


Rf2_EndAddr - Rbase Rf2 end next address:
8 8e5a: d6,8f             Rf2 Rf2_EndAddr     word      8fd6               36822


Bfulsw:
8 8e5c: 00                Rf2+2 Bfulsw        byte         0                   0


8 8e5d: ff                                    Unknown Calibration                                    ff                                           255



Fkskay:
8 8e5e: 00,20             Rf2+4 Fkskay        word      2000                8192

Sigkll:
8 8e60: 00,a0             Rf2+6 Sigkll        word      a000               40960

Sigklu:
8 8e62: 55,d5             Rf2+8 Sigklu        word      d555               54613

Thbpsc:
8 8e64: 00,83             Rf2+a Thbpsc        word      8300               33536

Thbpsh:
8 8e66: 00,06             Rf2+c Thbpsh        word       600                1536

Niac:
8 8e68: 20,4e             Rf2+e Niac          word      4e20               20000

Niach:
8 8e6a: d0,07             Rf2+10 Niach        word       7d0                2000

Debamp:
8 8e6c: 80,0c             Rf2+12 Debamp       word       c80                3200

Hi_off:
8 8e6e: 00,0c             Rf2+14 Hi_off       word       c00                3072

Low_on:
8 8e70: 00,e6             Rf2+16 Low_on       word      e600               58880

Lcoast:
8 8e72: c0,0c             Rf2+18 Lcoast       word       cc0                3264

Hcoast:
8 8e74: 80,2f             Rf2+1a Hcoast       word      2f80               12160

Laccel:
8 8e76: 40,38             Rf2+1c Laccel       word      3840               14400

Haccel:
8 8e78: 00,5d             Rf2+1e Haccel       word      5d00               23808

Lresum:
8 8e7a: 80,62             Rf2+20 Lresum       word      6280               25216

Hresum:
8 8e7c: c0,91             Rf2+22 Hresum       word      91c0               37312

Lohold:
8 8e7e: 40,92             Rf2+24 Lohold       word      9240               37440

Hihold:
8 8e80: 00,c7             Rf2+26 Hihold       word      c700               50944

Dcbias:
8 8e82: 91,01             Rf2+28 Dcbias       word       191                 401

Setgn:
8 8e84: b8,1e             Rf2+2a Setgn        word      1eb8                7864

Vehgn:
8 8e86: cd,2c             Rf2+2c Vehgn        word      2ccd               11469

Tapgn:
8 8e88: c3,04             Rf2+2e Tapgn        word       4c3                1219

Debtim:
8 8e8a: 29,00             Rf2+30 Debtim       word        29                  41

Minvsp:
8 8e8c: 00,32             Rf2+32 Minvsp       word      3200               12800

Maxvsp:
8 8e8e: 00,c8             Rf2+34 Maxvsp       word      c800               51200

Vsnmax:
8 8e90: 80,57             Rf2+36 Vsnmax       word      5780               22400

Mphded:
8 8e92: 00,14             Rf2+38 Mphded       word      1400                5120

Mphh:
8 8e94: 00,02             Rf2+3a Mphh         word       200                 512

Aclded:
8 8e96: 00,06             Rf2+3c Aclded       word       600                1536

Aclinc:
8 8e98: 00,03             Rf2+3e Aclinc       word       300                 768

Hldref:
8 8e9a: 00,01             Rf2+40 Hldref       word       100                 256


Vsmpg:
8 8e9c: fe                Rf2+42 Vsmpg        byte        fe                 254

Vsmpgh:
8 8e9d: 0a                Rf2+43 Vsmpgh       byte         a                  10

Hldrng:
8 8e9e: 26                Rf2+44 Hldrng       byte        26                  38

Lowbat:
8 8e9f: b0                Rf2+45 Lowbat       byte        b0                 176

Vscfrq:
8 8ea0: 32                Rf2+46 Vscfrq       byte        32                  50

Vstype:
8 8ea1: 01                Rf2+47 Vstype       byte         1                   1

Dasmph:
8 8ea2: 0d                Rf2+48 Dasmph       byte         d                  13

Dasmhyst:
8 8ea3: 04                Rf2+49 Dasmhyst     byte         4                   4


Dasmin:
8 8ea4: 80,01             Rf2+4a Dasmin       word       180                 384


Mfmhys:
8 8ea6: 03                Rf2+4c Mfmhys       byte         3                   3



Vairfl:
8 8ea7: 01,01,ff,78,00,00,32                  Unknown Calibration             1,  1, ff, 78,  0,  0, 32               1,   1, 255, 120,   0,   0,  50


Viprr1:
8 8eae: 66      struct     66


8 8eaf: 06                                    Unknown Calibration                                     6                                             6


Viplr1:
8 8eb0: 33      struct     33


8 8eb1: 03                                    Unknown Calibration                                     3                                             3

Vnmin:
//  HEGO Test Min RPM                                                                 //
8 8eb2: 10,0e,00,ff                           Unknown Calibration                        10,  e,  0, ff                             16,  14,   0, 255


Vtap1:
8 8eb6: 00      struct     0


8 8eb7: 19                                    Unknown Calibration                                    19                                            25


Vtap2:
8 8eb8: 80      struct     80


8 8eb9: 3e                                    Unknown Calibration                                    3e                                            62


Vtap3:
8 8eba: 00      struct     0


8 8ebb: 19                                    Unknown Calibration                                    19                                            25


Vtap4:
8 8ebc: 80      struct     80


8 8ebd: 3e                                    Unknown Calibration                                    3e                                            62

Vtap5:
//  VTAP5 - VTAP5                                                                     //
8 8ebe: 00,64,80,57                           Unknown Calibration                         0, 64, 80, 57                              0, 100, 128,  87



Actmin:
8 8ec2: 00,0a             Rf2+68 Actmin       word       a00                2560

Actmax:
8 8ec4: c0,e9             Rf2+6a Actmax       word      e9c0               59840


Vect5:
8 8ec6: 3c                Rf2+6c Vect5        byte        3c                  60


8 8ec7: ff                                    Unknown Calibration                                    ff                                           255



Tapmax:
8 8ec8: 80,f7             Rf2+6e Tapmax       word      f780               63360

Tapmin:
8 8eca: 00,0a             Rf2+70 Tapmin       word       a00                2560



Wiglvl:
8 8ecc: c8,01,10,08                           Unknown Calibration                        c8,  1, 10,  8                            200,   1,  16,   8



Vidmst:
8 8ed0: 10                Rf2+76 Vidmst       byte        10                  16


8 8ed1: ff                                    Unknown Calibration                                    ff                                           255

Vidmtm:
8 8ed2: 82,00,d0,07,5a,00                     Unknown Calibration                82,  0, d0,  7, 5a,  0                  130,   0, 208,   7,  90,   0



Ectmin:
8 8ed8: 00,0a             Rf2+7e Ectmin       word       a00                2560

Ectmax:
8 8eda: c0,e9             Rf2+80 Ectmax       word      e9c0               59840



Vtcego:
8 8edc: 00,05,78,50,40,06,a8,00               Unknown Calibration         0,  5, 78, 50, 40,  6, a8,  0          0,   5, 120,  80,  64,   6, 168,   0

Goostp:
//  Goose TP - Min throttle voltage delta for goose.                                  //
8 8ee4: 00,32,00,14                           Unknown Calibration                         0, 32,  0, 14                              0,  50,   0,  20



Vdisfm:
8 8ee8: 00                Rf2+8e Vdisfm       byte         0                   0


8 8ee9: ff                                    Unknown Calibration                                    ff                                           255



Vtcdsn:
8 8eea: 00,0b             Rf2+90 Vtcdsn       word       b00                2816



Vbisw:
//  VBISW                                                                             //
8 8eec: 01,ff,7b,04,48,01,ec,01               Unknown Calibration         1, ff, 7b,  4, 48,  1, ec,  1          1, 255, 123,   4,  72,   1, 236,   1

Vlamcb:
8 8ef4: 33,73,c2,00,b0,01,30,30               Unknown Calibration        33, 73, c2,  0, b0,  1, 30, 30         51, 115, 194,   0, 176,   1,  48,  48

Vcbtm1:
8 8efc: 18,18,01                              Unknown Calibration                            18, 18,  1                                  24,  24,   1



Vegosw:
8 8eff: 08                Rf2+a5 Vegosw       byte         8                   8

Vegotm:
8 8f00: f0                Rf2+a6 Vegotm       byte        f0                 240

Vptcnt:
8 8f01: 0a                Rf2+a7 Vptcnt       byte         a                  10



Vectmr:
8 8f02: 10,6d,09,20,6d,ff,cd,2c               Unknown Calibration        10, 6d,  9, 20, 6d, ff, cd, 2c         16, 109,   9,  32, 109, 255, 205,  44



Evpmin:
8 8f0a: 00,0a             Rf2+b0 Evpmin       word       a00                2560

Evpmax:
8 8f0c: 40,f6             Rf2+b2 Evpmax       word      f640               63040

Vevpll:
8 8f0e: 00      struct     0


8 8f0f: 0f                                    Unknown Calibration                                     f                                            15

Vevphl:
8 8f10: 80,22,00,14,00,28,10,10               Unknown Calibration        80, 22,  0, 14,  0, 28, 10, 10        128,  34,   0,  20,   0,  40,  16,  16

Vdlhed:
8 8f18: 10,50,78,c8,c8,fe,c8,fe               Unknown Calibration        10, 50, 78, c8, c8, fe, c8, fe         16,  80, 120, 200, 200, 254, 200, 254

C33LVL:
//  Error 33 Threshold -  EGR did not flow                                            //
8 8f20: c8,fe                                 Unknown Calibration                                c8, fe                                      200, 254


C35LVL:
8 8f22 -> 8f30                     fill               c8


C14UP:
8 8f31: 64,64,0a,64,14,0a,14,64               Unknown Calibration        64, 64,  a, 64, 14,  a, 14, 64        100, 100,  10, 100,  20,  10,  20, 100

C41UP:
8 8f39: 64,64,64,64,14,64,64,64               Unknown Calibration        64, 64, 64, 64, 14, 64, 64, 64        100, 100, 100, 100,  20, 100, 100, 100

C66UP:
8 8f41: 14,ff,64,64,64,32,ff,40               Unknown Calibration        14, ff, 64, 64, 64, 32, ff, 40         20, 255, 100, 100, 100,  50, 255,  64
8 8f49: b3,c0,0f                              Unknown Calibration                            b3, c0,  f                                 179, 192,  15


Viact3:
8 8f4c: 40      struct     40


8 8f4d: be                                    Unknown Calibration                                    be                                           190


Viact4:
8 8f4e: c0      struct     c0


8 8f4f: 0f                                    Unknown Calibration                                     f                                            15

Viect1:
8 8f50: 40,b3,c0,0f                           Unknown Calibration                        40, b3, c0,  f                             64, 179, 192,  15


Viect3:
8 8f54: c0      struct     c0


8 8f55: 3a                                    Unknown Calibration                                    3a                                            58


Viect4:
8 8f56: c0      struct     c0


8 8f57: 0f                                    Unknown Calibration                                     f                                            15



Vect3:
8 8f58: 4b                Rf2+fe Vect3        byte        4b                  75



Filhys:
8 8f59: 05,33,73                              Unknown Calibration                             5, 33, 73                                   5,  51, 115



Vbpdl1:
8 8f5c: b0,04             Rf2+102 Vbpdl1      word       4b0                1200



Vbpdl2:
8 8f5e: f7,06,28,00,00,2d                     Unknown Calibration                f7,  6, 28,  0,  0, 2d                  247,   6,  40,   0,   0,  45


Vmafr1:
8 8f64: 40      struct     40


8 8f65: 1f                                    Unknown Calibration                                    1f                                            31


Vmafr2:
8 8f66: c0      struct     c0


8 8f67: 5d                                    Unknown Calibration                                    5d                                            93



Maxmaf:
8 8f68: 00,f5             Rf2+10e Maxmaf      word      f500               62720

Vmamin:
8 8f6a: c0,12             Rf2+110 Vmamin      word      12c0                4800

Vmarpm:
8 8f6c: 50,46             Rf2+112 Vmarpm      word      4650               18000

Vsload:
8 8f6e: cd,0c             Rf2+114 Vsload      word       ccd                3277


Vbpmax:
8 8f70: 9a                Rf2+116 Vbpmax      byte        9a                 154


8 8f71: ff                                    Unknown Calibration                                    ff                                           255

Fmdtm:
//  MIL Delay Time. delay before turning light on after fault detected.               //
8 8f72: 00,00,08,00,00,00,00,00               Unknown Calibration         0,  0,  8,  0,  0,  0,  0,  0          0,   0,   8,   0,   0,   0,   0,   0

Vnd2:
8 8f7a: 00,80,80,07,80,07,00,00               Unknown Calibration         0, 80, 80,  7, 80,  7,  0,  0          0, 128, 128,   7, 128,   7,   0,   0

Occdt4:
//  EVR Open Circuit Check.                                                           //
8 8f82: 80,07,80,07,80,07,00,00               Unknown Calibration        80,  7, 80,  7, 80,  7,  0,  0        128,   7, 128,   7, 128,   7,   0,   0

Occdta:
//  SCVNT Open Circuit Check.                                                         //
8 8f8a: 40,06,40,06                           Unknown Calibration                        40,  6, 40,  6                             64,   6,  64,   6


Eptmin:
8 8f8e: 00      struct     0


8 8f8f: 0a                                    Unknown Calibration                                     a                                            10

Eptmax:
8 8f90: 40,f6                                 Unknown Calibration                                40, f6                                       64, 246



Veptll:
8 8f92: 80,98             Rf2+138 Veptll      word      9880               39040

Vepthl:
8 8f94: 00,b4             Rf2+13a Vepthl      word      b400               46080



Veptrl:
8 8f96: c0,99,80,d4                           Unknown Calibration                        c0, 99, 80, d4                            192, 153, 128, 212


Veptil:
8 8f9a: 40      struct     40


8 8f9b: 97                                    Unknown Calibration                                    97                                           151

Veptih:
8 8f9c: 80,d4,00,14,00,96,a0,0f               Unknown Calibration        80, d4,  0, 14,  0, 96, a0,  f        128, 212,   0,  20,   0, 150, 160,  15

Vtcept:
8 8fa4: 1a,00,00,ff,58,02,78,00               Unknown Calibration        1a,  0,  0, ff, 58,  2, 78,  0         26,   0,   0, 255,  88,   2, 120,   0

Vspret:
8 8fac: 14,00,01,28                           Unknown Calibration                        14,  0,  1, 28                             20,   0,   1,  40


Vdly1:
8 8fb0: 08      struct     8

Vdly2:
8 8fb1: 18      struct     18

Viptm2:
8 8fb2: 50      struct     50

Vatmr2:
8 8fb3: 50      struct     50


Vstgn:
8 8fb4: e5,00             Rf2+15a Vstgn       word        e5                 229

Vvhgn:
8 8fb6: e5,00             Rf2+15c Vvhgn       word        e5                 229

Vtpgn:
8 8fb8: 8f,02             Rf2+15e Vtpgn       word       28f                 655



Vrsh:
8 8fba: 00,06,00,78                           Unknown Calibration                         0,  6,  0, 78                              0,   6,   0, 120



Vacrr:
8 8fbe: 9a,04             Rf2+164 Vacrr       word       49a                1178

Vipt1:
8 8fc0: a0      struct     a0



Vipt2:
8 8fc1: a0,50,78,18,ff,00,05,00               Unknown Calibration        a0, 50, 78, 18, ff,  0,  5,  0        160,  80, 120,  24, 255,   0,   5,   0
8 8fc9: 05                                    Unknown Calibration                                     5                                             5



Vdcbia:
8 8fca: 26,01             Rf2+170 Vdcbia      word       126                 294



Vvscet:
8 8fcc: f0,38                                 Unknown Calibration                                f0, 38                                      240,  56



Vsamin:
8 8fce: 60,22             Rf2+174 Vsamin      word      2260                8800

Vsmmin:
8 8fd0: 70,17             Rf2+176 Vsmmin      word      1770                6000


Vssmn1:
8 8fd2: 0a                Rf2+178 Vssmn1      byte         a                  10



Vsssw:
8 8fd3: 01                                    Unknown Calibration                                     1                                             1



Vsstim:
8 8fd4: 18                Rf2+17a Vsstim      byte        18                  24


8 8fd5: ff                                    Unknown Calibration                                    ff                                           255



Rf4_EndAddr - Rbase Rf4 end next address:
8 8fd6: a8,93             Rf4 Rf4_EndAddr     word      93a8               37800

Mfatm3:
8 8fd8: 4b      struct     4b



Mfatm2:
8 8fd9: bd,00,00,bd                           Unknown Calibration                        bd,  0,  0, bd                            189,   0,   0, 189



Mfasw:
8 8fdd: 01                Rf4+7 Mfasw         byte         1                   1

Cintsw:
8 8fde: 00                Rf4+8 Cintsw        byte         0                   0

Cintv:
8 8fdf: 74                Rf4+9 Cintv         byte        74                 116

Cthin:
8 8fe0: 7f                Rf4+a Cthin         byte        7f                 127

Numpr:
8 8fe1: 7b                Rf4+b Numpr         byte        7b                 123

Olmtd1:
8 8fe2: 26                Rf4+c Olmtd1        byte        26                  38

Agb:
8 8fe3: ff                Rf4+d Agb           byte        ff                 255


Mfanlo:
8 8fe4: c0,5d             Rf4+e Mfanlo        word      5dc0               24000

Mfanhi:
8 8fe6: e8,1c             Rf4+10 Mfanhi       word      1ce8                7400

Mfasn:
8 8fe8: 90,01             Rf4+12 Mfasn        word       190                 400

Mfalh:
8 8fea: 00,80             Rf4+14 Mfalh        word      8000               32768


Swtcnt:
8 8fec: 64                Rf4+16 Swtcnt       byte        64                 100


8 8fed: ff                                    Unknown Calibration                                    ff                                           255



Mfanhh:
8 8fee: 20,03             Rf4+18 Mfanhh       word       320                 800

Mfanlh:
8 8ff0: 90,01             Rf4+1a Mfanlh       word       190                 400

Mfall:
8 8ff2: 00,80             Rf4+1c Mfall        word      8000               32768

Mfalhh:
8 8ff4: 66,66             Rf4+1e Mfalhh       word      6666               26214


Mpmnbp:
8 8ff6: d0                Rf4+20 Mpmnbp       byte        d0                 208

Mpnbph:
8 8ff7: 0a                Rf4+21 Mpnbph       byte         a                  10

Mfarmp:
8 8ff8: 0d                Rf4+22 Mfarmp       byte         d                  13


8 8ff9: ff                                    Unknown Calibration                                    ff                                           255



Injref:
8 8ffa: 01,00             Rf4+24 Injref       word         1                   1

Idkmul:
8 8ffc: 00,80             Rf4+26 Idkmul       word      8000               32768

Inj_dly:
8 8ffe: 00,00             Rf4+28 Inj_dly      word         0                   0


Alpha:
8 9000: 00                Rf4+2a Alpha        byte         0                   0


8 9001: ff                                    Unknown Calibration                                    ff                                           255



Gaclmult:
8 9002: 33,00             Rf4+2c Gaclmult     word        33                  51



Aeflag:
8 9004: 01,ff                                 Unknown Calibration                                 1, ff                                        1, 255



Tpdlta:
8 9006: c0,ff             Rf4+30 Tpdlta       word      ffc0               65472

Aeacld:
8 9008: df,ff             Rf4+32 Aeacld       word      ffdf               65503


Aetar:
8 900a: 14                Rf4+34 Aetar        byte        14                  20

Frctae:
8 900b: 00                Rf4+35 Frctae       byte         0                   0

Kft:
8 900c: 4d                Rf4+36 Kft          byte        4d                  77


8 900d: ff                                    Unknown Calibration                                    ff                                           255



Tfsmn:
8 900e: 20,03             Rf4+38 Tfsmn        word       320                 800


Tfctm:
8 9010: 03                Rf4+3a Tfctm        byte         3                   3

Mteisf:
8 9011: 02                Rf4+3b Mteisf       byte         2                   2

Mteftc:
8 9012: 10                Rf4+3c Mteftc       byte        10                  16

Tfcisw:
                                                         B7 B6 B5 B4 B3 B2 B1 B0
                                                          0  0  0  0  0  0  0  1
8 9013: 01                Rf4+3d Tfcisw       byte         1                   1

Meftra:
8 9014: 9a                Rf4+3e Meftra       byte        9a                 154

Meftrd:
8 9015: 80                Rf4+3f Meftrd       byte        80                 128


Tfcded:
8 9016: 1a,00             Rf4+40 Tfcded       word        1a                  26

Archlk:
8 9018: 00,00             Rf4+42 Archlk       word         0                   0

Engdisp:
8 901a: 4a,1b             Rf4+44 Engdisp      word      1b4a                6986

Low_slope:
8 901c: 64,3b             Rf4+46 Low_slope    word      3b64               15204

Hi_slope:
8 901e: b2,2c             Rf4+48 Hi_slope     word      2cb2               11442

Faminc:
8 9020: 00,00             Rf4+4a Faminc       word         0                   0

Kpsinu:
8 9022: 7e,00             Rf4+4c Kpsinu       word        7e                 126

Kpsind:
8 9024: 7e,00             Rf4+4e Kpsind       word        7e                 126

Kpsidu:
8 9026: 7e,00             Rf4+50 Kpsidu       word        7e                 126

Kpsidd:
8 9028: 7e,00             Rf4+52 Kpsidd       word        7e                 126

Psibrm:
8 902a: 66,06             Rf4+54 Psibrm       word       666                1638

Psibrn:
8 902c: 9a,f9             Rf4+56 Psibrn       word      f99a               -1638

Ithbma:
8 902e: cd,08             Rf4+58 Ithbma       word       8cd                2253

Debycp:
8 9030: cd,00             Rf4+5a Debycp       word        cd                 205

Dasptk:
8 9032: c3,f5             Rf4+5c Dasptk       word      f5c3               62915

Daspto:
8 9034: cd,00             Rf4+5e Daspto       word        cd                 205

Delhys:
8 9036: 40,03             Rf4+60 Delhys       word       340                 832

Rpmctl:
8 9038: 58,02             Rf4+62 Rpmctl       word       258                 600

Ndif:
8 903a: f0,0f             Rf4+64 Ndif         word       ff0                4080


Minmph:
8 903c: 08                Rf4+66 Minmph       byte         8                   8


8 903d: ff                                    Unknown Calibration                                    ff                                           255



Rpmded:
8 903e: 64,00             Rf4+68 Rpmded       word        64                 100

Delrat:
8 9040: 40,03             Rf4+6a Delrat       word       340                 832


Samrat:
8 9042: 02                Rf4+6c Samrat       byte         2                   2

Isctm:
8 9043: 04                Rf4+6d Isctm        byte         4                   4

Lowlod:
8 9044: 00                Rf4+6e Lowlod       byte         0                   0

Aclod:
8 9045: 00                Rf4+6f Aclod        byte         0                   0

Updisc:
8 9046: 01                Rf4+70 Updisc       byte         1                   1

Updatm:
8 9047: 03                Rf4+71 Updatm       byte         3                   3

Niold:
8 9048: ff                Rf4+72 Niold        byte        ff                 255

Drv_rpm:
8 9049: 02                Rf4+73 Drv_rpm      byte         2                   2


Nubase:
8 904a: 54,00             Rf4+74 Nubase       word        54                  84

Neu_rpm:
8 904c: 54,00             Rf4+76 Neu_rpm      word        54                  84

Bzzrpm:
8 904e: 08,00             Rf4+78 Bzzrpm       word         8                   8

Dnac:
8 9050: 03,00             Rf4+7a Dnac         word         3                   3

Isclpd:
8 9052: 67,00             Rf4+7c Isclpd       word        67                 103

Famlim:
8 9054: 8f,02             Rf4+7e Famlim       word       28f                 655

Maxfam:
8 9056: 00,a0             Rf4+80 Maxfam       word      a000               40960

Ndppm:
8 9058: 00,00             Rf4+82 Ndppm        word         0                   0

Dnppm:
8 905a: 00,00             Rf4+84 Dnppm        word         0                   0

Acppm:
8 905c: 66,00             Rf4+86 Acppm        word        66                 102

Dacppm:
8 905e: 66,00             Rf4+88 Dacppm       word        66                 102

Psppm:
8 9060: 00,00             Rf4+8a Psppm        word         0                   0

Dactm:
8 9062: 28,00             Rf4+8c Dactm        word        28                  40

Dnpows:
8 9064: 00,00             Rf4+8e Dnpows       word         0                   0


Tkdtm:
8 9066: 19                Rf4+90 Tkdtm        byte        19                  25

Bzztm:
8 9067: 50                Rf4+91 Bzztm        byte        50                  80

Nddelt:
8 9068: 00                Rf4+92 Nddelt       byte         0                   0

Fn1328:
8 9069: 80,80,80,80,80,80,80,80,80,80       table       80, 80, 80, 80, 80, 80, 80, 80, 80, 80        128, 128, 128, 128, 128, 128, 128, 128, 128, 128        
8 9073: 80,80,80,80,80,80,80,80,80,80       table       80, 80, 80, 80, 80, 80, 80, 80, 80, 80        128, 128, 128, 128, 128, 128, 128, 128, 128, 128        
8 907d: 80,80,80,80,80,80,80,80,80,80       table       80, 80, 80, 80, 80, 80, 80, 80, 80, 80        128, 128, 128, 128, 128, 128, 128, 128, 128, 128        
8 9087: 80,80,80,80,80,80,80,80,80,80       table       80, 80, 80, 80, 80, 80, 80, 80, 80, 80        128, 128, 128, 128, 128, 128, 128, 128, 128, 128        
8 9091: 80,80,80,80,80,80,80,80,80,80       table       80, 80, 80, 80, 80, 80, 80, 80, 80, 80        128, 128, 128, 128, 128, 128, 128, 128, 128, 128        
8 909b: 80,80,80,80,80,80,80,80,80,80       table       80, 80, 80, 80, 80, 80, 80, 80, 80, 80        128, 128, 128, 128, 128, 128, 128, 128, 128, 128        
8 90a5: 80,80,80,80,80,80,80,80,80,80       table       80, 80, 80, 80, 80, 80, 80, 80, 80, 80        128, 128, 128, 128, 128, 128, 128, 128, 128, 128        
8 90af: 80,80,80,80,80,80,80,80,80,80       table       80, 80, 80, 80, 80, 80, 80, 80, 80, 80        128, 128, 128, 128, 128, 128, 128, 128, 128, 128        

Fn389:
8 90b9: ff,80             func                  ff,       80                 255,      128
8 90bb: e0,80             func                  e0,       80                 224,      128
8 90bd: b0,00             func                  b0,        0                 176,        0
8 90bf: 00,00             func                   0,        0                   0,        0
8 90c1: 00,00             func                   0,        0                   0,        0
8 90c3: 00,00             func                   0,        0                   0,        0


//  TP Scaler for MAF Failure                                                         //
8 90c5: ff                                    Unknown Calibration                                    ff                                           255


Fn098:
8 90c6: ff,ff,00,06       func                ffff,      600               65535,        6
8 90ca: 00,7d,00,06       func                7d00,      600               32000,        6
8 90ce: 00,19,00,02       func                1900,      200                6400,        2
8 90d2: 00,00,00,00       func                   0,        0                   0,        0
8 90d6: 00,00,00,00       func                   0,        0                   0,        0
8 90da: 00,00,00,00       func                   0,        0                   0,        0
8 90de: 00,00,00,00       func                   0,        0                   0,        0

Fc003 - Function 003:
8 90e2: ff,ff,37,1a       func                ffff,     1a37               65535,     6711
8 90e6: 80,3e,37,1a       func                3e80,     1a37               16000,     6711
8 90ea: 10,27,f0,16       func                2710,     16f0               10000,     5872
8 90ee: 40,1f,a9,13       func                1f40,     13a9                8000,     5033
8 90f2: 70,17,6b,0e       func                1770,      e6b                6000,     3691
8 90f6: 30,11,d5,09       func                1130,      9d5                4400,     2517
8 90fa: 10,0e,8e,06       func                 e10,      68e                3600,     1678
8 90fe: 00,00,f6,0d       func                   0,      df6                   0,     3574

Tb001 - Table 001:
8 9102: 1a,15,0a,0a,0a,09,08,07,06,06       table       1a, 15,  a,  a,  a,  9,  8,  7,  6,  6         26,  21,  10,  10,  10,   9,   8,   7,   6,   6        
8 910c: 44,41,3a,2f,22,19,13,11,0f,0e       table       44, 41, 3a, 2f, 22, 19, 13, 11,  f,  e         68,  65,  58,  47,  34,  25,  19,  17,  15,  14        
8 9116: 58,57,55,51,4b,42,32,28,1d,19       table       58, 57, 55, 51, 4b, 42, 32, 28, 1d, 19         88,  87,  85,  81,  75,  66,  50,  40,  29,  25        
8 9120: 60,64,68,69,6a,69,64,5a,4b,3e       table       60, 64, 68, 69, 6a, 69, 64, 5a, 4b, 3e         96, 100, 104, 105, 106, 105, 100,  90,  75,  62        
8 912a: 62,69,6b,6d,6e,6f,71,72,71,6f       table       62, 69, 6b, 6d, 6e, 6f, 71, 72, 71, 6f         98, 105, 107, 109, 110, 111, 113, 114, 113, 111        
8 9134: 64,6a,6d,70,72,75,77,7d,90,90       table       64, 6a, 6d, 70, 72, 75, 77, 7d, 90, 90        100, 106, 109, 112, 114, 117, 119, 125, 144, 144        
8 913e: 83,88,8c,90,93,94,9d,aa,df,df       table       83, 88, 8c, 90, 93, 94, 9d, aa, df, df        131, 136, 140, 144, 147, 148, 157, 170, 223, 223        

Inj_lt_scl:
8 9148: ff,ff,70,00       func                ffff,       70               65535,        7
8 914c: 00,60,70,00       func                6000,       70               24576,        7
8 9150: cd,4c,60,00       func                4ccd,       60               19661,        6
8 9154: cd,0c,10,00       func                 ccd,       10                3277,        1
8 9158: 66,06,00,00       func                 666,        0                1638,        0
8 915c: 00,00,00,00       func                   0,        0                   0,        0

Inj_time:
8 9160: 58,58,58,58,58,58,58,58,58,58       table       58, 58, 58, 58, 58, 58, 58, 58, 58, 58         88,  88,  88,  88,  88,  88,  88,  88,  88,  88        
8 916a: 58,58,58,58,58,58,58,58,58,58       table       58, 58, 58, 58, 58, 58, 58, 58, 58, 58         88,  88,  88,  88,  88,  88,  88,  88,  88,  88        
8 9174: 58,58,58,58,58,58,58,58,58,58       table       58, 58, 58, 58, 58, 58, 58, 58, 58, 58         88,  88,  88,  88,  88,  88,  88,  88,  88,  88        
8 917e: 58,58,58,58,58,58,58,58,58,58       table       58, 58, 58, 58, 58, 58, 58, 58, 58, 58         88,  88,  88,  88,  88,  88,  88,  88,  88,  88        
8 9188: 58,58,58,58,58,5f,64,64,64,64       table       58, 58, 58, 58, 58, 5f, 64, 64, 64, 64         88,  88,  88,  88,  88,  95, 100, 100, 100, 100        
8 9192: 5f,5f,5f,5f,5f,5f,69,69,74,74       table       5f, 5f, 5f, 5f, 5f, 5f, 69, 69, 74, 74         95,  95,  95,  95,  95,  95, 105, 105, 116, 116        
8 919c: 69,69,69,69,69,69,69,74,74,74       table       69, 69, 69, 69, 69, 69, 69, 74, 74, 74        105, 105, 105, 105, 105, 105, 105, 116, 116, 116        
8 91a6: 69,69,69,69,69,69,69,74,74,74       table       69, 69, 69, 69, 69, 69, 69, 74, 74, 74        105, 105, 105, 105, 105, 105, 105, 116, 116, 116        

Inj_opport:
8 91b0: 00      struct     0



Inj_opp:
//  Injector Firing Order - FN1329                                                    //
8 91b1: 00,00,00,00,02,02,02,02               Unknown Calibration         0,  0,  0,  0,  2,  2,  2,  2          0,   0,   0,   0,   2,   2,   2,   2


Inj_order:
8 91b9: 01      struct     1


8 91ba: 03,07,02,06,05,04,08                  Unknown Calibration             3,  7,  2,  6,  5,  4,  8               3,   7,   2,   6,   5,   4,   8


Tpsaclrich:
8 91c1: ff,00             func                  ff,        0                 255,        0
8 91c3: d5,00             func                  d5,        0                 213,        0
8 91c5: 71,26             func                  71,       26                 113,       38
8 91c7: 32,7a             func                  32,       7a                  50,      122
8 91c9: 00,80             func                   0,       80                   0,      128

Accelrich:
8 91cb: 54,5c,68,70,7c,88,9c,e0       table       54, 5c, 68, 70, 7c, 88, 9c, e0         84,  92, 104, 112, 124, 136, 156, 224        
8 91d3: 30,38,40,48,68,78,98,dc       table       30, 38, 40, 48, 68, 78, 98, dc         48,  56,  64,  72, 104, 120, 152, 220        
8 91db: 14,20,28,30,42,54,6c,b4       table       14, 20, 28, 30, 42, 54, 6c, b4         20,  32,  40,  48,  66,  84, 108, 180        
8 91e3: 10,14,18,20,32,44,66,88       table       10, 14, 18, 20, 32, 44, 66, 88         16,  20,  24,  32,  50,  68, 102, 136        
8 91eb: 08,08,0c,12,20,32,48,74       table        8,  8,  c, 12, 20, 32, 48, 74          8,   8,  12,  18,  32,  50,  72, 116        
8 91f3: 06,06,08,0c,12,20,30,50       table        6,  6,  8,  c, 12, 20, 30, 50          6,   6,   8,  12,  18,  32,  48,  80        
8 91fb: 06,06,08,0c,12,20,30,48       table        6,  6,  8,  c, 12, 20, 30, 48          6,   6,   8,  12,  18,  32,  48,  72        


8 9203: ff                                    Unknown Calibration                                    ff                                           255


Fc004 - Function 004:
8 9204: ff,ff,65,aa       func                ffff,     aa65               65535,    43621
8 9208: 00,00,65,aa       func                   0,     aa65                   0,    43621
8 920c: 00,00,65,aa       func                   0,     aa65                   0,    43621
8 9210: 00,00,65,aa       func                   0,     aa65                   0,    43621
8 9214: 00,00,65,aa       func                   0,     aa65                   0,    43621
8 9218: 00,00,65,aa       func                   0,     aa65                   0,    43621
8 921c: 00,00,65,aa       func                   0,     aa65                   0,    43621
8 9220: 00,00,65,aa       func                   0,     aa65                   0,    43621
8 9224: 00,00,65,aa       func                   0,     aa65                   0,    43621
8 9228: 00,00,65,aa       func                   0,     aa65                   0,    43621

Fc005 - Function 005:
8 922c: ff,ff,e0,1f       func                ffff,     1fe0               65535,     8160
8 9230: 00,00,e0,1f       func                   0,     1fe0                   0,     8160
8 9234: 00,00,e0,1f       func                   0,     1fe0                   0,     8160
8 9238: 00,00,e0,1f       func                   0,     1fe0                   0,     8160
8 923c: 00,00,e0,1f       func                   0,     1fe0                   0,     8160
8 9240: 00,00,e0,1f       func                   0,     1fe0                   0,     8160
8 9244: 00,00,e0,1f       func                   0,     1fe0                   0,     8160
8 9248: 00,00,e0,1f       func                   0,     1fe0                   0,     8160

ISC_ECT_SC:
8 924c: 7f,60             func                  7f,       60                 127,        6
8 924e: 7d,60             func                  7d,       60                 125,        6
8 9250: e7,00             func                  e7,        0                 -25,        0
8 9252: 80,00             func                  80,        0                -128,        0
8 9254: 80,00             func                  80,        0                -128,        0

Fc006 - Function 006:
8 9256: ff,ff,00,80       func                ffff,     8000               65535,    32768
8 925a: 9a,25,00,80       func                259a,     8000                9626,    32768
8 925e: f6,24,9a,79       func                24f6,     799a                9462,    31130
8 9262: ec,21,cd,6c       func                21ec,     6ccd                8684,    27853
8 9266: 9a,1f,66,66       func                1f9a,     6666                8090,    26214
8 926a: 00,18,e1,5a       func                1800,     5ae1                6144,    23265
8 926e: 00,0c,9a,49       func                 c00,     499a                3072,    18842
8 9272: 00,08,00,40       func                 800,     4000                2048,    16384
8 9276: 00,04,ec,31       func                 400,     31ec                1024,    12780
8 927a: ec,01,d7,23       func                 1ec,     23d7                 492,     9175
8 927e: 00,00,cd,0c       func                   0,      ccd                   0,     3277
8 9282: 00,00,00,00       func                   0,        0                   0,        0

Fc007 - Function 007:
8 9286: ff,ff,00,00       func                ffff,        0               65535,        0
8 928a: 60,09,00,00       func                 960,        0                2400,        0
8 928e: 08,07,ae,03       func                 708,      3ae                1800,      942
8 9292: 78,05,00,08       func                 578,      800                1400,     2048
8 9296: 00,00,00,08       func                   0,      800                   0,     2048

Fc008 - Function 008:
8 929a: ff,ff,80,00       func                ffff,       80               65535,      128
8 929e: 00,00,80,00       func                   0,       80                   0,      128
8 92a2: 00,00,80,00       func                   0,       80                   0,      128
8 92a6: 00,00,80,00       func                   0,       80                   0,      128
8 92aa: 00,00,80,00       func                   0,       80                   0,      128
8 92ae: 00,00,80,00       func                   0,       80                   0,      128

Fc009 - Function 009:
8 92b2: ff,c0             func                  ff,       c0                 255,      192
8 92b4: 38,c0             func                  38,       c0                  56,      192
8 92b6: 2b,40             func                  2b,       40                  43,       64
8 92b8: 29,40             func                  29,       40                  41,       64
8 92ba: 1f,ff             func                  1f,       ff                  31,      255
8 92bc: 00,ff             func                   0,       ff                   0,      255
8 92be: 00,ff             func                   0,       ff                   0,      255

Fc010 - Function 010:
8 92c0: 7f,00             func                  7f,        0                 127,        0
8 92c2: 32,06             func                  32,        6                  50,        6
8 92c4: 26,36             func                  26,       36                  38,       54
8 92c6: 19,06             func                  19,        6                  25,        6
8 92c8: 0a,06             func                   a,        6                  10,        6
8 92ca: 00,13             func                   0,       13                   0,       19
8 92cc: 80,13             func                  80,       13                -128,       19

Fc011 - Function 011:
8 92ce: ff,7f             func                  ff,       7f                 255,      127
8 92d0: 06,7f             func                   6,       7f                   6,      127
8 92d2: 00,53             func                   0,       53                   0,       83
8 92d4: 00,53             func                   0,       53                   0,       83

Fc012 - Function 012:
8 92d6: ff,7f,7f,00       func                7fff,       7f               32767,      127
8 92da: 64,00,7f,00       func                  64,       7f                 100,      127
8 92de: 28,00,71,00       func                  28,       71                  40,      113
8 92e2: 00,00,60,00       func                   0,       60                   0,       96
8 92e6: b0,ff,46,00       func                ffb0,       46                 -80,       70
8 92ea: 00,80,46,00       func                8000,       46              -32768,       70
8 92ee: 00,80,46,00       func                8000,       46              -32768,       70

Fc013 - Function 013:
8 92f2: ff,7f,7c,00       func                7fff,       7c               32767,      124
8 92f6: b8,01,7c,00       func                 1b8,       7c                 440,      124
8 92fa: 00,00,53,00       func                   0,       53                   0,       83
8 92fe: 10,ff,3e,00       func                ff10,       3e                -240,       62
8 9302: 00,80,3e,00       func                8000,       3e              -32768,       62
8 9306: 00,80,3e,00       func                8000,       3e              -32768,       62
8 930a: 00,80,3e,00       func                8000,       3e              -32768,       62

Fc014 - Function 014:
8 930e: ff,7f,05,00       func                7fff,        5               32767,        5
8 9312: 00,80,05,00       func                8000,        5              -32768,        5
8 9316: 00,80,05,00       func                8000,        5              -32768,        5
8 931a: 00,80,05,00       func                8000,        5              -32768,        5
8 931e: 00,80,05,00       func                8000,        5              -32768,        5
8 9322: 00,80,05,00       func                8000,        5              -32768,        5
8 9326: 00,80,05,00       func                8000,        5              -32768,        5

Dash_dec:
8 932a: ff,ff,00,01       func                ffff,      100               65535,      256
8 932e: 00,0c,00,01       func                 c00,      100                3072,      256
8 9332: 66,0a,b8,00       func                 a66,       b8                2662,      184
8 9336: 33,07,1d,00       func                 733,       1d                1843,       29
8 933a: 9a,05,08,00       func                 59a,        8                1434,        8
8 933e: fe,00,0c,00       func                  fe,        c                 254,       12
8 9342: 00,00,0e,00       func                   0,        e                   0,       14

Dash_max:
8 9346: ff,ff,9a,19       func                ffff,     199a               65535,     6554
8 934a: 40,1f,9a,19       func                1f40,     199a                8000,     6554
8 934e: 70,17,00,10       func                1770,     1000                6000,     4096
8 9352: d0,07,ec,01       func                 7d0,      1ec                2000,      492
8 9356: 00,00,ec,01       func                   0,      1ec                   0,      492

Crankisc:
8 935a: 7f,4d             func                  7f,       4d                 127,       77
8 935c: 5a,4d             func                  5a,       4d                  90,       77
8 935e: 50,7f             func                  50,       7f                  80,      127
8 9360: 80,7f             func                  80,       7f                -128,      127
8 9362: 80,7f             func                  80,       7f                -128,      127
8 9364: 80,7f             func                  80,       7f                -128,      127

ECT_AM_Mult:
8 9366: a6,80,66,5a,4d,48,44       table       a6, 80, 66, 5a, 4d, 48, 44        166, 128, 102,  90,  77,  72,  68        
8 936d: a6,80,66,53,4d,48,44       table       a6, 80, 66, 53, 4d, 48, 44        166, 128, 102,  83,  77,  72,  68        
8 9374: a6,9a,66,4d,4a,48,44       table       a6, 9a, 66, 4d, 4a, 48, 44        166, 154, 102,  77,  74,  72,  68        
8 937b: 9a,90,5a,46,4a,48,44       table       9a, 90, 5a, 46, 4a, 48, 44        154, 144,  90,  70,  74,  72,  68        
8 9382: 86,7a,53,46,4a,48,44       table       86, 7a, 53, 46, 4a, 48, 44        134, 122,  83,  70,  74,  72,  68        
8 9389: 6d,66,53,46,40,40,40       table       6d, 66, 53, 46, 40, 40, 40        109, 102,  83,  70,  64,  64,  64        

Drv_aflw:
8 9390: ff,ff             func                  ff,       ff                 255,      255
8 9392: 7a,ff             func                  7a,       ff                 122,      255
8 9394: 5e,ca             func                  5e,       ca                  94,      202
8 9396: 3f,8d             func                  3f,       8d                  63,      141
8 9398: 2a,60             func                  2a,       60                  42,       96
8 939a: 00,00             func                   0,        0                   0,        0

Neu_aflw:
8 939c: ff,ff             func                  ff,       ff                 255,      255
8 939e: 7a,fa             func                  7a,       fa                 122,      250
8 93a0: 2a,60             func                  2a,       60                  42,       96
8 93a2: 00,00             func                   0,        0                   0,        0
8 93a4: 00,00             func                   0,        0                   0,        0
8 93a6: 00,00             func                   0,        0                   0,        0


Rf6_EndAddr - Rbase Rf6 end next address:
8 93a8: 30,94             Rf6 Rf6_EndAddr     word      9430               37936

Fkarch:
8 93aa: 33,33             Rf6+2 Fkarch        word      3333               13107

Fkarc1:
8 93ac: 00,40             Rf6+4 Fkarc1        word      4000               16384

Filfrc:
8 93ae: 1a,01             Rf6+6 Filfrc        word       11a                 282

8 93b0: 01                Rf6+8 Sc0016        byte         1                   1


8 93b1: ff                                    Unknown Calibration                                    ff                                           255



SSFCTR:
8 93b2: 2c,01             Rf6+a SSFCTR        word       12c                 300
8 93b4: 00,00             Rf6+c Sc0017        word         0                   0

St0001 - Structure 001:
8 93b6: 00      struct     0


8 93b7: 00,00,00,01                           Unknown Calibration                         0,  0,  0,  1                              0,   0,   0,   1



Bihp:
8 93bb: 00                Rf6+13 Bihp         byte         0                   0

Pspshp:
8 93bc: 00                Rf6+14 Pspshp       byte         0                   0
8 93bd: 00                Rf6+15 Sc0018       byte         0                   0
8 93be: 71                Rf6+16 Sc0019       byte        71                 113
8 93bf: 76                Rf6+17 Sc0020       byte        76                 118
8 93c0: 05                Rf6+18 Sc0021       byte         5                   5


8 93c1: ff                                    Unknown Calibration                                    ff                                           255


8 93c2: 90,01             Rf6+1a Sc0022       word       190                 400
8 93c4: a0,0f             Rf6+1c Sc0023       word       fa0                4000

8 93c6: 14                Rf6+1e Sc0024       byte        14                  20
8 93c7: 9b                Rf6+1f Sc0025       byte        9b                 155
8 93c8: 03                Rf6+20 Sc0026       byte         3                   3


8 93c9: ff                                    Unknown Calibration                                    ff                                           255


8 93ca: 66,66             Rf6+22 Sc0027       word      6666               26214
8 93cc: ae,07             Rf6+24 Sc0028       word       7ae                1966

St0002 - Structure 002:
8 93ce: 38      struct     38


8 93cf: 5f,00,00,00                           Unknown Calibration                        5f,  0,  0,  0                             95,   0,   0,   0


8 93d3: 00                Rf6+2b Sc0029       byte         0                   0

8 93d4: 66,66             Rf6+2c Sc0030       word      6666               26214
8 93d6: d7,03             Rf6+2e Sc0031       word       3d7                 983

8 93d8: ff                Rf6+30 Sc0032       byte        ff                 255


8 93d9: ff                                    Unknown Calibration                                    ff                                           255


8 93da: 48,0d             Rf6+32 Sc0033       word       d48                3400
8 93dc: 20,03             Rf6+34 Sc0034       word       320                 800

8 93de: 3c                Rf6+36 Sc0035       byte        3c                  60
8 93df: ff                Rf6+37 Sc0036       byte        ff                 255
8 93e0: 00                Rf6+38 Sc0037       byte         0                   0

EcadHP:
8 93e1: 00                Rf6+39 EcadHP       byte         0                   0

ECADQ1:
8 93e2: 71                Rf6+3a ECADQ1       byte        71                 113

ECadn:
8 93e3: 48                Rf6+3b ECadn        byte        48                  72

ECADVS:
8 93e4: 1e                Rf6+3c ECADVS       byte        1e                  30
8 93e5: 6c                Rf6+3d Sc0038       byte        6c                 108

EDNHYS:
8 93e6: 22                Rf6+3e EDNHYS       byte        22                  34

EDVSHYS:
8 93e7: 1a                Rf6+3f EDVSHYS      byte        1a                  26

EDTM3:
8 93e8: 00      struct     0


8 93e9: 00,00,00,00                           Unknown Calibration                         0,  0,  0,  0                              0,   0,   0,   0


8 93ed: 76                Rf6+45 Sc0039       byte        76                 118
8 93ee: 03                Rf6+46 Sc0040       byte         3                   3
8 93ef: 00                Rf6+47 Sc0041       byte         0                   0
8 93f0: 01                Rf6+48 Sc0042       byte         1                   1


8 93f1: ff,88,13,20,03                        Unknown Calibration                    ff, 88, 13, 20,  3                       255, 136,  19,  32,   3


St0003 - Structure 003:
8 93f6: a5      struct     a5


8 93f7: dc,00,00,dc                           Unknown Calibration                        dc,  0,  0, dc                            220,   0,   0, 220


8 93fb: 05                Rf6+53 Sc0043       byte         5                   5
8 93fc: 00                Rf6+54 Sc0044       byte         0                   0
8 93fd: 18                Rf6+55 Sc0045       byte        18                  24

8 93fe: 0c,00             Rf6+56 Sc0046       word         c                  12
8 9400: f6,00             Rf6+58 Sc0047       word        f6                 246

8 9402: 79                Rf6+5a Sc0048       byte        79                 121
8 9403: 04                Rf6+5b Sc0049       byte         4                   4

8 9404: c8,00             Rf6+5c Sc0050       word        c8                 200
8 9406: 90,01             Rf6+5e Sc0051       word       190                 400
8 9408: 00,87             Rf6+60 Sc0052       word      8700               34560
8 940a: 00,05             Rf6+62 Sc0053       word       500                1280
8 940c: 0c,00             Rf6+64 Sc0054       word         c                  12


Hpacl:
8 940e: 00                Rf6+66 Hpacl        byte         0                   0


8 940f: ff                                    Unknown Calibration                                    ff                                           255


8 9410: d5,09             Rf6+68 Sc0055       word       9d5                2517
8 9412: 80,a2             Rf6+6a Sc0056       word      a280               41600


Fan_temp:
8 9414: 6e                Rf6+6c Fan_temp     byte        6e                 110
8 9415: 02                Rf6+6d Sc0057       byte         2                   2
8 9416: 02                Rf6+6e Sc0058       byte         2                   2
8 9417: 50                Rf6+6f Sc0059       byte        50                  80
8 9418: 0a                Rf6+70 Sc0060       byte         a                  10
8 9419: 0a                Rf6+71 Sc0061       byte         a                  10

8 941a: e0,01             Rf6+72 Sc0062       word       1e0                 480


Fan_enble:
8 941c: 00                Rf6+74 Fan_enble    byte         0                   0

Hedfhp:
8 941d: 00                Rf6+75 Hedfhp       byte         0                   0

Ect_hs1:
8 941e: 75                Rf6+76 Ect_hs1      byte        75                 117

Ect_hs2:
8 941f: 79                Rf6+77 Ect_hs2      byte        79                 121
8 9420: 71                Rf6+78 Sc0063       byte        71                 113
8 9421: 50                Rf6+79 Sc0064       byte        50                  80

8 9422: 00,c0             Rf6+7a Sc0065       word      c000               49152
8 9424: 66,46             Rf6+7c Sc0066       word      4666               18022

8 9426: 32                Rf6+7e Sc0067       byte        32                  50
8 9427: 4b                Rf6+7f Sc0068       byte        4b                  75
8 9428: 4b                Rf6+80 Sc0069       byte        4b                  75


8 9429: ff                                    Unknown Calibration                                    ff                                           255


8 942a: 00,02             Rf6+82 Sc0070       word       200                 512
8 942c: cd,03             Rf6+84 Sc0071       word       3cd                 973

8 942e: ef                Rf6+86 Sc0072       byte        ef                 239

St0004 - Structure 004:
8 942f: 50      struct     50


Rf8_EndAddr - Rbase Rf8 end next address:
8 9430: a8,97             Rf8 Rf8_EndAddr     word      97a8               38824

Cl_th_spkadd:
8 9432: 00,00             Rf8+2 Cl_th_spkadd    word         0                   0

Ptspkad:
8 9434: 00,00             Rf8+4 Ptspkad       word         0                   0
8 9436: 68,10             Rf8+6 Sc0074        word      1068                4200
8 9438: e8,03             Rf8+8 Sc0075        word       3e8                1000

Wotspkad:
8 943a: 00,00             Rf8+a Wotspkad      word         0                   0


Splclp:
8 943c: 00                Rf8+c Splclp        byte         0                   0

Spuclp:
8 943d: b4                Rf8+d Spuclp        byte        b4                 180
8 943e: 80                Rf8+e Sc0076        byte        80                 128

LUGTIM:
8 943f: 20                Rf8+f LUGTIM        byte        20                  32
                                                         B7 B6 B5 B4 B3 B2 B1 B0
                                                          0  0  0  0  0  0  0  1
8 9440: 01                Rf8+10 Sc0077       byte         1                   1


8 9441: 00                                    Unknown Calibration                                     0                                             0


8 9442: 00,00             Rf8+12 Sc0078       word         0                   0

SPKSWL:
8 9444: 10,03             Rf8+14 SPKSWL       word       310                 784

PIP_Tlow:
8 9446: 10,03             Rf8+16 PIP_Tlow     word       310                 784

8 9448: ff                Rf8+18 Sc0079       byte        ff                 255

Hphidres:
8 9449: 00                Rf8+19 Hphidres     byte         0                   0

Tfi_dwell:
8 944a: 00                Rf8+1a Tfi_dwell    byte         0                   0


8 944b: ff                                    Unknown Calibration                                    ff                                           255


8 944c: 7b,14             Rf8+1c Sc0080       word      147b                5243
8 944e: f6,28             Rf8+1e Sc0081       word      28f6               10486

Pacslo:
8 9450: 30,00             Rf8+20 Pacslo       word        30                  48

Paclim:
8 9452: ec,11             Rf8+22 Paclim       word      11ec                4588

SPTADV:
8 9454: ae,07             Rf8+24 SPTADV       word       7ae                1966

Lowdwell:
8 9456: 00,80             Rf8+26 Lowdwell     word      8000               32768

Hidwell:
8 9458: 33,33             Rf8+28 Hidwell      word      3333               13107


DWLWF:
8 945a: 70                Rf8+2a DWLWF        byte        70                 112
8 945b: 26                Rf8+2b Sc0082       byte        26                  38


dwLTSW:
8 945c: 1f,05             Rf8+2c dwLTSW       word       51f                1311

KACRAT:
8 945e: 20,02             Rf8+2e KACRAT       word       220                 544


Retlim:
8 9460: 00                Rf8+30 Retlim       byte         0                   0

ADVLIM:
8 9461: 00                Rf8+31 ADVLIM       byte         0                   0

Tipinret:
8 9462: 00                Rf8+32 Tipinret     byte         0                   0

TIPINC:
8 9463: 01                Rf8+33 TIPINC       byte         1                   1


TIPLOD:
8 9464: cd,1c             Rf8+34 TIPLOD       word      1ccd                7373

TIPHS:
8 9466: 66,06             Rf8+36 TIPHS        word       666                1638

RPMMIN:
8 9468: 00,7d             Rf8+38 RPMMIN       word      7d00               32000

LODNOK:
8 946a: 66,06             Rf8+3a LODNOK       word       666                1638

8 946c: 00                Rf8+3c Sc0083       byte         0                   0
8 946d: 3c                Rf8+3d Sc0084       byte        3c                  60


NTIP:
8 946e: 00,00             Rf8+3e NTIP         word         0                   0

WOPEN:
8 9470: 00,80             Rf8+40 WOPEN        word      8000               32768

WINLEN:
8 9472: 00,00             Rf8+42 WINLEN       word         0                   0

RPMCNL:
8 9474: 80,3e             Rf8+44 RPMCNL       word      3e80               16000

Spklim:
8 9476: ae,07             Rf8+46 Spklim       word       7ae                1966


KNKCYL:
8 9478: 04                Rf8+48 KNKCYL       byte         4                   4

WINCLD:
8 9479: 0c                Rf8+49 WINCLD       byte         c                  12

Kihp:
8 947a: 00                Rf8+4a Kihp         byte         0                   0
8 947b: 01                Rf8+4b Sc0085       byte         1                   1
8 947c: ef                Rf8+4c Sc0086       byte        ef                 239


8 947d: ff                                    Unknown Calibration                                    ff                                           255


8 947e: 00,06             Rf8+4e Sc0087       word       600                1536
8 9480: 33,00             Rf8+50 Sc0088       word        33                  51
8 9482: 71,00             Rf8+52 Sc0089       word        71                 113
8 9484: 0a,02             Rf8+54 Sc0090       word       20a                 522

8 9486: 0a                Rf8+56 Sc0091       byte         a                  10


8 9487: ff                                    Unknown Calibration                                    ff                                           255


Fc015 - Function 015:
8 9488: ff,7f,00,06       func                7fff,      600               32767,        6
8 948c: 73,00,00,06       func                  73,      600                 115,        6
8 9490: 69,00,00,05       func                  69,      500                 105,        5
8 9494: 62,00,00,04       func                  62,      400                  98,        4
8 9498: 35,00,00,03       func                  35,      300                  53,        3
8 949c: 1e,00,00,00       func                  1e,        0                  30,        0
8 94a0: 00,80,00,00       func                8000,        0              -32768,        0
8 94a4: 00,80,00,00       func                8000,        0              -32768,        0
8 94a8: 00,80,00,00       func                8000,        0              -32768,        0

Fc016 - Function 016:
8 94ac: ff,7f,7c,00       func                7fff,       7c               32767,      124
8 94b0: 40,06,7c,00       func                 640,       7c                1600,      124
8 94b4: bc,02,00,00       func                 2bc,        0                 700,        0
8 94b8: 00,80,00,00       func                8000,        0              -32768,        0
8 94bc: 00,80,00,00       func                8000,        0              -32768,        0

Fc017 - Function 017:
8 94c0: 7f,00             func                  7f,        0                 127,        0
8 94c2: 12,00             func                  12,        0                  18,        0
8 94c4: 00,0c             func                   0,        c                   0,       12
8 94c6: 80,0c             func                  80,        c                -128,       12
8 94c8: 80,0c             func                  80,        c                -128,       12
8 94ca: 80,0c             func                  80,        c                -128,       12
8 94cc: 80,0c             func                  80,        c                -128,       12

Fc018 - Function 018:
8 94ce: ff,00             func                  ff,        0                 255,        0
8 94d0: 00,00             func                   0,        0                   0,        0
8 94d2: 00,00             func                   0,        0                   0,        0
8 94d4: 00,00             func                   0,        0                   0,        0
8 94d6: 00,00             func                   0,        0                   0,        0
8 94d8: 00,00             func                   0,        0                   0,        0

LOM_spark:
8 94da: ff,ff,8f,02       func                ffff,      28f               65535,      655
8 94de: 00,19,8f,02       func                1900,      28f                6400,      655
8 94e2: 70,17,a4,10       func                1770,     10a4                6000,     4260
8 94e6: 30,11,a4,10       func                1130,     10a4                4400,     4260
8 94ea: 00,00,cd,2c       func                   0,     2ccd                   0,    11469

Ptadvact:
8 94ee: 7f,f8             func                  7f,       f8                 127,       -8
8 94f0: 5f,f8             func                  5f,       f8                  95,       -8
8 94f2: 50,00             func                  50,        0                  80,        0
8 94f4: 80,00             func                  80,        0                -128,        0
8 94f6: 80,00             func                  80,        0                -128,        0

Fc019 - Function 019:
8 94f8: ff,00             func                  ff,        0                 255,        0
8 94fa: de,00             func                  de,        0                 222,        0
8 94fc: d4,80             func                  d4,       80                 212,      128
8 94fe: bc,80             func                  bc,       80                 188,      128
8 9500: 60,9a             func                  60,       9a                  96,      154
8 9502: 00,9a             func                   0,       9a                   0,      154

Wotadvrpm:
8 9504: ff,ff,68,00       func                ffff,       68               65535,      104
8 9508: 20,4e,68,00       func                4e20,       68               20000,      104
8 950c: b0,36,58,00       func                36b0,       58               14000,       88
8 9510: a0,28,5a,00       func                28a0,       5a               10400,       90
8 9514: 98,21,56,00       func                2198,       56                8600,       86
8 9518: 20,1c,4a,00       func                1c20,       4a                7200,       74
8 951c: a0,0f,20,00       func                 fa0,       20                4000,       32
8 9520: 00,00,20,00       func                   0,       20                   0,       32
8 9524: 00,00,20,00       func                   0,       20                   0,       32

Wotadvbap:
8 9528: ff,00             func                  ff,        0                 255,        0
8 952a: de,00             func                  de,        0                 222,        0
8 952c: d4,10             func                  d4,       10                 212,       16
8 952e: bc,10             func                  bc,       10                 188,       16
8 9530: 00,30             func                   0,       30                   0,       48

Wotadvect:
8 9532: 7f,f0             func                  7f,       f0                 127,      -16
8 9534: 7b,f0             func                  7b,       f0                 123,      -16
8 9536: 76,f8             func                  76,       f8                 118,       -8
8 9538: 64,00             func                  64,        0                 100,        0
8 953a: 3c,00             func                  3c,        0                  60,        0
8 953c: 2b,0c             func                  2b,        c                  43,       12
8 953e: 80,0c             func                  80,        c                -128,       12

Wotadvact:
8 9540: 7f,e8             func                  7f,       e8                 127,      -24
8 9542: 78,e8             func                  78,       e8                 120,      -24
8 9544: 4b,00             func                  4b,        0                  75,        0
8 9546: 80,00             func                  80,        0                -128,        0
8 9548: 80,00             func                  80,        0                -128,        0
8 954a: 80,00             func                  80,        0                -128,        0
8 954c: 80,00             func                  80,        0                -128,        0

Fc020 - Function 020:
8 954e: ff,00             func                  ff,        0                 255,        0
8 9550: 00,00             func                   0,        0                   0,        0
8 9552: 00,00             func                   0,        0                   0,        0
8 9554: 00,00             func                   0,        0                   0,        0
8 9556: 00,00             func                   0,        0                   0,        0
8 9558: 00,00             func                   0,        0                   0,        0

Fc021 - Function 021:
8 955a: ff,09             func                  ff,        9                 255,        9
8 955c: dc,00             func                  dc,        0                 220,        0
8 955e: 05,00             func                   5,        0                   5,        0
8 9560: 00,08             func                   0,        8                   0,        8
8 9562: 00,08             func                   0,        8                   0,        8
8 9564: 00,08             func                   0,        8                   0,        8
8 9566: 00,08             func                   0,        8                   0,        8

Fc022 - Function 022:
8 9568: 7f,00             func                  7f,        0                 127,        0
8 956a: 33,00             func                  33,        0                  51,        0
8 956c: 2d,1e             func                  2d,       1e                  45,       30
8 956e: 23,1e             func                  23,       1e                  35,       30
8 9570: 1e,00             func                  1e,        0                  30,        0
8 9572: 80,00             func                  80,        0                -128,        0

Basespk:
8 9574: 70,70,70,7c,84,88,88,88,88,88       table       70, 70, 70, 7c, 84, 88, 88, 88, 88, 88        112, 112, 112, 124, 132, 136, 136, 136, 136, 136        
8 957e: 70,70,70,7c,84,88,88,88,70,70       table       70, 70, 70, 7c, 84, 88, 88, 88, 70, 70        112, 112, 112, 124, 132, 136, 136, 136, 112, 112        
8 9588: 70,70,84,90,90,94,98,98,70,70       table       70, 70, 84, 90, 90, 94, 98, 98, 70, 70        112, 112, 132, 144, 144, 148, 152, 152, 112, 112        
8 9592: 64,68,70,74,80,80,98,a0,70,70       table       64, 68, 70, 74, 80, 80, 98, a0, 70, 70        100, 104, 112, 116, 128, 128, 152, 160, 112, 112        
8 959c: 50,54,64,70,7c,80,84,88,70,70       table       50, 54, 64, 70, 7c, 80, 84, 88, 70, 70         80,  84, 100, 112, 124, 128, 132, 136, 112, 112        
8 95a6: 3c,3c,40,40,48,50,5c,6c,6c,6c       table       3c, 3c, 40, 40, 48, 50, 5c, 6c, 6c, 6c         60,  60,  64,  64,  72,  80,  92, 108, 108, 108        
8 95b0: 20,28,28,2c,34,3c,54,54,54,54       table       20, 28, 28, 2c, 34, 3c, 54, 54, 54, 54         32,  40,  40,  44,  52,  60,  84,  84,  84,  84        
8 95ba: 20,20,24,28,30,38,48,54,54,54       table       20, 20, 24, 28, 30, 38, 48, 54, 54, 54         32,  32,  36,  40,  48,  56,  72,  84,  84,  84        

Sealspk:
8 95c4: 70,70,70,7c,84,88,88,88,88,88       table       70, 70, 70, 7c, 84, 88, 88, 88, 88, 88        112, 112, 112, 124, 132, 136, 136, 136, 136, 136        
8 95ce: 70,70,70,80,88,8c,8c,88,70,70       table       70, 70, 70, 80, 88, 8c, 8c, 88, 70, 70        112, 112, 112, 128, 136, 140, 140, 136, 112, 112        
8 95d8: 70,70,84,94,94,98,98,98,70,70       table       70, 70, 84, 94, 94, 98, 98, 98, 70, 70        112, 112, 132, 148, 148, 152, 152, 152, 112, 112        
8 95e2: 64,68,78,94,98,90,90,98,70,70       table       64, 68, 78, 94, 98, 90, 90, 98, 70, 70        100, 104, 120, 148, 152, 144, 144, 152, 112, 112        
8 95ec: 50,54,64,80,88,88,84,80,70,70       table       50, 54, 64, 80, 88, 88, 84, 80, 70, 70         80,  84, 100, 128, 136, 136, 132, 128, 112, 112        
8 95f6: 3c,40,40,40,48,50,68,6c,6c,6c       table       3c, 40, 40, 40, 48, 50, 68, 6c, 6c, 6c         60,  64,  64,  64,  72,  80, 104, 108, 108, 108        
8 9600: 20,20,24,28,2c,38,54,54,54,54       table       20, 20, 24, 28, 2c, 38, 54, 54, 54, 54         32,  32,  36,  40,  44,  56,  84,  84,  84,  84        
8 960a: 20,20,24,28,2c,34,54,54,54,54       table       20, 20, 24, 28, 2c, 34, 54, 54, 54, 54         32,  32,  36,  40,  44,  52,  84,  84,  84,  84        

Atlospk:
8 9614: 70,70,70,7c,84,88,88,88,88,88       table       70, 70, 70, 7c, 84, 88, 88, 88, 88, 88        112, 112, 112, 124, 132, 136, 136, 136, 136, 136        
8 961e: 70,70,70,7c,84,88,88,88,88,88       table       70, 70, 70, 7c, 84, 88, 88, 88, 88, 88        112, 112, 112, 124, 132, 136, 136, 136, 136, 136        
8 9628: 64,68,7a,86,8c,92,98,98,98,98       table       64, 68, 7a, 86, 8c, 92, 98, 98, 98, 98        100, 104, 122, 134, 140, 146, 152, 152, 152, 152        
8 9632: 50,54,50,60,7c,80,84,84,84,84       table       50, 54, 50, 60, 7c, 80, 84, 84, 84, 84         80,  84,  80,  96, 124, 128, 132, 132, 132, 132        
8 963c: 38,38,38,38,40,54,6c,6c,6c,6c       table       38, 38, 38, 38, 40, 54, 6c, 6c, 6c, 6c         56,  56,  56,  56,  64,  84, 108, 108, 108, 108        
8 9646: 20,24,28,2c,34,44,58,58,58,58       table       20, 24, 28, 2c, 34, 44, 58, 58, 58, 58         32,  36,  40,  44,  52,  68,  88,  88,  88,  88        
8 9650: 1a,20,24,28,30,38,48,48,48,48       table       1a, 20, 24, 28, 30, 38, 48, 48, 48, 48         26,  32,  36,  40,  48,  56,  72,  72,  72,  72        
8 965a: 1a,1a,24,28,30,38,48,48,48,48       table       1a, 1a, 24, 28, 30, 38, 48, 48, 48, 48         26,  26,  36,  40,  48,  56,  72,  72,  72,  72        

Tb002 - Table 002:
8 9664: 00,00,30,30,30,30,30,30,30,30       table        0,  0, 30, 30, 30, 30, 30, 30, 30, 30          0,   0,  48,  48,  48,  48,  48,  48,  48,  48        
8 966e: 00,00,30,30,30,30,30,30,30,30       table        0,  0, 30, 30, 30, 30, 30, 30, 30, 30          0,   0,  48,  48,  48,  48,  48,  48,  48,  48        
8 9678: 00,00,30,30,30,30,30,30,30,30       table        0,  0, 30, 30, 30, 30, 30, 30, 30, 30          0,   0,  48,  48,  48,  48,  48,  48,  48,  48        
8 9682: 00,00,30,30,30,30,30,30,30,30       table        0,  0, 30, 30, 30, 30, 30, 30, 30, 30          0,   0,  48,  48,  48,  48,  48,  48,  48,  48        
8 968c: 00,00,30,30,30,30,30,30,30,30       table        0,  0, 30, 30, 30, 30, 30, 30, 30, 30          0,   0,  48,  48,  48,  48,  48,  48,  48,  48        
8 9696: 00,00,00,16,16,20,30,30,30,30       table        0,  0,  0, 16, 16, 20, 30, 30, 30, 30          0,   0,   0,  22,  22,  32,  48,  48,  48,  48        
8 96a0: 00,00,00,00,00,00,00,00,00,00       table        0,  0,  0,  0,  0,  0,  0,  0,  0,  0          0,   0,   0,   0,   0,   0,   0,   0,   0,   0        
8 96aa: 00,00,00,00,00,00,00,00,00,00       table        0,  0,  0,  0,  0,  0,  0,  0,  0,  0          0,   0,   0,   0,   0,   0,   0,   0,   0,   0        

Tb003 - Table 003:
8 96b4: 00,10,04,00       table        0, 10,  4,  0          0,  16,   4,   0        
8 96b8: 20,14,04,08       table       20, 14,  4,  8         32,  20,   4,   8        
8 96bc: 2c,24,10,10       table       2c, 24, 10, 10         44,  36,  16,  16        

Tb004 - Table 004:
8 96c0: 00,00,00,00,00,00,00,00,00,00       table        0,  0,  0,  0,  0,  0,  0,  0,  0,  0          0,   0,   0,   0,   0,   0,   0,   0,   0,   0        
8 96ca: 00,00,00,00,00,00,00,00,00,00       table        0,  0,  0,  0,  0,  0,  0,  0,  0,  0          0,   0,   0,   0,   0,   0,   0,   0,   0,   0        
8 96d4: 00,00,00,00,00,00,00,00,00,00       table        0,  0,  0,  0,  0,  0,  0,  0,  0,  0          0,   0,   0,   0,   0,   0,   0,   0,   0,   0        
8 96de: 00,00,00,00,00,00,00,00,00,00       table        0,  0,  0,  0,  0,  0,  0,  0,  0,  0          0,   0,   0,   0,   0,   0,   0,   0,   0,   0        
8 96e8: 00,00,00,00,00,00,00,00,00,00       table        0,  0,  0,  0,  0,  0,  0,  0,  0,  0          0,   0,   0,   0,   0,   0,   0,   0,   0,   0        
8 96f2: 00,00,00,00,00,00,00,00,00,00       table        0,  0,  0,  0,  0,  0,  0,  0,  0,  0          0,   0,   0,   0,   0,   0,   0,   0,   0,   0        
8 96fc: 00,00,00,00,00,00,00,00,00,00       table        0,  0,  0,  0,  0,  0,  0,  0,  0,  0          0,   0,   0,   0,   0,   0,   0,   0,   0,   0        
8 9706: 00,00,00,00,00,00,00,00,00,00       table        0,  0,  0,  0,  0,  0,  0,  0,  0,  0          0,   0,   0,   0,   0,   0,   0,   0,   0,   0        

Tb005 - Table 005:
8 9710: 00,00,00,00,00,00,00       table        0,  0,  0,  0,  0,  0,  0          0,   0,   0,   0,   0,   0,   0        
8 9717: 00,00,00,00,00,00,00       table        0,  0,  0,  0,  0,  0,  0          0,   0,   0,   0,   0,   0,   0        
8 971e: 00,00,00,00,00,00,00       table        0,  0,  0,  0,  0,  0,  0          0,   0,   0,   0,   0,   0,   0        
8 9725: 0c,00,00,00,00,00,00       table        c,  0,  0,  0,  0,  0,  0         12,   0,   0,   0,   0,   0,   0        
8 972c: 0c,00,00,00,00,00,f0       table        c,  0,  0,  0,  0,  0, f0         12,   0,   0,   0,   0,   0, -16        
8 9733: 14,00,00,00,00,00,f0       table       14,  0,  0,  0,  0,  0, f0         20,   0,   0,   0,   0,   0, -16        
8 973a: 14,00,00,00,00,fc,f0       table       14,  0,  0,  0,  0, fc, f0         20,   0,   0,   0,   0,  -4, -16        
8 9741: 14,00,00,00,00,f8,f0       table       14,  0,  0,  0,  0, f8, f0         20,   0,   0,   0,   0,  -8, -16        

Min_Low_dwell:
8 9748: ff,ff,bc,05       func                ffff,      5bc               65535,     1468
8 974c: f0,00,bc,05       func                  f0,      5bc                 240,     1468
8 9750: e0,00,25,06       func                  e0,      625                 224,     1573
8 9754: c0,00,31,08       func                  c0,      831                 192,     2097
8 9758: a0,00,37,09       func                  a0,      937                 160,     2359
8 975c: 00,00,37,09       func                   0,      937                   0,     2359

Min_Hi_dwell:
8 9760: ff,ff,25,06       func                ffff,      625               65535,     1573
8 9764: f0,00,25,06       func                  f0,      625                 240,     1573
8 9768: d0,00,dc,06       func                  d0,      6dc                 208,     1756
8 976c: c0,00,94,07       func                  c0,      794                 192,     1940
8 9770: a0,00,3d,0a       func                  a0,      a3d                 160,     2621
8 9774: 00,00,3d,0a       func                   0,      a3d                   0,     2621

Fc023 - Function 023:
8 9778: ff,04             func                  ff,        4                 255,        4
8 977a: 9c,04             func                  9c,        4                 156,        4
8 977c: 5e,0c             func                  5e,        c                  94,       12
8 977e: 1f,10             func                  1f,       10                  31,       16
8 9780: 00,14             func                   0,       14                   0,       20
8 9782: 00,14             func                   0,       14                   0,       20

Fc024 - Function 024:
8 9784: ff,19             func                  ff,       19                 255,       25
8 9786: 9c,19             func                  9c,       19                 156,       25
8 9788: 5e,16             func                  5e,       16                  94,       22
8 978a: 4e,13             func                  4e,       13                  78,       19
8 978c: 3f,04             func                  3f,        4                  63,        4
8 978e: 2f,03             func                  2f,        3                  47,        3
8 9790: 00,03             func                   0,        3                   0,        3

Fc025 - Function 025:
8 9792: ff,00             func                  ff,        0                 255,        0
8 9794: 00,00             func                   0,        0                   0,        0
8 9796: 00,00             func                   0,        0                   0,        0
8 9798: 00,00             func                   0,        0                   0,        0
8 979a: 00,00             func                   0,        0                   0,        0

Advrpm:
8 979c: ff,10             func                  ff,       10                 255,       16
8 979e: 7d,10             func                  7d,       10                 125,       16
8 97a0: 5e,18             func                  5e,       18                  94,       24
8 97a2: 1f,20             func                  1f,       20                  31,       32
8 97a4: 00,20             func                   0,       20                   0,       32
8 97a6: 00,20             func                   0,       20                   0,       32


Rfa_EndAddr - Rbase Rfa end next address:
8 97a8: 7e,9a             Rfa Rfa_EndAddr     word      9a7e               39550

Tp_Delta:
8 97aa: 00,02             Rfa+2 Tp_Delta      word       200                 512

Tp_Hysts2:
8 97ac: 40,01             Rfa+4 Tp_Hysts2     word       140                 320

TP_Hysts:
8 97ae: 40,01             Rfa+6 TP_Hysts      word       140                 320

Wotbrkv:
8 97b0: c0,8a             Rfa+8 Wotbrkv       word      8ac0               35520


Ldel:
8 97b2: 7f                Rfa+a Ldel          byte        7f                 127

Ldeh:
8 97b3: 6e                Rfa+b Ldeh          byte        6e                 110


8 97b4: 0a                                    Unknown Calibration                                     a                                            10



LDLTM:
8 97b5: 28                Rfa+d LDLTM         byte        28                  40


LDMH:
8 97b6: b8,7e             Rfa+e LDMH          word      7eb8               32440

LDMHH:
8 97b8: d7,03             Rfa+10 LDMHH        word       3d7                 983

Olflmult:
8 97ba: ff,00             Rfa+12 Olflmult     word        ff                 255

8 97bc: 08                Rfa+14 Sc0093       byte         8                   8


8 97bd: ff                                    Unknown Calibration                                    ff                                           255



200rpm:
8 97be: 20,03             Rfa+16 200rpm       word       320                 800
8 97c0: 90,01             Rfa+18 Sc0094       word       190                 400

225_RPM:
8 97c2: 84,03             Rfa+1a 225_RPM      word       384                 900
8 97c4: c8,00             Rfa+1c Sc0095       word        c8                 200

8 97c6: 02                Rfa+1e Sc0096       byte         2                   2

St0005 - Structure 005:
8 97c7: 1e      struct     1e


8 97c8: 5a,00,00,f0                           Unknown Calibration                        5a,  0,  0, f0                             90,   0,   0, 240


8 97cc: 00                Rfa+24 Sc0097       byte         0                   0

Egr_mult:
8 97cd: 80                Rfa+25 Egr_mult     byte        80                 128


EGRDCOFF:
8 97ce: cd,2c             Rfa+26 EGRDCOFF     word      2ccd               11469

EGRDB:
8 97d0: 00,02             Rfa+28 EGRDB        word       200                 512


egrmpt:
8 97d2: 0a                Rfa+2a egrmpt       byte         a                  10


8 97d3: ff                                    Unknown Calibration                                    ff                                           255



XFREPT:
8 97d4: fe,54             Rfa+2c XFREPT       word      54fe               21758
8 97d6: 00,30             Rfa+2e Sc0098       word      3000               12288

8 97d8: 01                Rfa+30 Sc0099       byte         1                   1

Egr_type:
                                                         B7 B6 B5 B4 B3 B2 B1 B0
                                                          0  0  0  0  0  0  0  0
8 97d9: 00                Rfa+31 Egr_type     byte         0                   0

8 97da: c8,00             Rfa+32 Sc0100       word        c8                 200

8 97dc: 5a                Rfa+34 Sc0101       byte        5a                  90


8 97dd: ff                                    Unknown Calibration                                    ff                                           255


8 97de: 3d,00             Rfa+36 Sc0102       word        3d                  61
8 97e0: 0a,00             Rfa+38 Sc0103       word         a                  10
8 97e2: 00,01             Rfa+3a Sc0104       word       100                 256
8 97e4: 9a,02             Rfa+3c Sc0105       word       29a                 666
8 97e6: 33,0d             Rfa+3e Sc0106       word       d33                3379


//  EVP output   (d040)                                                               //
8 97e8: 01,00                                 Unknown Calibration                                 1,  0                                        1,   0


8 97ea: 8f,00             Rfa+42 Sc0107       word        8f                 143
8 97ec: 00,04             Rfa+44 Sc0108       word       400                1024


//  EGR 1    (d046)                                                                   //
8 97ee: 71,00,8f,00                           Unknown Calibration                        71,  0, 8f,  0                            113,   0, 143,   0


8 97f2: 00,01             Rfa+4a Sc0109       word       100                 256


//  RPM 1    (d04c)                                                                   //
8 97f4: cd,04,00,08,ae,00,29,00               Unknown Calibration        cd,  4,  0,  8, ae,  0, 29,  0        205,   4,   0,   8, 174,   0,  41,   0

ldffact:
//  LOAD     (d054)                                                                   //
8 97fc: 2e,00,71,01,5c,03,a4,00               Unknown Calibration        2e,  0, 71,  1, 5c,  3, a4,  0         46,   0, 113,   1,  92,   3, 164,   0
//  RPM 2    (d05c)                                                                   //
8 9804: 00,6c,5c,01,00,08,00,46               Unknown Calibration         0, 6c, 5c,  1,  0,  8,  0, 46          0, 108,  92,   1,   0,   8,   0,  70
8 980c: 40                                    Unknown Calibration                                    40                                            64


HSS_retard:
8 980d: ff,00             func                  ff,        0                 255,        0
8 980f: 00,00             func                   0,        0                   0,        0
8 9811: 00,00             func                   0,        0                   0,        0
8 9813: 00,00             func                   0,        0                   0,        0
8 9815: 00,00             func                   0,        0                   0,        0
8 9817: 00,00             func                   0,        0                   0,        0
8 9819: 00,00             func                   0,        0                   0,        0

Fc026 - Function 026:
8 981b: ff,ff             func                  ff,       ff                 255,      255
8 981d: 00,ff             func                   0,       ff                   0,      255
8 981f: 00,ff             func                   0,       ff                   0,      255
8 9821: 00,ff             func                   0,       ff                   0,      255
8 9823: 00,ff             func                   0,       ff                   0,      255
8 9825: 00,ff             func                   0,       ff                   0,      255
8 9827: 00,ff             func                   0,       ff                   0,      255


8 9829: ff                                    Unknown Calibration                                    ff                                           255


Sea_llug_ol_mult:
8 982a: ff,ff,80,00       func                ffff,       80               65535,      128
8 982e: 70,17,80,00       func                1770,       80                6000,      128
8 9832: c0,12,9a,00       func                12c0,       9a                4800,      154
8 9836: b8,0b,9a,00       func                 bb8,       9a                3000,      154
8 983a: 28,0a,80,00       func                 a28,       80                2600,      128
8 983e: 00,00,80,00       func                   0,       80                   0,      128
8 9842: 00,00,80,00       func                   0,       80                   0,      128

Alt_lug_ol_mult:
8 9846: ff,ff,80,00       func                ffff,       80               65535,      128
8 984a: 00,00,80,00       func                   0,       80                   0,      128
8 984e: 00,00,80,00       func                   0,       80                   0,      128
8 9852: 00,00,80,00       func                   0,       80                   0,      128
8 9856: 00,00,80,00       func                   0,       80                   0,      128
8 985a: 00,00,80,00       func                   0,       80                   0,      128
8 985e: 00,00,80,00       func                   0,       80                   0,      128

Crnk_pw_time:
8 9862: ff,ff,00,40       func                ffff,     4000               65535,    16384
8 9866: 00,00,00,40       func                   0,     4000                   0,    16384
8 986a: 00,00,00,40       func                   0,     4000                   0,    16384
8 986e: 00,00,00,40       func                   0,     4000                   0,    16384
8 9872: 00,00,00,40       func                   0,     4000                   0,    16384
8 9876: 00,00,00,40       func                   0,     4000                   0,    16384

Crnk_pw_ect:
8 987a: ff,7f,0c,02       func                7fff,      20c               32767,      524
8 987e: 5a,00,0c,02       func                  5a,      20c                  90,      524
8 9882: 4b,00,5b,02       func                  4b,      25b                  75,      603
8 9886: 23,00,d6,05       func                  23,      5d6                  35,     1494
8 988a: 14,00,c1,0a       func                  14,      ac1                  20,     2753
8 988e: 0a,00,7d,0e       func                   a,      e7d                  10,     3709
8 9892: 00,00,6a,16       func                   0,     166a                   0,     5738
8 9896: f6,ff,b1,27       func                fff6,     27b1                 -10,    10161
8 989a: 00,80,b1,27       func                8000,     27b1              -32768,    10161

Fc027 - Function 027:
8 989e: 7f,40             func                  7f,       40                 127,       64
8 98a0: 80,40             func                  80,       40                -128,       64
8 98a2: 80,40             func                  80,       40                -128,       64
8 98a4: 80,40             func                  80,       40                -128,       64
8 98a6: 80,40             func                  80,       40                -128,       64
8 98a8: 80,40             func                  80,       40                -128,       64
8 98aa: 80,40             func                  80,       40                -128,       64
8 98ac: 80,40             func                  80,       40                -128,       64
8 98ae: 80,40             func                  80,       40                -128,       64

Fc028 - Function 028:
8 98b0: ff,ff             func                  ff,       ff                 255,      255
8 98b2: c4,d5             func                  c4,       d5                 196,      213
8 98b4: a2,b9             func                  a2,       b9                 162,      185
8 98b6: 00,40             func                   0,       40                   0,       64
8 98b8: 00,40             func                   0,       40                   0,       64

Fc029 - Function 029:
8 98ba: ff,ff,00,59       func                ffff,     5900               65535,    22784
8 98be: 00,80,00,59       func                8000,     5900               32768,    22784
8 98c2: 00,58,00,2a       func                5800,     2a00               22528,    10752
8 98c6: 00,38,00,11       func                3800,     1100               14336,     4352
8 98ca: 00,28,00,0c       func                2800,      c00               10240,     3072
8 98ce: 00,20,00,09       func                2000,      900                8192,     2304
8 98d2: 00,0c,00,00       func                 c00,        0                3072,        0
8 98d6: 00,00,00,00       func                   0,        0                   0,        0
8 98da: 00,00,00,00       func                   0,        0                   0,        0
8 98de: 00,00,00,00       func                   0,        0                   0,        0

Fc030 - Function 030:
8 98e2: 7f,20             func                  7f,       20                 127,       32
8 98e4: 78,20             func                  78,       20                 120,       32
8 98e6: 73,7f             func                  73,       7f                 115,      127
8 98e8: 41,7f             func                  41,       7f                  65,      127
8 98ea: 32,00             func                  32,        0                  50,        0
8 98ec: 80,00             func                  80,        0                -128,        0

Fc031 - Function 031:
8 98ee: ff,80             func                  ff,       80                 255,      128
8 98f0: de,80             func                  de,       80                 222,      128
8 98f2: d4,00             func                  d4,        0                 212,        0
8 98f4: 00,00             func                   0,        0                   0,        0
8 98f6: 00,00             func                   0,        0                   0,        0

Fc032 - Function 032:
8 98f8: ff,00             func                  ff,        0                 255,        0
8 98fa: de,00             func                  de,        0                 222,        0
8 98fc: d4,80             func                  d4,       80                 212,      128
8 98fe: bc,80             func                  bc,       80                 188,      128
8 9900: b2,0d             func                  b2,        d                 178,       13
8 9902: 00,0d             func                   0,        d                   0,       13

Fc033 - Function 033:
8 9904: ff,ff,8a,00       func                ffff,       8a               65535,      138
8 9908: ff,00,8a,00       func                  ff,       8a                 255,      138
8 990c: a2,00,5a,00       func                  a2,       5a                 162,       90
8 9910: 71,00,42,00       func                  71,       42                 113,       66
8 9914: 32,00,20,00       func                  32,       20                  50,       32
8 9918: 00,00,00,00       func                   0,        0                   0,        0

Fc034 - Function 034:
8 991c: 7f,80             func                  7f,       80                 127,      128
8 991e: 1c,80             func                  1c,       80                  28,      128
8 9920: 00,66             func                   0,       66                   0,      102
8 9922: 80,66             func                  80,       66                -128,      102
8 9924: 80,66             func                  80,       66                -128,      102

Fc035 - Function 035:
8 9926: ff,ff,ff,00       func                ffff,       ff               65535,      255
8 992a: 8a,00,ff,00       func                  8a,       ff                 138,      255
8 992e: 80,00,ec,00       func                  80,       ec                 128,      236
8 9932: 5a,00,a2,00       func                  5a,       a2                  90,      162
8 9936: 42,00,71,00       func                  42,       71                  66,      113
8 993a: 20,00,32,00       func                  20,       32                  32,       50
8 993e: 00,00,00,00       func                   0,        0                   0,        0

Fc036 - Function 036:
8 9942: ff,7f,ae,07       func                7fff,      7ae               32767,     1966
8 9946: 80,59,ae,07       func                5980,      7ae               22912,     1966
8 994a: 80,a6,52,f8       func                a680,     f852              -22912,    -1966
8 994e: 00,80,52,f8       func                8000,     f852              -32768,    -1966
8 9952: 00,80,52,f8       func                8000,     f852              -32768,    -1966
8 9956: 00,80,52,f8       func                8000,     f852              -32768,    -1966
8 995a: 00,80,52,f8       func                8000,     f852              -32768,    -1966

Fc037 - Function 037:
8 995e: ff,ff,00,80       func                ffff,     8000               65535,    32768
8 9962: 00,7f,00,80       func                7f00,     8000               32512,    32768
8 9966: 00,3c,a4,70       func                3c00,     70a4               15360,    28836
8 996a: 00,32,66,66       func                3200,     6666               12800,    26214
8 996e: 00,28,9a,59       func                2800,     599a               10240,    22938
8 9972: 00,14,71,3d       func                1400,     3d71                5120,    15729
8 9976: 00,0a,f6,28       func                 a00,     28f6                2560,    10486
8 997a: 00,05,29,1c       func                 500,     1c29                1280,     7209
8 997e: 00,02,00,00       func                 200,        0                 512,        0
8 9982: 00,00,00,00       func                   0,        0                   0,        0

Fc038 - Function 038:
8 9986: ff,ff,00,7f       func                ffff,     7f00               65535,    32512
8 998a: 00,80,00,7f       func                8000,     7f00               32768,    32512
8 998e: a4,70,00,3c       func                70a4,     3c00               28836,    15360
8 9992: 66,66,00,32       func                6666,     3200               26214,    12800
8 9996: 9a,59,00,28       func                599a,     2800               22938,    10240
8 999a: 71,3d,00,14       func                3d71,     1400               15729,     5120
8 999e: f6,28,00,0a       func                28f6,      a00               10486,     2560
8 99a2: 29,1c,00,05       func                1c29,      500                7209,     1280
8 99a6: 00,00,00,02       func                   0,      200                   0,      512
8 99aa: 00,00,00,00       func                   0,        0                   0,        0

Sea_l_EGR:
8 99ae: 00,00,00,00,00,00,00,00,00,00       table        0,  0,  0,  0,  0,  0,  0,  0,  0,  0          0,   0,   0,   0,   0,   0,   0,   0,   0,   0        
8 99b8: 00,00,00,00,00,00,00,00,00,00       table        0,  0,  0,  0,  0,  0,  0,  0,  0,  0          0,   0,   0,   0,   0,   0,   0,   0,   0,   0        
8 99c2: 00,00,00,00,00,00,00,00,00,00       table        0,  0,  0,  0,  0,  0,  0,  0,  0,  0          0,   0,   0,   0,   0,   0,   0,   0,   0,   0        
8 99cc: 00,00,00,10,14,20,20,18,04,00       table        0,  0,  0, 10, 14, 20, 20, 18,  4,  0          0,   0,   0,  16,  20,  32,  32,  24,   4,   0        
8 99d6: 00,00,08,20,2c,2c,2c,22,04,00       table        0,  0,  8, 20, 2c, 2c, 2c, 22,  4,  0          0,   0,   8,  32,  44,  44,  44,  34,   4,   0        
8 99e0: 00,00,08,20,24,26,20,17,00,00       table        0,  0,  8, 20, 24, 26, 20, 17,  0,  0          0,   0,   8,  32,  36,  38,  32,  23,   0,   0        
8 99ea: 00,00,08,0c,0c,0e,0f,0c,00,00       table        0,  0,  8,  c,  c,  e,  f,  c,  0,  0          0,   0,   8,  12,  12,  14,  15,  12,   0,   0        
8 99f4: 00,00,00,00,00,00,00,00,00,00       table        0,  0,  0,  0,  0,  0,  0,  0,  0,  0          0,   0,   0,   0,   0,   0,   0,   0,   0,   0        

alt_EGR:
8 99fe: 00,00,00,00,00,00,00,00,00,00       table        0,  0,  0,  0,  0,  0,  0,  0,  0,  0          0,   0,   0,   0,   0,   0,   0,   0,   0,   0        
8 9a08: 00,00,00,00,00,00,00,00,00,00       table        0,  0,  0,  0,  0,  0,  0,  0,  0,  0          0,   0,   0,   0,   0,   0,   0,   0,   0,   0        
8 9a12: 00,00,00,08,0a,10,10,00,00,00       table        0,  0,  0,  8,  a, 10, 10,  0,  0,  0          0,   0,   0,   8,  10,  16,  16,   0,   0,   0        
8 9a1c: 00,00,00,14,26,28,24,20,1a,10       table        0,  0,  0, 14, 26, 28, 24, 20, 1a, 10          0,   0,   0,  20,  38,  40,  36,  32,  26,  16        
8 9a26: 00,00,00,1c,24,22,20,14,13,08       table        0,  0,  0, 1c, 24, 22, 20, 14, 13,  8          0,   0,   0,  28,  36,  34,  32,  20,  19,   8        
8 9a30: 00,00,00,10,10,10,0f,0a,0a,00       table        0,  0,  0, 10, 10, 10,  f,  a,  a,  0          0,   0,   0,  16,  16,  16,  15,  10,  10,   0        
8 9a3a: 00,00,00,00,00,00,00,00,00,00       table        0,  0,  0,  0,  0,  0,  0,  0,  0,  0          0,   0,   0,   0,   0,   0,   0,   0,   0,   0        
8 9a44: 00,00,00,00,00,00,00,00,00,00       table        0,  0,  0,  0,  0,  0,  0,  0,  0,  0          0,   0,   0,   0,   0,   0,   0,   0,   0,   0        

Tb006 - Table 006:
8 9a4e: 80,80,80,80       table       80, 80, 80, 80        128, 128, 128, 128        
8 9a52: 2a,31,24,1d       table       2a, 31, 24, 1d         42,  49,  36,  29        
8 9a56: 00,0e,16,00       table        0,  e, 16,  0          0,  14,  22,   0        

Fc039 - Function 039:
8 9a5a: ff,80             func                  ff,       80                 255,      128
8 9a5c: 00,80             func                   0,       80                   0,      128
8 9a5e: 00,80             func                   0,       80                   0,      128
8 9a60: 00,80             func                   0,       80                   0,      128
8 9a62: 00,80             func                   0,       80                   0,      128
8 9a64: 00,80             func                   0,       80                   0,      128

Fc040 - Function 040:
8 9a66: ff,80             func                  ff,       80                 255,      128
8 9a68: 08,80             func                   8,       80                   8,      128
8 9a6a: 00,00             func                   0,        0                   0,        0
8 9a6c: 00,00             func                   0,        0                   0,        0
8 9a6e: 00,00             func                   0,        0                   0,        0
8 9a70: 00,00             func                   0,        0                   0,        0

Fc041 - Function 041:
8 9a72: ff,80             func                  ff,       80                 255,      128
8 9a74: 50,80             func                  50,       80                  80,      128
8 9a76: 28,33             func                  28,       33                  40,       51
8 9a78: 14,2d             func                  14,       2d                  20,       45
8 9a7a: 0c,00             func                   c,        0                  12,        0
8 9a7c: 00,00             func                   0,        0                   0,        0


Rfc_EndAddr - Rbase Rfc end next address:
8 9a7e: 5a,9e             Rfc Rfc_EndAddr     word      9e5a               40538

8 9a80: 00                Rfc+2 Sc0111        byte         0                   0


8 9a81: ff                                    Unknown Calibration                                    ff                                           255


Halffuelon:
8 9a82: 00      struct     0


8 9a83: 7d                                    Unknown Calibration                                    7d                                           125

Halffueloff:
//  Half fuel off                                                                     //
8 9a84: 30,75,ff,ff,ff,ff                     Unknown Calibration                30, 75, ff, ff, ff, ff                   48, 117, 255, 255, 255, 255



Spdlim_a_off:
8 9a8a: 00,28             Rfc+c Spdlim_a_off    word      2800               10240

8 9a8c: 3c                Rfc+e Sc0112        byte        3c                  60
8 9a8d: 64                Rfc+f Sc0113        byte        64                 100


8 9a8e: 00,00,03,ff                           Unknown Calibration                         0,  0,  3, ff                              0,   0,   3, 255



Openlpv:
8 9a92: c0,8a             Rfc+14 Openlpv      word      8ac0               35520



Max_rpm_f:
//  no fuel rpm (max rpm)                                                             //
8 9a94: 60,6d,90,01                           Unknown Calibration                        60, 6d, 90,  1                             96, 109, 144,   1


8 9a98: 01                Rfc+1a Sc0114       byte         1                   1


8 9a99: ff                                    Unknown Calibration                                    ff                                           255



Min_cl_ld:
8 9a9a: a4,00             Rfc+1c Min_cl_ld    word        a4                 164

Min_ld_cl:
8 9a9c: a4,00             Rfc+1e Min_ld_cl    word        a4                 164

HLODH:
8 9a9e: ae,07             Rfc+20 HLODH        word       7ae                1966


Ol_time:
8 9aa0: 10                Rfc+22 Ol_time      byte        10                  16


8 9aa1: ff                                    Unknown Calibration                                    ff                                           255



Lammax:
8 9aa2: 66,a6             Rfc+24 Lammax       word      a666               42598

Lammin:
8 9aa4: 00,60             Rfc+26 Lammin       word      6000               24576


8 9aa6: 8f,02                                 Unknown Calibration                                8f,  2                                      143,   2


8 9aa8: 00,01             Rfc+2a Sc0115       word       100                 256
8 9aaa: 68,01             Rfc+2c Sc0116       word       168                 360
8 9aac: 00,01             Rfc+2e Sc0117       word       100                 256

8 9aae: 01                Rfc+30 Sc0118       byte         1                   1

InJPP:
8 9aaf: 01                Rfc+31 InJPP        byte         1                   1

Cyl_wrap:
8 9ab0: 08                Rfc+32 Cyl_wrap     byte         8                   8

Outinj:
8 9ab1: 01                Rfc+33 Outinj       byte         1                   1
8 9ab2: 00                Rfc+34 Sc0119       byte         0                   0
8 9ab3: 00                Rfc+35 Sc0120       byte         0                   0
8 9ab4: 00                Rfc+36 Sc0121       byte         0                   0


8 9ab5: ff                                    Unknown Calibration                                    ff                                           255


8 9ab6: 48,0d             Rfc+38 Sc0122       word       d48                3400
8 9ab8: 20,03             Rfc+3a Sc0123       word       320                 800

8 9aba: 58                Rfc+3c Sc0124       byte        58                  88
8 9abb: 58                Rfc+3d Sc0125       byte        58                  88
8 9abc: 00                Rfc+3e Sc0126       byte         0                   0

St0006 - Structure 006:
8 9abd: 4b      struct     4b


8 9abe: bd,00,00,bd                           Unknown Calibration                        bd,  0,  0, bd                            189,   0,   0, 189


8 9ac2: 80                Rfc+44 Sc0127       byte        80                 128

Minect_shut:
8 9ac3: 46                Rfc+45 Minect_shut    byte        46                  70

8 9ac4: 48,01             Rfc+46 Sc0128       word       148                 328
8 9ac6: ec,01             Rfc+48 Sc0129       word       1ec                 492

Minrpm_shut:
8 9ac8: 58,02             Rfc+4a Minrpm_shut    word       258                 600
8 9aca: 58,02             Rfc+4c Sc0130       word       258                 600

8 9acc: 10                Rfc+4e Sc0131       byte        10                  16
8 9acd: 00                Rfc+4f Sc0132       byte         0                   0
8 9ace: f8                Rfc+50 Sc0133       byte        f8                 248
8 9acf: f8                Rfc+51 Sc0134       byte        f8                 248
8 9ad0: 06                Rfc+52 Sc0135       byte         6                   6

Pipnum:
8 9ad1: 04                Rfc+53 Pipnum       byte         4                   4


8 9ad2: c0,00                                 Unknown Calibration                                c0,  0                                      192,   0



SHFRPM:
8 9ad4: 28,0a             Rfc+56 SHFRPM       word       a28                2600

SHMRPMH:
8 9ad6: 58,02             Rfc+58 SHMRPMH      word       258                 600


8 9ad8: 73,00                                 Unknown Calibration                                73,  0                                      115,   0



DFSVS:
8 9ada: 0a                Rfc+5c DFSVS        byte         a                  10

DFSVSH:
8 9adb: 04                Rfc+5d DFSVSH       byte         4                   4

8 9adc: 00,00             Rfc+5e Sc0136       word         0                   0
8 9ade: 00,00             Rfc+60 Sc0137       word         0                   0

8 9ae0: 00                Rfc+62 Sc0138       byte         0                   0
8 9ae1: 00                Rfc+63 Sc0139       byte         0                   0

MinECT_adp:
8 9ae2: 55                Rfc+64 MinECT_adp    byte        55                  85

MaxECT_adp:
8 9ae3: 71                Rfc+65 MaxECT_adp    byte        71                 113

Minact_adp:
8 9ae4: 32                Rfc+66 Minact_adp    byte        32                  50

Maxact_adp:
8 9ae5: 64                Rfc+67 Maxact_adp    byte        64                 100


ADAPTIM:
8 9ae6: 3c,00             Rfc+68 ADAPTIM      word        3c                  60
8 9ae8: 7b,04             Rfc+6a Sc0140       word       47b                1147
8 9aea: 40,00             Rfc+6c Sc0141       word        40                  64
8 9aec: 40,00             Rfc+6e Sc0142       word        40                  64


Adp_ctl_min:
8 9aee: 61                Rfc+70 Adp_ctl_min    byte        61                  97

Adp_ctl_max:
8 9aef: 9f                Rfc+71 Adp_ctl_max    byte        9f                 159

8 9af0: 00,00             Rfc+72 Sc0143       word         0                   0

LMBJMP:
8 9af2: 00,00             Rfc+74 LMBJMP       word         0                   0
8 9af4: c5,00             Rfc+76 Sc0144       word        c5                 197

8 9af6: 00                Rfc+78 Sc0145       byte         0                   0
8 9af7: 00                Rfc+79 Sc0146       byte         0                   0
8 9af8: 06                Rfc+7a Sc0147       byte         6                   6


8 9af9: 2e                                    Unknown Calibration                                    2e                                            46


8 9afa: 00                Rfc+7c Sc0148       byte         0                   0


8 9afb: ff                                    Unknown Calibration                                    ff                                           255


HCAMSW:
8 9afc: ff,ff,00,05       func                ffff,      500               65535,        5
8 9b00: 1e,00,00,05       func                  1e,      500                  30,        5
8 9b04: 0a,00,00,03       func                   a,      300                  10,        3
8 9b08: 05,00,00,02       func                   5,      200                   5,        2
8 9b0c: 00,00,00,00       func                   0,        0                   0,        0

Emm_rscale:
8 9b10: ff,ff,00,03       func                ffff,      300               65535,        3
8 9b14: e0,2e,00,03       func                2ee0,      300               12000,        3
8 9b18: 10,0e,00,01       func                 e10,      100                3600,        1
8 9b1c: f0,0a,00,00       func                 af0,        0                2800,        0
8 9b20: 00,00,00,00       func                   0,        0                   0,        0
8 9b24: 00,00,00,00       func                   0,        0                   0,        0
8 9b28: 00,00,00,00       func                   0,        0                   0,        0
8 9b2c: 00,00,00,00       func                   0,        0                   0,        0

Inj_vss:
8 9b30: ff,1d             func                  ff,       1d                 255,       29
8 9b32: e0,1d             func                  e0,       1d                 224,       29
8 9b34: d0,20             func                  d0,       20                 208,       32
8 9b36: c0,25             func                  c0,       25                 192,       37
8 9b38: b0,2d             func                  b0,       2d                 176,       45
8 9b3a: a0,36             func                  a0,       36                 160,       54
8 9b3c: 90,41             func                  90,       41                 144,       65
8 9b3e: 80,53             func                  80,       53                 128,       83
8 9b40: 70,71             func                  70,       71                 112,      113
8 9b42: 60,b1             func                  60,       b1                  96,      177
8 9b44: 58,f0             func                  58,       f0                  88,      240
8 9b46: 00,f0             func                   0,       f0                   0,      240

Olactmult:
8 9b48: 7f,40             func                  7f,       40                 127,       64
8 9b4a: 26,40             func                  26,       40                  38,       64
8 9b4c: 00,34             func                   0,       34                   0,       52
8 9b4e: ec,29             func                  ec,       29                 -20,       41
8 9b50: 80,29             func                  80,       29                -128,       41
8 9b52: 80,29             func                  80,       29                -128,       41

Cl_ol_fuel:
8 9b54: ff,ff,80,00       func                ffff,       80               65535,      128
8 9b58: 00,00,80,00       func                   0,       80                   0,      128
8 9b5c: 00,00,80,00       func                   0,       80                   0,      128
8 9b60: 00,00,80,00       func                   0,       80                   0,      128
8 9b64: 00,00,80,00       func                   0,       80                   0,      128
8 9b68: 00,00,80,00       func                   0,       80                   0,      128

Fc042 - Function 042:
8 9b6c: ff,ff,80,00       func                ffff,       80               65535,      128
8 9b70: 00,00,80,00       func                   0,       80                   0,      128
8 9b74: 00,00,80,00       func                   0,       80                   0,      128
8 9b78: 00,00,80,00       func                   0,       80                   0,      128
8 9b7c: 00,00,80,00       func                   0,       80                   0,      128

Wot_fuel_mlt:
8 9b80: ff,ff,79,00       func                ffff,       79               65535,      121
8 9b84: c0,5d,79,00       func                5dc0,       79               24000,      121
8 9b88: c0,44,7a,00       func                44c0,       7a               17600,      122
8 9b8c: 60,3b,7d,00       func                3b60,       7d               15200,      125
8 9b90: 00,32,79,00       func                3200,       79               12800,      121
8 9b94: 80,25,7c,00       func                2580,       7c                9600,      124
8 9b98: 00,19,74,00       func                1900,       74                6400,      116
8 9b9c: 00,00,80,00       func                   0,       80                   0,      128

Tb007 - Table 007:
8 9ba0: 80,80,80,80,80,80,80,80,80,80       table       80, 80, 80, 80, 80, 80, 80, 80, 80, 80        128, 128, 128, 128, 128, 128, 128, 128, 128, 128        
8 9baa: 80,80,80,80,80,80,80,80,80,80       table       80, 80, 80, 80, 80, 80, 80, 80, 80, 80        128, 128, 128, 128, 128, 128, 128, 128, 128, 128        
8 9bb4: 80,80,80,80,80,80,80,80,80,80       table       80, 80, 80, 80, 80, 80, 80, 80, 80, 80        128, 128, 128, 128, 128, 128, 128, 128, 128, 128        
8 9bbe: 80,83,80,80,80,80,80,80,80,80       table       80, 83, 80, 80, 80, 80, 80, 80, 80, 80        128, 131, 128, 128, 128, 128, 128, 128, 128, 128        
8 9bc8: 80,83,83,80,80,80,80,80,80,80       table       80, 83, 83, 80, 80, 80, 80, 80, 80, 80        128, 131, 131, 128, 128, 128, 128, 128, 128, 128        
8 9bd2: 84,84,84,80,80,80,80,80,80,80       table       84, 84, 84, 80, 80, 80, 80, 80, 80, 80        132, 132, 132, 128, 128, 128, 128, 128, 128, 128        
8 9bdc: 86,86,85,80,80,80,80,80,80,80       table       86, 86, 85, 80, 80, 80, 80, 80, 80, 80        134, 134, 133, 128, 128, 128, 128, 128, 128, 128        
8 9be6: 86,86,86,80,80,80,80,80,80,80       table       86, 86, 86, 80, 80, 80, 80, 80, 80, 80        134, 134, 134, 128, 128, 128, 128, 128, 128, 128        

Tb008 - Table 008:
8 9bf0: 8f,8f,8d,8a,85,83,80,7a,7a,7a       table       8f, 8f, 8d, 8a, 85, 83, 80, 7a, 7a, 7a        143, 143, 141, 138, 133, 131, 128, 122, 122, 122        
8 9bfa: 8d,8d,88,85,84,83,80,7a,7a,7a       table       8d, 8d, 88, 85, 84, 83, 80, 7a, 7a, 7a        141, 141, 136, 133, 132, 131, 128, 122, 122, 122        
8 9c04: 71,72,72,73,74,76,76,7a,7a,73       table       71, 72, 72, 73, 74, 76, 76, 7a, 7a, 73        113, 114, 114, 115, 116, 118, 118, 122, 122, 115        
8 9c0e: 6d,73,73,73,77,7a,7a,80,80,76       table       6d, 73, 73, 73, 77, 7a, 7a, 80, 80, 76        109, 115, 115, 115, 119, 122, 122, 128, 128, 118        
8 9c18: 66,6f,72,73,77,77,7a,80,80,78       table       66, 6f, 72, 73, 77, 77, 7a, 80, 80, 78        102, 111, 114, 115, 119, 119, 122, 128, 128, 120        
8 9c22: 61,61,6c,6c,6f,73,71,72,6d,6d       table       61, 61, 6c, 6c, 6f, 73, 71, 72, 6d, 6d         97,  97, 108, 108, 111, 115, 113, 114, 109, 109        
8 9c2c: 5a,5a,66,66,69,6c,6e,6e,6d,6c       table       5a, 5a, 66, 66, 69, 6c, 6e, 6e, 6d, 6c         90,  90, 102, 102, 105, 108, 110, 110, 109, 108        
8 9c36: 54,54,64,64,66,69,6c,6c,6c,6c       table       54, 54, 64, 64, 66, 69, 6c, 6c, 6c, 6c         84,  84, 100, 100, 102, 105, 108, 108, 108, 108        

Tb009 - Table 009:
8 9c40: 1b,21,18,0f,0f,0f,0f,0b,0f,1b       table       1b, 21, 18,  f,  f,  f,  f,  b,  f, 1b         27,  33,  24,  15,  15,  15,  15,  11,  15,  27        
8 9c4a: 17,1d,15,0f,0f,0f,0f,0d,0f,17       table       17, 1d, 15,  f,  f,  f,  f,  d,  f, 17         23,  29,  21,  15,  15,  15,  15,  13,  15,  23        
8 9c54: 16,16,13,0f,0f,0f,0f,0c,0f,16       table       16, 16, 13,  f,  f,  f,  f,  c,  f, 16         22,  22,  19,  15,  15,  15,  15,  12,  15,  22        
8 9c5e: 12,11,11,0f,0f,0f,0f,0a,0f,12       table       12, 11, 11,  f,  f,  f,  f,  a,  f, 12         18,  17,  17,  15,  15,  15,  15,  10,  15,  18        
8 9c68: 0d,0d,0c,0b,0a,0b,0b,09,0b,0d       table        d,  d,  c,  b,  a,  b,  b,  9,  b,  d         13,  13,  12,  11,  10,  11,  11,   9,  11,  13        
8 9c72: 0a,0c,09,08,08,0a,0a,07,08,0a       table        a,  c,  9,  8,  8,  a,  a,  7,  8,  a         10,  12,   9,   8,   8,  10,  10,   7,   8,  10        
8 9c7c: 08,0a,07,04,03,07,07,02,04,08       table        8,  a,  7,  4,  3,  7,  7,  2,  4,  8          8,  10,   7,   4,   3,   7,   7,   2,   4,   8        
8 9c86: 00,00,00,00,00,00,00,00,00,00       table        0,  0,  0,  0,  0,  0,  0,  0,  0,  0          0,   0,   0,   0,   0,   0,   0,   0,   0,   0        

Fc043 - Function 043:
8 9c90: ff,ff,1f,65       func                ffff,     651f               65535,    25887
8 9c94: 20,4e,1f,65       func                4e20,     651f               20000,    25887
8 9c98: b0,36,71,6d       func                36b0,     6d71               14000,    28017
8 9c9c: 40,1f,cd,5c       func                1f40,     5ccd                8000,    23757
8 9ca0: 18,15,85,5b       func                1518,     5b85                5400,    23429
8 9ca4: a0,0f,66,56       func                 fa0,     5666                4000,    22118
8 9ca8: 00,00,33,53       func                   0,     5333                   0,    21299

Fc044 - Function 044:
8 9cac: ff,7f,9a,59       func                7fff,     599a               32767,    22938
8 9cb0: 69,00,9a,59       func                  69,     599a                 105,    22938
8 9cb4: 64,00,d7,63       func                  64,     63d7                 100,    25559
8 9cb8: 00,80,d7,63       func                8000,     63d7              -32768,    25559
8 9cbc: 00,80,d7,63       func                8000,     63d7              -32768,    25559
8 9cc0: 00,80,d7,63       func                8000,     63d7              -32768,    25559
8 9cc4: 00,80,d7,63       func                8000,     63d7              -32768,    25559

Fc045 - Function 045:
8 9cc8: ff,7f,00,01       func                7fff,      100               32767,      256
8 9ccc: 00,80,00,01       func                8000,      100              -32768,      256
8 9cd0: 00,80,00,01       func                8000,      100              -32768,      256
8 9cd4: 00,80,00,01       func                8000,      100              -32768,      256
8 9cd8: 00,80,00,01       func                8000,      100              -32768,      256
8 9cdc: 00,80,00,01       func                8000,      100              -32768,      256
8 9ce0: 00,80,00,01       func                8000,      100              -32768,      256
8 9ce4: 00,80,00,01       func                8000,      100              -32768,      256

Tb010 - Table 010:
8 9ce8: 87,87,80,79,70,5a,2e,02,02,02       table       87, 87, 80, 79, 70, 5a, 2e,  2,  2,  2        135, 135, 128, 121, 112,  90,  46,   2,   2,   2        
8 9cf2: 93,93,8c,84,7a,63,34,04,04,04       table       93, 93, 8c, 84, 7a, 63, 34,  4,  4,  4        147, 147, 140, 132, 122,  99,  52,   4,   4,   4        
8 9cfc: a3,a3,9a,91,86,6d,3a,05,04,04       table       a3, a3, 9a, 91, 86, 6d, 3a,  5,  4,  4        163, 163, 154, 145, 134, 109,  58,   5,   4,   4        
8 9d06: b3,b3,a9,9e,92,78,43,08,07,06       table       b3, b3, a9, 9e, 92, 78, 43,  8,  7,  6        179, 179, 169, 158, 146, 120,  67,   8,   7,   6        
8 9d10: c3,c3,b9,ad,a0,85,4e,0c,09,08       table       c3, c3, b9, ad, a0, 85, 4e,  c,  9,  8        195, 195, 185, 173, 160, 133,  78,  12,   9,   8        
8 9d1a: d5,d5,c9,bd,af,94,5d,12,0d,09       table       d5, d5, c9, bd, af, 94, 5d, 12,  d,  9        213, 213, 201, 189, 175, 148,  93,  18,  13,   9        
8 9d24: e7,e7,dc,cf,c0,a7,75,1b,13,0b       table       e7, e7, dc, cf, c0, a7, 75, 1b, 13,  b        231, 231, 220, 207, 192, 167, 117,  27,  19,  11        
8 9d2e: ff,ff,f2,e3,d2,bf,98,29,1d,10       table       ff, ff, f2, e3, d2, bf, 98, 29, 1d, 10        255, 255, 242, 227, 210, 191, 152,  41,  29,  16        

ECT_fuel:
8 9d38: 18,18,18,18,18,18,20,30,30,30       table       18, 18, 18, 18, 18, 18, 20, 30, 30, 30         24,  24,  24,  24,  24,  24,  32,  48,  48,  48        
8 9d42: 18,18,18,18,18,18,20,30,30,30       table       18, 18, 18, 18, 18, 18, 20, 30, 30, 30         24,  24,  24,  24,  24,  24,  32,  48,  48,  48        
8 9d4c: 18,18,18,18,18,18,20,30,30,30       table       18, 18, 18, 18, 18, 18, 20, 30, 30, 30         24,  24,  24,  24,  24,  24,  32,  48,  48,  48        
8 9d56: 18,18,18,18,18,18,20,30,30,30       table       18, 18, 18, 18, 18, 18, 20, 30, 30, 30         24,  24,  24,  24,  24,  24,  32,  48,  48,  48        
8 9d60: 18,18,18,18,18,18,20,30,30,30       table       18, 18, 18, 18, 18, 18, 20, 30, 30, 30         24,  24,  24,  24,  24,  24,  32,  48,  48,  48        
8 9d6a: 18,18,18,18,18,18,20,30,30,30       table       18, 18, 18, 18, 18, 18, 20, 30, 30, 30         24,  24,  24,  24,  24,  24,  32,  48,  48,  48        
8 9d74: 18,18,18,18,18,18,20,30,30,30       table       18, 18, 18, 18, 18, 18, 20, 30, 30, 30         24,  24,  24,  24,  24,  24,  32,  48,  48,  48        
8 9d7e: 18,18,18,18,18,18,20,30,30,30       table       18, 18, 18, 18, 18, 18, 20, 30, 30, 30         24,  24,  24,  24,  24,  24,  32,  48,  48,  48        

Ex_pulse:
8 9d88: 28,28,28,28       table       28, 28, 28, 28         40,  40,  40,  40        
8 9d8c: 28,28,28,28       table       28, 28, 28, 28         40,  40,  40,  40        
8 9d90: 28,28,28,28       table       28, 28, 28, 28         40,  40,  40,  40        
8 9d94: 28,28,28,28       table       28, 28, 28, 28         40,  40,  40,  40        
8 9d98: 28,28,28,28       table       28, 28, 28, 28         40,  40,  40,  40        
8 9d9c: 28,28,28,28       table       28, 28, 28, 28         40,  40,  40,  40        
8 9da0: 28,28,28,28       table       28, 28, 28, 28         40,  40,  40,  40        
8 9da4: 28,28,28,28       table       28, 28, 28, 28         40,  40,  40,  40        

Hego_ampl:
8 9da8: 11,11,11,11       table       11, 11, 11, 11         17,  17,  17,  17        
8 9dac: 11,11,11,11       table       11, 11, 11, 11         17,  17,  17,  17        
8 9db0: 11,11,11,11       table       11, 11, 11, 11         17,  17,  17,  17        
8 9db4: 11,11,11,11       table       11, 11, 11, 11         17,  17,  17,  17        
8 9db8: 11,11,11,11       table       11, 11, 11, 11         17,  17,  17,  17        
8 9dbc: 11,11,11,11       table       11, 11, 11, 11         17,  17,  17,  17        
8 9dc0: 11,11,11,11       table       11, 11, 11, 11         17,  17,  17,  17        
8 9dc4: 11,11,11,11       table       11, 11, 11, 11         17,  17,  17,  17        

Hego_bias:
8 9dc8: 00,0e,0e,0e       table        0,  e,  e,  e          0,  14,  14,  14        
8 9dcc: 00,04,04,04       table        0,  4,  4,  4          0,   4,   4,   4        
8 9dd0: 00,00,00,00       table        0,  0,  0,  0          0,   0,   0,   0        
8 9dd4: 00,fc,fc,fc       table        0, fc, fc, fc          0,  -4,  -4,  -4        
8 9dd8: 00,fc,fc,fc       table        0, fc, fc, fc          0,  -4,  -4,  -4        
8 9ddc: fc,f8,f8,f8       table       fc, f8, f8, f8         -4,  -8,  -8,  -8        
8 9de0: fc,f4,f4,f4       table       fc, f4, f4, f4         -4, -12, -12, -12        
8 9de4: f0,f0,f0,f0       table       f0, f0, f0, f0        -16, -16, -16, -16        

Ol_fuel_mult:
8 9de8: ff,ff,00,00       func                ffff,        0               65535,        0
8 9dec: 30,11,00,00       func                1130,        0                4400,        0
8 9df0: cc,10,80,00       func                10cc,       80                4300,      128
8 9df4: 00,00,80,00       func                   0,       80                   0,      128
8 9df8: 00,00,80,00       func                   0,       80                   0,      128
8 9dfc: 00,00,80,00       func                   0,       80                   0,      128

Lcellindx:
8 9e00: ae      struct     ae


8 9e01 -> 9e13                     fill               ae

8 9e14: 64,64                                 Unknown Calibration                                64, 64                                      100, 100

8 9e16 -> 9e1d                     fill               0a

8 9e1e: 64,64                                 Unknown Calibration                                64, 64                                      100, 100

8 9e20 -> 9e27                     fill               0a

8 9e28: d5,d5,d5,0a,0a,0a,0a,0a               Unknown Calibration        d5, d5, d5,  a,  a,  a,  a,  a        213, 213, 213,  10,  10,  10,  10,  10
8 9e30: 0a,0a,cb,cb,cb,0a,0a,0a               Unknown Calibration         a,  a, cb, cb, cb,  a,  a,  a         10,  10, 203, 203, 203,  10,  10,  10
8 9e38: 0a,0a,0a,0a,c1,c1,c1,0a               Unknown Calibration         a,  a,  a,  a, c1, c1, c1,  a         10,  10,  10,  10, 193, 193, 193,  10
8 9e40: 0a,0a,0a,0a                           Unknown Calibration                         a,  a,  a,  a                             10,  10,  10,  10

8 9e44 -> 9e51                     fill               c7

8 9e52: 0a,0a,a7,a7,a7,a7,a7,64               Unknown Calibration         a,  a, a7, a7, a7, a7, a7, 64         10,  10, 167, 167, 167, 167, 167, 100



Rfe_EndAddr - Rbase Rfe end next address:
8 9e5a: a2,9e             Rfe Rfe_EndAddr     word      9ea2               40610


TRLOAD:
8 9e5c: 03                Rfe+2 TRLOAD        byte         3                   3

Tstrat:
8 9e5d: 00                Rfe+3 Tstrat        byte         0                   0

CThigh:
8 9e5e: 55                Rfe+4 CThigh        byte        55                  85

CtLow:
8 9e5f: 1c                Rfe+5 CtLow         byte        1c                  28
8 9e60: 44                Rfe+6 Sc0150        byte        44                  68

PIPsC:
                                                         B7 B6 B5 B4 B3 B2 B1 B0
                                                          0  0  0  0  1  0  0  0
8 9e61: 08                Rfe+7 PIPsC         byte         8                   8


8 9e62: 20,03                                 Unknown Calibration                                20,  3                                       32,   3


8 9e64: 01                Rfe+a Sc0151        byte         1                   1

Thrmhp:
8 9e65: 01                Rfe+b Thrmhp        byte         1                   1

Hpcid:
8 9e66: 00                Rfe+c Hpcid         byte         0                   0

Hp_cidsel:
8 9e67: 00                Rfe+d Hp_cidsel     byte         0                   0


MHPFD:
8 9e68: 33,33             Rfe+e MHPFD         word      3333               13107

Trsrpm:
8 9e6a: 00,7d             Rfe+10 Trsrpm       word      7d00               32000

Trsrph:
8 9e6c: 90,01             Rfe+12 Trsrph       word       190                 400

8 9e6e: 02                Rfe+14 Sc0152       byte         2                   2
8 9e6f: 02                Rfe+15 Sc0153       byte         2                   2

No_hegos:
                                                         B7 B6 B5 B4 B3 B2 B1 B0
                                                          0  0  0  0  0  0  1  0
8 9e70: 02                Rfe+16 No_hegos     byte         2                   2


8 9e71: ff                                    Unknown Calibration                                    ff                                           255


8 9e72: 2c,b3             Rfe+18 Sc0154       word      b32c               45868

MINAM:
8 9e74: 00,02             Rfe+1a MINAM        word       200                 512
8 9e76: 00,00             Rfe+1c Sc0155       word         0                   0

8 9e78: 3f                Rfe+1e Sc0156       byte        3f                  63
8 9e79: 06                Rfe+1f Sc0157       byte         6                   6
8 9e7a: 13                Rfe+20 Sc0158       byte        13                  19
8 9e7b: 9a                Rfe+21 Sc0159       byte        9a                 154
8 9e7c: 66                Rfe+22 Sc0160       byte        66                 102


8 9e7d: ff                                    Unknown Calibration                                    ff                                           255


8 9e7e: 40,00             Rfe+24 Sc0161       word        40                  64

IFAM:
8 9e80: cd,08             Rfe+26 IFAM         word       8cd                2253
8 9e82: 00,60             Rfe+28 Sc0162       word      6000               24576
8 9e84: 66,a6             Rfe+2a Sc0163       word      a666               42598
8 9e86: 33,73             Rfe+2c Sc0164       word      7333               29491

St0007 - Structure 007:
8 9e88: a0      struct     a0


8 9e89: 40                                    Unknown Calibration                                    40                                            64


St0008 - Structure 008:
8 9e8a: 80      struct     80


8 9e8b: ff                                    Unknown Calibration                                    ff                                           255


8 9e8c: c8,00             Rfe+32 Sc0165       word        c8                 200

St0009 - Structure 009:
8 9e8e: e8      struct     e8


8 9e8f: 03,50,ff,e8,03,7d,00                  Unknown Calibration             3, 50, ff, e8,  3, 7d,  0               3,  80, 255, 232,   3, 125,   0


8 9e96: 9a,09             Rfe+3c Sc0166       word       99a                2458
8 9e98: 66,f6             Rfe+3e Sc0167       word      f666               -2458
8 9e9a: 93,00             Rfe+40 Sc0168       word        93                 147
8 9e9c: bd,00             Rfe+42 Sc0169       word        bd                 189
8 9e9e: 05,00             Rfe+44 Sc0170       word         5                   5

8 9ea0: 80                Rfe+46 Sc0171       byte        80                 128


8 9ea1: ff                                    Unknown Calibration                                    ff                                           255


8 9ea2 -> 9fdf                     fill               ff


Strategy:
8 9fe0: ff,ff,ff,ff,ff,ff                              


Copyright:
8 9fe6: ff,ff,ff,ff,ff,ff,ff,ff,ff,ff,ff,ff,ff,ff,ff,ff,ff,ff,ff,ff,ff,ff,ff,ff,ff,ff


╔══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
║                                                                                                                      ║
║                                                  End of Disassembly                                                  ║
║                                                                                                                      ║
╚══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
